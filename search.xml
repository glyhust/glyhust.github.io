<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/04/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>线程池</title>
    <url>/2022/04/28/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><p>线程池是一种基于池化思想管理和使用线程的机制。它是将多个线程预先存储在一个“池子”内，当有任务出现时可以避免重新创建和销毁线程所带来性能开销，只需要从“池子”内取出相应的线程执行对应的任务即可。当服务器进入正式运行阶段，开始处理客户请求的时候，如果它需要相关的资源，可以直接从池中获取，无需动态分配。当服务器处理完一个客户连接后，可以把相关的资源放回池中，无需执行系统调用释放资源。<br><a href="https://imgtu.com/i/OKcodJ"><img src="https://s1.ax1x.com/2022/05/06/OKcodJ.png" alt="线程池类"></a></p>
<span id="more"></span>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><p>IO的英文全称是Input&#x2F;Output，就是输入&#x2F;输出。应用程序发起的一次IO操作包含两个阶段：IO调用——应用程序进程向操作系统内核发起调用，IO执行——操作系统内核完成IO操作。操作系统内核完成IO操作还包括两个阶段：准备数据——内核等待I&#x2F;O设备准备好数据，拷贝数据——将数据从内核缓冲区拷贝到用户进程缓冲区。其实IO就是把进程的内部数据转移到外部设备，或者把外部设备的数据迁移到进程内部。外部设备一般指硬盘、Socket通讯的网卡。一个完整的IO过程包括以下几个步骤：</p>
<ul>
<li>应用程序进程向操作系统发起IO调用请求</li>
<li>操作系统准备数据，把IO外部设备的数据，加载到内核区</li>
<li>操作系统拷贝数据，即将内核缓冲区的数据，拷贝到用户进程缓冲区</li>
</ul>
<h3 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h3><p><strong>阻塞IO模型</strong>：应用程序的进程发起IO调用，如果内核的数据还没准备好的话，那应用程序就一直在阻塞等待，一直等到内核数据准备好了，从内核拷贝到用户空间，才返回成功提示。<br><strong>非阻塞IO模型</strong>：应用程序的进程发起IO调用，如果内核的数据还没准备好的话，就返回错误信息给用户进程，让其不需要等待，而是通过轮询的方式再来请求，其基本流程如下：</p>
<ul>
<li>应用进程向操作系统内核发起读数据请求</li>
<li>操作系统内核数据未准备好，立刻返回错误码</li>
<li>应用程序进程轮询调用，继续向操作系统内核发起读数据请求</li>
<li>操作系统内核数据准备好了，从内核缓冲区拷贝到用户空间</li>
<li>完成调用，返回成功提示</li>
</ul>
<p><strong>IO多路复用模型</strong>：系统提供一类函数（select、poll、epoll），它们可以同时监控多个fd文件描述符，任何一个返回内核数据就绪，应用进程再发起系统调用。</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">select</th>
<th align="center">poll</th>
<th align="center">epoll</th>
</tr>
</thead>
<tbody><tr>
<td align="center">底层数据结构</td>
<td align="center">数组</td>
<td align="center">链表</td>
<td align="center">红黑树和链表</td>
</tr>
<tr>
<td align="center">获取就绪的fd</td>
<td align="center">遍历</td>
<td align="center">遍历</td>
<td align="center">事件回调</td>
</tr>
<tr>
<td align="center">事件复杂度</td>
<td align="center">O(n)</td>
<td align="center">O(n)</td>
<td align="center">O(1)</td>
</tr>
<tr>
<td align="center">最大连接数</td>
<td align="center">1024</td>
<td align="center">无限制</td>
<td align="center">无限制</td>
</tr>
<tr>
<td align="center">fd数据拷贝</td>
<td align="center">每次调用select，需要将fd数据从用户空间拷贝到内核空间</td>
<td align="center">每次调用poll，需要将fd数据从用户空间拷贝到内核空间</td>
<td align="center">使用内存映射，不需要从用户空间频繁拷贝fd数据到内核空间</td>
</tr>
</tbody></table>
<p><strong>信号驱动IO模型</strong>：不再用主动询问的方式去确认数据是否就绪，而是向内核发送一个信号，然后应用用户进程可以去做别的事，不用阻塞。当内核数据准备好后，再通过信号通知应用进程数据准备好后的可读状态，应用用户进程收到信号之后，立刻调用读写操作。<br><strong>异步IO模型</strong>：前面提到的阻塞、非阻塞、信号驱动、多路复用IO模型，在数据从内核复制到应用缓冲区的时候，都是阻塞的，因此都不算是真正的异步。而异步IO可以实现IO全流程的非阻塞，就是应用进程发出系统调用后，是立即返回的，但是立即返回的不是处理结果，而是表示类似提交成功的意思。等内核数据准备好，将数据拷贝到用户缓冲区，发送信号通知用户进程IO操作执行完毕。</p>
<h3 id="事件处理模型"><a href="#事件处理模型" class="headerlink" title="事件处理模型"></a>事件处理模型</h3><p>服务器程序通常需要处理三类事件：I&#x2F;O 事件、信号及定时事件。随着网络设计模式的兴起，Reactor和Proactor事件处理模式应运而生。同步IO模型通常用于实现Reactor模式，异步IO模型则用于实现Proactor模式。<br><strong>Reactor模式</strong>：<br>Reactor模式要求主线程（I&#x2F;O 处理单元）只负责监听文件描述符上是否有事件发生，有的话就立即将该事件通知工作线程（逻辑单元）。除此之外，主线程不做任何其他实质性的工作。读写数据，接受新的连接，以及处理客户请求均在工作线程中完成。使用同步I&#x2F;O模型（以epoll_wait为例）实现的Reactor模式的工作流程是：</p>
<ol>
<li>主线程往epoll内核事件表中注册socket上的读就绪事件。</li>
<li>主线程调用epoll_wait等待socket上有数据可读。</li>
<li>当socket上有数据可读时，epoll_wait通知主线程。主线程则将socket可读事件放入请求队列。</li>
<li>睡眠在请求队列上的某个工作线程被唤醒，它从socket读取数据，并处理客户请求，然后往epoll内核事件表中注册该socket上的写就绪事件。</li>
<li>主线程调用epoll_wait等待socket可写。</li>
<li>当socket可写时，epoll_wait通知主线程。主线程将socket可写事件放入请求队列。</li>
<li>睡眠在请求队列上的某个工作进程被唤醒，它往socket上写入服务器处理客户请求的结果。</li>
</ol>
<p><strong>Proactor模式</strong>：<br>与Reactor模式不同，Proactor模式将所有I&#x2F;O操作都交给主线程和内核来处理,工作线程仅仅负责业务逻辑。使用异步I&#x2F;O模型（以aio_read和aio_write为例）实现的Proactor 模式的工作流程是：</p>
<ol>
<li>主线程调用aio_read函数向内核注册socket上的读完成事件,并告诉内核用户读缓冲区的位置，以及读操作完成时如何通知应用程序(这里以信号为例)。</li>
<li>主线程继续处理其他逻辑。</li>
<li>当socket上的数据被读入用户缓冲区后，内核将向应用程序发送一个信号，以通知应用程序数据已经可用。</li>
<li>应用程序预先定义好的信号处理函数选择一个工作线程来处理客户请求。工作线程处理完客户请求之后，调用aio_write函数向内核注册socket上的写完成事件，并告诉内核用户写缓冲区的位置，以及写操作完成时如何通知应用程序（仍然以信号为例）</li>
<li>主线程继续处理其他逻辑</li>
<li>当用户缓冲区的数据被写入socket之后，内核将向应用程序发送一个信号，以通知应用程序数据已经发送完毕。</li>
<li>应用程序预先定义好的信号处理函数选择一个工作线程来做善后处理，比如决定是否关闭socket。</li>
</ol>
<h3 id="同步IO模拟Proactor模式"><a href="#同步IO模拟Proactor模式" class="headerlink" title="同步IO模拟Proactor模式"></a>同步IO模拟Proactor模式</h3><p>由于异步I&#x2F;O并不成熟，实际中使用较少，这里将使用同步I&#x2F;O模拟实现proactor模式。同步I&#x2F;O模型的工作流程如下（epoll_wait为例）：</p>
<ol>
<li>主线程往epoll内核事件表注册socket上的读就绪事件。</li>
<li>主线程调用epoll_wait等待socket上有数据可读</li>
<li>当socket上有数据可读，epoll_wait通知主线程,主线程从socket循环读取数据，直到没有更多数据可读，然后将读取到的数据封装成一个请求对象并插入请求队列。</li>
<li>睡眠在请求队列上某个工作线程被唤醒，它获得请求对象并处理客户请求，然后往epoll内核事件表中注册该socket上的写就绪事件。</li>
<li>主线程调用epoll_wait等待socket可写。</li>
<li>当socket上有数据可写，epoll_wait通知主线程。主线程往socket上写入服务器处理客户请求的结果。</li>
</ol>
<h2 id="基础API"><a href="#基础API" class="headerlink" title="基础API"></a>基础API</h2><h3 id="线程创建函数"><a href="#线程创建函数" class="headerlink" title="线程创建函数"></a>线程创建函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_create</span><span class="params">(<span class="type">pthread_t</span> *tidp, <span class="type">const</span> <span class="type">pthread_attr_t</span> *attr, (<span class="type">void</span>*)(*start_rtn)(<span class="type">void</span>*), <span class="type">void</span> *arg)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：创建新线程；</li>
<li>参数：<ul>
<li>tidp：指向线程标识符的指针；</li>
<li>attr：设置线程属性；</li>
<li>start_rtn：线程运行函数的起始地址；</li>
<li>arg：运行函数的参数；</li>
</ul>
</li>
<li>返回值：若线程创建成功，则返回0。若线程创建失败，则返回出错编号；</li>
</ul>
<h3 id="线程分离函数"><a href="#线程分离函数" class="headerlink" title="线程分离函数"></a>线程分离函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_detach</span><span class="params">(<span class="type">pthread_t</span> thread)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：实现线程分离，不再受主线程管理，由系统接任，线程结束后，其退出状态不由其它线程获取，而由自己自动释放。</li>
<li>参数：<ul>
<li>thread：线程id；</li>
</ul>
</li>
<li>返回值：调用成功返回0，失败返回出错编号；</li>
</ul>
<h2 id="核心代码分析"><a href="#核心代码分析" class="headerlink" title="核心代码分析"></a>核心代码分析</h2><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> m_thread_number;        <span class="comment">//线程池中的线程数</span></span><br><span class="line"><span class="type">int</span> m_max_requests;         <span class="comment">//请求队列中允许的最大请求数</span></span><br><span class="line"><span class="type">pthread_t</span> *m_threads;       <span class="comment">//描述线程池的数组，其大小为m_thread_number</span></span><br><span class="line">std::list&lt;T *&gt; m_workqueue; <span class="comment">//请求队列</span></span><br><span class="line">locker m_queuelocker;       <span class="comment">//保护请求队列的互斥锁</span></span><br><span class="line">sem m_queuestat;            <span class="comment">//是否有任务需要处理</span></span><br><span class="line">connection_poll *m_connPool;  <span class="comment">//数据库</span></span><br><span class="line"><span class="type">int</span> m_actor_model;          <span class="comment">//模型切换</span></span><br></pre></td></tr></table></figure>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">threadpool&lt;T&gt;::<span class="built_in">threadpool</span>( <span class="type">int</span> actor_model, connection_poll *connPool, <span class="type">int</span> thread_number, <span class="type">int</span> max_requests) : <span class="built_in">m_actor_model</span>(actor_model),<span class="built_in">m_thread_number</span>(thread_number), <span class="built_in">m_max_requests</span>(max_requests), <span class="built_in">m_threads</span>(<span class="literal">NULL</span>),<span class="built_in">m_connPool</span>(connPool)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (thread_number &lt;= <span class="number">0</span> || max_requests &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">    m_threads = <span class="keyword">new</span> <span class="type">pthread_t</span>[m_thread_number];</span><br><span class="line">    <span class="keyword">if</span> (!m_threads)</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; thread_number; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">pthread_create</span>(m_threads + i, <span class="literal">NULL</span>, worker, <span class="keyword">this</span>) != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] m_threads;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">pthread_detach</span>(m_threads[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] m_threads;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>初始化线程池中的线程数、请求队列允许的最大请求数和模型切换标志。建立多个线程，执行work回调函数，同时对线程设置detach属性，此时线程执行完毕后自动回收进程。</p>
<h3 id="公有线程工作函数"><a href="#公有线程工作函数" class="headerlink" title="公有线程工作函数"></a>公有线程工作函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *threadpool&lt;T&gt;::<span class="built_in">worker</span>(<span class="type">void</span> *arg)</span><br><span class="line">&#123;</span><br><span class="line">    threadpool *pool = (threadpool *)arg;</span><br><span class="line">    pool-&gt;<span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">return</span> pool;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用私有成员函数run。</p>
<h3 id="私有线程工作函数"><a href="#私有线程工作函数" class="headerlink" title="私有线程工作函数"></a>私有线程工作函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> threadpool&lt;T&gt;::<span class="built_in">run</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_queuestat.<span class="built_in">wait</span>();</span><br><span class="line">        m_queuelocker.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">if</span> (m_workqueue.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            m_queuelocker.<span class="built_in">unlock</span>();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        T *request = m_workqueue.<span class="built_in">front</span>();</span><br><span class="line">        m_workqueue.<span class="built_in">pop_front</span>();</span><br><span class="line">        m_queuelocker.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">if</span> (!request)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == m_actor_model)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> == request-&gt;m_state)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (request-&gt;<span class="built_in">read_once</span>())</span><br><span class="line">                &#123;</span><br><span class="line">                    request-&gt;improv = <span class="number">1</span>;</span><br><span class="line">                    <span class="function">connectionRAII <span class="title">mysqlcon</span><span class="params">(&amp;request-&gt;mysql, m_connPool)</span></span>;</span><br><span class="line">                    request-&gt;<span class="built_in">process</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    request-&gt;improv = <span class="number">1</span>;</span><br><span class="line">                    request-&gt;timer_flag = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (request-&gt;<span class="built_in">write</span>())</span><br><span class="line">                &#123;</span><br><span class="line">                    request-&gt;improv = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    request-&gt;improv = <span class="number">1</span>;</span><br><span class="line">                    request-&gt;timer_flag = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            connectionRAII <span class="built_in">mysqlcon</span>(&amp;request-&gt;mysql, m_connPool);</span><br><span class="line">            request-&gt;<span class="built_in">process</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>m_actor_model为模型切换标志，0表示proactor模式，1表示reactor模式。m_state为读写标志，0为读，1为写。在读状态下时，如果一次性读函数成功，将improv标志置1，从数据库池中取出一个数据库连接，之后执行处理读取http请求函数，如果一次性读函数失败，将timer_flag标志置1，后续从定时器队列中删除此定时器。在写状态下，执行返回http响应函数，如果失败，同样置timer_flag标志为1。</p>
]]></content>
      <categories>
        <category>webserver</category>
      </categories>
      <tags>
        <tag>-学习日志</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库连接池</title>
    <url>/2022/04/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    <content><![CDATA[<h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><p>池是一种资源的容器，有多种实现方法，如数组、链表、队列等，本项目使用单例模式和链表创建数据库连接池，实现对数据库连接资源的复用。数据库模块可以分为两部分，其一是数据库连接池的定义和初始化，其二是利用连接池完成登录和注册的校验功能。具体而言，工作线程从数据库连接池取得一个连接，访问数据库中的数据，访问完毕后将连接交还给连接池。<br><a href="https://imgtu.com/i/OKboPf"><img src="https://s1.ax1x.com/2022/05/06/OKboPf.png" alt="数据库连接池"></a></p>
<span id="more"></span>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><strong>数据库访问流程</strong>：当系统需要访问数据库时，首先创建数据库连接，完成数据库操作后，再断开数据库连接。<br><strong>数据库连接池</strong>：池是一组资源的集合，在服务器启动之初就被完全创建好并初始化。数据库连接池中的资源就是一组数据库连接，由系统动态地对池中的连接进行使用和释放。当系统开始处理客户请求时，如果它需要相关的资源，可以直接从池中获取，无需动态分配。当服务器处理完一个客户连接后，可以把相关的资源放回池中，无需执行系统调用释放资源。<br><strong>连接池的必要性</strong>：如果系统需要频繁访问数据库，则需要频繁创建和断开数据库连接，而这是一个很消耗资源的操作，也容易对数据库造成安全隐患。如果在程序初始化的时候，集中创建多个数据库连接，并把它们集中管理，供程序使用，可以保证较快的数据库读写速度，更加安全可靠。</p>
<h2 id="基础API"><a href="#基础API" class="headerlink" title="基础API"></a>基础API</h2><h3 id="mysql-init函数"><a href="#mysql-init函数" class="headerlink" title="mysql_init函数"></a>mysql_init函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">MYSQL* <span class="title">mysql_init</span><span class="params">(MYSQL *mysql)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>作用：分配或初始化与mysql_real_connect()相适应的MYSQL对象，如果mysql_init()分配了新的对象，应当在程序中调用mysql_close()来关闭连接，以释放对象；</li>
<li>参数：如果mysql是NULL指针，该函数将分配、初始化、并返回新对象。否则，将初始化对象，并返回对象的地址；</li>
<li>返回值：初始化的MYSQL*句柄，如果无足够内存以分配新的对象，返回NULL错误，在内存不足的情况下，返回NULL；<h3 id="mysql-close函数"><a href="#mysql-close函数" class="headerlink" title="mysql_close函数"></a>mysql_close函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">mysql_close</span><span class="params">(MYSQL *mysql)</span> </span></span><br></pre></td></tr></table></figure></li>
<li>关闭前面打开的连接，如果句柄是由mysql_init()或mysql_connect()自动分配的，mysql_close()还将解除分配由mysql指向的连接句柄。<h3 id="mysql-real-connect函数"><a href="#mysql-real-connect函数" class="headerlink" title="mysql_real_connect函数"></a>mysql_real_connect函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">MYSQL* <span class="title">mysql_real_connect</span><span class="params">(MYSQL *mysql, <span class="type">const</span> <span class="type">char</span> *host, <span class="type">const</span> <span class="type">char</span> *user, <span class="type">const</span> <span class="type">char</span> *passwd, <span class="type">const</span> <span class="type">char</span> *db, </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">unsigned</span> <span class="type">int</span> port, <span class="type">const</span> <span class="type">char</span> *unix_socket, <span class="type">unsigned</span> <span class="type">long</span> client_flag)</span> </span></span><br></pre></td></tr></table></figure></li>
<li>作用：连接数据库引擎，尝试与运行在主机上的MySQL数据库引擎建立连接；</li>
<li>参数：<ul>
<li>mysql：MYSQL变量；</li>
<li>host：MYSQL服务器的地址，如果“host”是NULL或字符串”localhost”，连接将被视为与本地主机的连接；</li>
<li>user：登录用户名，如果“user”是NULL或空字符串””，用户将被视为当前用户；</li>
<li>passwd：登录密码；</li>
<li>db：要连接的数据库，如果db为NULL，连接会将默认的数据库设为该值；</li>
<li>port：MYSQL服务器的TCP服务端口；</li>
<li>unix_socket：unix连接方式，如果unix_socket不是NULL，该字符串描述了应使用的套接字或命名管道；</li>
<li>clientflag：Mysql运行为ODBC数据库的标记，一般取0；</li>
</ul>
</li>
<li>返回值：如果连接成功，返回MYSQL*连接句柄。如果连接失败，返回NULL。对于成功的连接，返回值与第1个参数的值相同。<h3 id="mysql-query函数"><a href="#mysql-query函数" class="headerlink" title="mysql_query函数"></a>mysql_query函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">mysql_query</span><span class="params">(MYSQL *mysql, <span class="type">const</span> <span class="type">char</span> *query)</span> </span></span><br></pre></td></tr></table></figure></li>
<li>作用：查询数据库中的某一个表内容；</li>
<li>参数：<ul>
<li>mysql：MYSQL变量；</li>
<li>query：由“Null终结的字符串”查询指向的SQL查询，正常情况下，字符串必须包含1条SQL语句，而且不应为语句添加终结分号（‘;’）或“\g”，如果允许多语句执行，字符串可包含多条由分号隔开的语句。mysql_query()不能用于包含二进制数据的查询，应使用mysql_real_query()取而代之（二进制数据可能包含字符‘\0’，mysql_query()会将该字符解释为查询字符串结束），如果希望了解查询是否应返回结果集，可使用mysql_field_count()进行检查。</li>
</ul>
</li>
<li>返回值：如果查询成功，返回0。如果出现错误，返回非0值；<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">mysql_real_query</span><span class="params">(MYSQL *mysql, <span class="type">const</span> <span class="type">char</span> *q, <span class="type">unsigned</span> <span class="type">long</span> length)</span></span></span><br></pre></td></tr></table></figure></li>
<li>作用：查询数据库中的某一个表内容；</li>
<li>参数：<ul>
<li>mysql：MYSQL变量；</li>
<li>q：SQL查询语句；</li>
<li>length：查询语句的长度；</li>
</ul>
</li>
<li>返回值：如果查询成功，返回0。如果出现错误，返回非0值；<h3 id="mysql-store-result函数"><a href="#mysql-store-result函数" class="headerlink" title="mysql_store_result函数"></a>mysql_store_result函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">MYSQL_RES* <span class="title">mysql_store_result</span><span class="params">(MYSQL *mysql)</span> </span></span><br></pre></td></tr></table></figure></li>
<li>作用：显示查询数据库中数据表的内容；</li>
<li>说明：<ul>
<li>对于成功检索了数据的每个查询（SELECT、SHOW、DESCRIBE、EXPLAIN、CHECK TABLE等），必须调用mysql_store_result()或mysql_use_result()；</li>
<li>如果希望了解查询是否应返回结果集，可使用mysql_field_count()进行检查；</li>
<li>如果查询未返回结果集，mysql_store_result()将返回Null指针（例如，如果查询是INSERT语句）；</li>
<li>如果读取结果集失败，mysql_store_result()还会返回Null指针；</li>
<li>一旦调用了mysql_store_result()并获得了不是Null指针的结果，可调用mysql_num_rows()来找出结果集中的行数；</li>
<li>可以调用mysql_fetch_row()来获取结果集中的行，或调用mysql_row_seek()和mysql_row_tell()来获取或设置结果集中的当前行位置；</li>
<li>一旦完成了对结果集的操作，必须调用mysql_free_result()；</li>
</ul>
</li>
<li>返回值：具有多个结果的MYSQL_RES结果集合，如果出现错误，返回NULL；<h3 id="mysql-fetch-row函数"><a href="#mysql-fetch-row函数" class="headerlink" title="mysql_fetch_row函数"></a>mysql_fetch_row函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">MYSQL_ROW <span class="title">mysql_fetch_row</span><span class="params">(MYSQL_RES* result)</span></span></span><br></pre></td></tr></table></figure></li>
<li>作用：从结果集中获取下一行；</li>
<li>说明：<ul>
<li>在mysql_store_result()之后使用时，如果没有要检索的行，mysql_fetch_row()返回NULL；</li>
<li>在mysql_use_result()之后使用时，如果没有要检索的行或出现了错误，mysql_fetch_row()返回NULL；</li>
<li>行内值的数目由mysql_num_fields(result)给出。如果行中保存了调用mysql_fetch_row()返回的值，将按照row[0]到row[mysql_num_fields(result)-1]，访问这些值的指针；</li>
<li>可以通过调用mysql_fetch_lengths()来获得行中字段值的长度。对于空字段以及包含NULL的字段，长度为0。通过检查字段值的指针，能够区分它们。如果指针为NULL，字段为NULL，否则字段为空；</li>
</ul>
</li>
<li>返回值：下一行的MYSQL_ROW结构。如果没有更多要检索的行或出现了错误，返回NULL；<h3 id="mysql-field-count函数"><a href="#mysql-field-count函数" class="headerlink" title="mysql_field_count函数"></a>mysql_field_count函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">mysql_field_count</span><span class="params">(MYSQL *mysql)</span> </span></span><br></pre></td></tr></table></figure></li>
<li>作用：返回作用在连接上的最近查询的列数；</li>
<li>说明：该函数的正常使用是在mysql_store_result()返回NULL（因而没有结果集指针）时。在这种情况下，可调用mysql_field_count()来判定mysql_store_result()是否应生成非空结果。这样，客户端就能采取恰当的动作，而无需知道查询是否是SELECT（或类似SELECT的）语句；</li>
<li>返回值：表示结果集中列数的无符号整数；<h2 id="核心代码分析"><a href="#核心代码分析" class="headerlink" title="核心代码分析"></a>核心代码分析</h2><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string m_url;           <span class="comment">//主机地址</span></span><br><span class="line">string m_Port;          <span class="comment">//数据库端口号</span></span><br><span class="line">string m_User;          <span class="comment">//登录数据库用户名</span></span><br><span class="line">string m_Password;      <span class="comment">//登录数据库密码</span></span><br><span class="line">string m_Databasename;  <span class="comment">//使用数据库名</span></span><br><span class="line"><span class="type">int</span> m_close_log;        <span class="comment">//日志开关</span></span><br><span class="line">locker lock;</span><br><span class="line">list&lt;MYSQL*&gt; connList;  <span class="comment">//连接池</span></span><br><span class="line">sem reserve;</span><br><span class="line"><span class="type">int</span> m_MaxConn;          <span class="comment">//最大连接数</span></span><br><span class="line"><span class="type">int</span> m_CurConn;          <span class="comment">//当前已使用的连接数</span></span><br><span class="line"><span class="type">int</span> m_FreeConn;         <span class="comment">//当前空闲的连接数</span></span><br></pre></td></tr></table></figure>
<h3 id="RAII机制创建、释放资源"><a href="#RAII机制创建、释放资源" class="headerlink" title="RAII机制创建、释放资源"></a>RAII机制创建、释放资源</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">connectionRAII::<span class="built_in">connectionRAII</span>(MYSQL** SQL,connection_poll* connpool)</span><br><span class="line">&#123;</span><br><span class="line">    *SQL=connpool-&gt;<span class="built_in">GetConnection</span>();</span><br><span class="line">    conRAII=*SQL;</span><br><span class="line">    poolRAII=connpool;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
将数据库连接的获取与释放通过RAII机制封装，避免手动释放。<h3 id="单例模式创建类对象"><a href="#单例模式创建类对象" class="headerlink" title="单例模式创建类对象"></a>单例模式创建类对象</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">connection_poll* <span class="title">connection_poll::GetInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> connection_poll connPool;</span><br><span class="line">    <span class="keyword">return</span> &amp;connPool;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
通过单例模式创建数据库连接池，返回静态成员变量。<h3 id="初始化数据库连接池"><a href="#初始化数据库连接池" class="headerlink" title="初始化数据库连接池"></a>初始化数据库连接池</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">connection_poll::init</span><span class="params">(string url,string User,string Password,string Databasename,<span class="type">int</span> Port,<span class="type">int</span> Maxconn,<span class="type">int</span> close_log)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_url=url;</span><br><span class="line">    m_Port=Port;</span><br><span class="line">    m_User=User;</span><br><span class="line">    m_Password=Password;</span><br><span class="line">    m_Databasename=Databasename;</span><br><span class="line">    m_close_log=close_log;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;Maxconn;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        MYSQL* con=<span class="literal">NULL</span>;</span><br><span class="line">        con=<span class="built_in">mysql_init</span>(con);</span><br><span class="line">        <span class="keyword">if</span>(con==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">LOG_ERROR</span>(<span class="string">&quot;MySQL Error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        con=<span class="built_in">mysql_real_connect</span>(con,url.<span class="built_in">c_str</span>(),User.<span class="built_in">c_str</span>(),Password.<span class="built_in">c_str</span>(),Databasename.<span class="built_in">c_str</span>(),Port,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(con==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">LOG_ERROR</span>(<span class="string">&quot;MySQL Error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        connList.<span class="built_in">push_back</span>(con);</span><br><span class="line">        m_FreeConn++;</span><br><span class="line">    &#125;</span><br><span class="line">    reserve=<span class="built_in">sem</span>(m_FreeConn);</span><br><span class="line">    m_MaxConn=m_FreeConn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
创建Maxconn个数据库连接。<h3 id="返回数据库连接"><a href="#返回数据库连接" class="headerlink" title="返回数据库连接"></a>返回数据库连接</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">MYSQL* <span class="title">connection_poll::GetConnection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MYSQL* con=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(connList.<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    reserve.<span class="built_in">wait</span>();</span><br><span class="line">    lock.<span class="built_in">lock</span>();</span><br><span class="line">    con=connList.<span class="built_in">front</span>();</span><br><span class="line">    connList.<span class="built_in">pop_front</span>();</span><br><span class="line">    m_FreeConn--;</span><br><span class="line">    m_CurConn++;</span><br><span class="line">    lock.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> con;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
当有请求时，从数据库连接池中返回一个可用连接，原子-1，更新使用和空闲连接数，若连接池内没有连接了，则阻塞等待。<h3 id="释放数据库连接"><a href="#释放数据库连接" class="headerlink" title="释放数据库连接"></a>释放数据库连接</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">connection_poll::ReleaseConnection</span><span class="params">(MYSQL* con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(con==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    lock.<span class="built_in">lock</span>();</span><br><span class="line">    connList.<span class="built_in">push_back</span>(con);</span><br><span class="line">    m_FreeConn++;</span><br><span class="line">    m_CurConn--;</span><br><span class="line">    lock.<span class="built_in">unlock</span>();</span><br><span class="line">    reserve.<span class="built_in">post</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
释放连接，原子+1。<h3 id="销毁数据库连接池"><a href="#销毁数据库连接池" class="headerlink" title="销毁数据库连接池"></a>销毁数据库连接池</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">connection_poll::DestroyPool</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lock.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span>(connList.<span class="built_in">size</span>()&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        list&lt;MYSQL*&gt;::iterator it;</span><br><span class="line">        <span class="keyword">for</span>(it=connList.<span class="built_in">begin</span>();it!=connList.<span class="built_in">end</span>();it++)</span><br><span class="line">        &#123;</span><br><span class="line">            MYSQL* con=*it;</span><br><span class="line">            <span class="built_in">mysql_close</span>(con);</span><br><span class="line">        &#125;</span><br><span class="line">        m_CurConn=<span class="number">0</span>;</span><br><span class="line">        m_FreeConn=<span class="number">0</span>;</span><br><span class="line">        connList.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    lock.<span class="built_in">unlock</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
通过迭代器遍历数据库连接池链表，关闭对应数据库连接，清空链表并重置空闲连接和现有连接数量。</li>
</ul>
]]></content>
      <categories>
        <category>webserver</category>
      </categories>
      <tags>
        <tag>-学习日志</tag>
      </tags>
  </entry>
  <entry>
    <title>自封装锁</title>
    <url>/2022/04/28/%E8%87%AA%E5%B0%81%E8%A3%85%E9%94%81/</url>
    <content><![CDATA[<h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><p>对Linux下三种锁（信号量、互斥锁、条件变量）进行封装，将锁的创建和销毁函数封装在类的构造和析构函数中，实现RAII机制。<br><a href="https://imgtu.com/i/OKsSC6"><img src="https://s1.ax1x.com/2022/05/06/OKsSC6.png" alt="自封装锁"></a></p>
<span id="more"></span>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>信号量是一种特殊的变量，它只能取自然数值并且只支持两种操作：等待(P)和信号(V)，假设有信号量SV，P操作：如果SV的值大于0，则将其减一，若SV的值为0，则挂起执行；V操作：如果有其他进行因为等待SV而挂起，则唤醒，若没有，则将SV值加一。</p>
<h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>互斥锁，也成互斥量，可以保护关键代码段，以确保独占式访问，当进入关键代码段，获得互斥锁将其加锁，离开关键代码段，唤醒等待该互斥锁的线程。</p>
<h3 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h3><p>条件变量是利用线程间共享的全局变量进行同步的一种机制，主要包括两个动作：一个线程等待”条件变量的条件成立”而挂起；另一个线程使”条件成立”（给出条件成立信号）。为了防止竞争，条件变量的使用总是和一个互斥锁结合在一起。</p>
<h3 id="RAII"><a href="#RAII" class="headerlink" title="RAII"></a>RAII</h3><p>RAII是Resource Acquisition Is Initialization的简称，是C++语言的一种管理资源、避免泄漏的惯用法。利用的就是C++构造的对象最终会被销毁的原则。RAII的做法是使用一个对象，在其构造时获取对应的资源，在对象生命期内控制对资源的访问，使之始终保持有效，最后在对象析构的时候，释放构造时获取的资源。在计算机系统中，资源是数量有限且对系统正常运行具有一定作用的元素。比如：网络套接字、互斥锁、文件句柄和内存等等，它们属于系统资源。由于系统的资源是有限的，就好比自然界的石油，铁矿一样，不是取之不尽，用之不竭的，所以，我们在编程使用系统资源时，都必须遵循一个步骤：</p>
<ul>
<li>申请资源；</li>
<li>使用资源；</li>
<li>释放资源；</li>
</ul>
<p>第一步和第二步缺一不可，因为资源必须要申请才能使用的，使用完成以后，必须要释放，如果不释放的话，就会造成资源泄漏。但是如果程序很复杂的时候，需要为所有的new分配的内存delete掉，导致极度臃肿，效率下降，更可怕的是，程序的可理解性和可维护性明显降低了，当操作增多时，处理资源释放的代码就会越来越多，越来越乱。如果某一个操作发生了异常而导致释放资源的语句没有被调用，这个时候RAII机制就可以派上用场了。</p>
<h2 id="基础API"><a href="#基础API" class="headerlink" title="基础API"></a>基础API</h2><h3 id="信号量初始化"><a href="#信号量初始化" class="headerlink" title="信号量初始化"></a>信号量初始化</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sem_init</span><span class="params">(<span class="type">sem_t</span>* sem,<span class="type">int</span> pshared,<span class="type">unsigned</span> <span class="type">int</span> value)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：初始化信号量；</li>
<li>参数：<ul>
<li>sem：指向未初始化信号量结构的一个指针；</li>
<li>pshared：表示这个信号量是在进程的线程之间共享，还是在进程之间共享；<ul>
<li>如果为0，那么这个信号量会在进程的线程之间共享，并且应该位于对所有线程都可见的某个地址；</li>
<li>如果不为0，那么这个信号量将在进程之间共享，并且应该位于共享内存的某个区域；</li>
</ul>
</li>
<li>value：指定信号量的初始值；</li>
</ul>
</li>
<li>返回值：成功返回0，失败返回-1；</li>
</ul>
<h3 id="信号量销毁"><a href="#信号量销毁" class="headerlink" title="信号量销毁"></a>信号量销毁</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sem_destroy</span><span class="params">(<span class="type">sem_t</span> *sem)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：释放信号量；</li>
<li>参数：<ul>
<li>sem：通过sem_init()初始化的信号量；</li>
</ul>
</li>
<li>返回值：成功返回0，失败返回-1；</li>
</ul>
<h3 id="信号量原子-1"><a href="#信号量原子-1" class="headerlink" title="信号量原子-1"></a>信号量原子-1</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sem_wait</span><span class="params">(<span class="type">sem_t</span> *sem)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：是一个原子操作，它的作用是将信号量的值-1，但它永远会先等待该信号量为一个非零值才开始做减法。也就是说，如果你对一个值为2的信号量调用sem_wait(),线程将会继续执行，将信号量的值将减到1。如果对一个值为0的信号量调用sem_wait()，这个函数就会地等待直到有其它线程增加了这个值使它不再是0为止；</li>
<li>参数：<ul>
<li>sem：通过sem_init()初始化的信号量；</li>
</ul>
</li>
<li>返回值：成功返回0，失败返回-1；</li>
</ul>
<h3 id="信号量原子-1-1"><a href="#信号量原子-1-1" class="headerlink" title="信号量原子+1"></a>信号量原子+1</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sem_post</span><span class="params">(<span class="type">sem_t</span> *sem)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：给信号量的值+1，它是一个原子操作，即同时对同一个信号量做+1操作的两个线程是不会冲突的；</li>
<li>参数：<ul>
<li>sem：通过sem_init()初始化的信号量；</li>
</ul>
</li>
<li>返回值：成功返回0，失败返回-1；</li>
</ul>
<h3 id="互斥锁初始化"><a href="#互斥锁初始化" class="headerlink" title="互斥锁初始化"></a>互斥锁初始化</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_mutex_init</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex,<span class="type">const</span> <span class="type">pthread_mutexattr_t</span> *attr)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：初始化互斥锁；</li>
<li>参数：<ul>
<li>mutex：初始化互斥锁的地址；</li>
<li>attr：指定了新建互斥锁的属性，如果参数attr为NULL，则使用默认的互斥锁属性；</li>
</ul>
</li>
<li>返回值：调用成功返回0，否则返回一个非0的错误代码；</li>
</ul>
<h3 id="互斥锁销毁"><a href="#互斥锁销毁" class="headerlink" title="互斥锁销毁"></a>互斥锁销毁</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_mutex_destroy</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span></span>; </span><br></pre></td></tr></table></figure>
<ul>
<li>作用：释放分配给互斥锁mutex的资源；</li>
<li>参数：<ul>
<li>mutex：需要销毁的互斥锁地址；</li>
</ul>
</li>
<li>返回值：调用成功返回0，否则返回一个非0的错误代码；</li>
</ul>
<h3 id="互斥锁上锁"><a href="#互斥锁上锁" class="headerlink" title="互斥锁上锁"></a>互斥锁上锁</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_mutex_lock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span></span>; </span><br></pre></td></tr></table></figure>
<ul>
<li>作用：锁住互斥锁变量，如果已被锁住，那么发出调用的线程将被阻塞直到其它进程对mutex解锁；</li>
<li>参数：<ul>
<li>mutex：需要上锁的互斥锁地址；</li>
</ul>
</li>
<li>返回值：上锁成功返回0，否则返回一个非0的错误代码；</li>
</ul>
<h3 id="互斥锁解锁"><a href="#互斥锁解锁" class="headerlink" title="互斥锁解锁"></a>互斥锁解锁</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_mutex_unlock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span></span>; </span><br></pre></td></tr></table></figure>
<ul>
<li>作用：解除互斥锁，释放mutex引用的互斥锁对象，如果调用pthread_mutex_unlock()时有多个线程被mutex对象阻塞，则互斥锁变为可用时调度策略可确定获取该互斥锁的线程。 </li>
<li>参数：<ul>
<li>mutex：需要解锁的互斥锁地址；</li>
</ul>
</li>
<li>返回值：解锁成功返回0，否则返回一个非0的错误代码；</li>
</ul>
<h3 id="信号量初始化-1"><a href="#信号量初始化-1" class="headerlink" title="信号量初始化"></a>信号量初始化</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_init</span><span class="params">(<span class="type">pthread_cond_t</span> *cond,<span class="type">const</span> <span class="type">pthread_condattr_t</span> *attr)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：初始化一个条件变量；</li>
<li>参数：<ul>
<li>cond：需要初始化的条件变量地址；</li>
<li>attr：需要指定的条件变量的属性，默认为0；</li>
</ul>
</li>
<li>返回值：初始化成功返回0，否则返回一个非0的错误代码；</li>
</ul>
<h3 id="信号量销毁-1"><a href="#信号量销毁-1" class="headerlink" title="信号量销毁"></a>信号量销毁</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_destroy</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：销毁一个条件变量，释放资源；</li>
<li>参数：<ul>
<li>cond：需要销毁的条件变量地址；</li>
</ul>
</li>
<li>返回值：销毁成功返回0，否则返回一个非0的错误代码；</li>
</ul>
<h3 id="信号量wait"><a href="#信号量wait" class="headerlink" title="信号量wait"></a>信号量wait</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_wait</span><span class="params">(<span class="type">pthread_cond_t</span> *cond,<span class="type">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_timedwait</span><span class="params">(<span class="type">pthread_cond_t</span> *cond,<span class="type">pthread_mutex_t</span> *mutex, <span class="type">const</span> structtimespec * abstime)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：线程阻塞在条件变量，直到收到这个条件变量相关的通知。需要传入已经lock的mutex变量。进入wait函数会自动解锁mutex参数指向的互斥锁，并使当前线程阻塞在cond参数指向的条件变量上。当线程被唤醒，退出wait函数时会自动对锁再次进行加锁，成功后返回。被阻塞的线程可以被pthread_cond_signal函数、pthread_cond_broadcast函数唤醒。一般一个条件表达式都是在一个互斥锁的保护下被检查。当条件表达式未被满足时，线程将仍然阻塞在这个条件变量上。当另一个线程改变了条件的值并向条件变量发出信号时，等待在这个条件变量上的一个线程或所有线程被唤醒，接着都试图再次占有相应的互斥锁。</li>
<li>参数：<ul>
<li>cond：条件变量地址；</li>
<li>mutex：互斥锁地址；</li>
<li>abstime：指定超时时间，函数到了一定的时间，即使条件未发生也会解除阻塞；</li>
</ul>
</li>
<li>返回值：调用成功返回0，否则返回一个非0的错误代码；</li>
</ul>
<h3 id="信号量signal"><a href="#信号量signal" class="headerlink" title="信号量signal"></a>信号量signal</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_signal</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_broadcast</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：这两个函数都会对指定的条件变量产生信号，通知其他线程。唯一一个区别在于当有多个线程阻塞等待条件变量的信号时，这两个函数产生信号后，对其他线程产生的影响会不一样。pthread_cond_signal 会保证至少会唤醒其中一个阻塞在这个条件变量的的线程。pthread_cond_broadcast会唤醒所有阻塞在这个条件变量的线程，适用于那些阻塞的不同线程被唤醒后会处理不同的任务。</li>
<li>参数：cond：条件变量地址；</li>
<li>返回值：调用成功返回0，否者返回一个非0的错误代码；</li>
</ul>
<h2 id="核心代码分析"><a href="#核心代码分析" class="headerlink" title="核心代码分析"></a>核心代码分析</h2><h3 id="信号量类具体实现"><a href="#信号量类具体实现" class="headerlink" title="信号量类具体实现"></a>信号量类具体实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">sem</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">sem_t</span> m_sem;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">sem</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">sem_init</span>(&amp;m_sem,<span class="number">0</span>,<span class="number">0</span>)!=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sem</span>(<span class="type">int</span> num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">sem_init</span>(&amp;m_sem,<span class="number">0</span>,num)!=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">sem</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sem_destroy</span>(&amp;m_sem);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wait</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sem_wait</span>(&amp;m_sem)==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">post</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sem_post</span>(&amp;m_sem)==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="互斥锁类具体实现"><a href="#互斥锁类具体实现" class="headerlink" title="互斥锁类具体实现"></a>互斥锁类具体实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">locker</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">pthread_mutex_t</span> m_mutex;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">locker</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pthread_mutex_init</span>(&amp;m_mutex,<span class="literal">NULL</span>)!=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">locker</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pthread_mutex_destroy</span>(&amp;m_mutex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">lock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pthread_mutex_lock</span>(&amp;m_mutex)==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">unlock</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pthread_mutex_unlock</span>(&amp;m_mutex)==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">pthread_mutex_t</span>* <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;m_mutex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="条件变量类具体实现"><a href="#条件变量类具体实现" class="headerlink" title="条件变量类具体实现"></a>条件变量类具体实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">cond</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">pthread_cond_t</span> m_cond;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">cond</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pthread_cond_init</span>(&amp;m_cond,<span class="literal">NULL</span>)!=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">cond</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pthread_cond_destroy</span>(&amp;m_cond);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wait</span><span class="params">(<span class="type">pthread_mutex_t</span>* m_mutex)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret=<span class="built_in">pthread_cond_wait</span>(&amp;m_cond,m_mutex);</span><br><span class="line">        <span class="keyword">return</span> ret==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">timewait</span><span class="params">(<span class="type">pthread_mutex_t</span>* m_mutex,<span class="keyword">struct</span> timespec t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret=<span class="built_in">pthread_cond_timedwait</span>(&amp;m_cond,m_mutex,&amp;t);</span><br><span class="line">        <span class="keyword">return</span> ret==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">signal</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pthread_cond_signal</span>(&amp;m_cond)==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">broadcast</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pthread_cond_broadcast</span>(&amp;m_cond)==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>webserver</category>
      </categories>
      <tags>
        <tag>-学习日志</tag>
      </tags>
  </entry>
</search>
