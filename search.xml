<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>WebServer类</title>
    <url>/2022/03/24/WebServer%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><p>基于浏览器&#x2F;服务器（B&#x2F;S）模型，实现了Web服务器的基本功能，用户通过浏览器实现，一部分事务逻辑在浏览器实现，主要事务逻辑在服务端实现，主要可以分为三层架构：</p>
<ul>
<li>表示层：web浏览器。位于客户端，其任务是通过web浏览器向网络上的某个web服务器提出服务请求</li>
<li>功能层：具有应用程序扩展功能的web服务器，负责事物逻辑处理，位于web服务器端，其任务是接受用户的请求，进行数据库连接</li>
<li>数据层：数据库服务器。负责数据处理逻辑，位于数据库服务器端，其任务是接受web服务器对数据库 的操纵请求，实现对数据库查询、修改、更新等功能</li>
</ul>
<p><a href="https://imgtu.com/i/OQMG6K"><img src="https://s1.ax1x.com/2022/05/07/OQMG6K.png" alt="服务器类"></a></p>
<span id="more"></span>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="Socket通信"><a href="#Socket通信" class="headerlink" title="Socket通信"></a>Socket通信</h3><p>Socket（套接字）用来描述IP地址和端口，是通信链的句柄，应用程序可以通过Socket向网络发送请求或者应答网络请求。Socket是支持TCP&#x2F;IP协议的网络通信的基本操作单元，是对网络通信过程中端点的抽象表示，包含了进行网络通信所必须的五种信息：连接所使用的协议；本地主机的IP地址；本地远程的协议端口；远程主机的IP地址；远程地址的协议端口。在基于TCP协议的Socket通信过程中，服务端首先声明一个Socket对象并指定端口号，然后调用accept方法接受客户端的数据。accept方法在没有数据进行接受时处于堵塞状态；客户端创建Socket对象，执行服务器端的IP地址和端口号，与服务端建立通信。</p>
<h3 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h3><p>不同的CPU有不同的字节序类型 这些字节序是指整数在内存中保存的顺序 这个叫做主机字节序，最常见的有两种，小端：将低序字节存储在起始地址；大端：将高序字节存储在起始地址。网络字节顺序是TCP&#x2F;IP中规定好的一种数据表示格式，它与具体的CPU类型、操作系统等无关，从而可以保证数据在不同主机之间传输时能够被正确解释。网络字节顺序采用大端方式。为了在主机字节序和网络字节序中进行转换，提供了四个转换函数：</p>
<ul>
<li>htons：把unsigned short类型从主机序转换到网络序；</li>
<li>htonl：把unsigned long类型从主机序转换到网络序；</li>
<li>ntohs：把unsigned short类型从网络序转换到主机序；</li>
<li>ntohl：把unsigned long类型从网络序转换到主机序；</li>
</ul>
<h2 id="基础API"><a href="#基础API" class="headerlink" title="基础API"></a>基础API</h2><h3 id="创建socket"><a href="#创建socket" class="headerlink" title="创建socket"></a>创建socket</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">socket</span><span class="params">(<span class="type">int</span> domain, <span class="type">int</span> type, <span class="type">int</span> protocol)</span></span>; </span><br></pre></td></tr></table></figure>
<ul>
<li>作用：建立一个协议族为domain、协议类型为type、协议编号为protocol的套接字文件描述符；</li>
<li>参数：<ul>
<li>domain：设置网络通信的域；<ul>
<li>PF_UNIX,PF_LOCAL：本地通信；</li>
<li>AF_INET,PF_INET：IPV4协议；</li>
<li>PF_INET6：IPV6协议；</li>
</ul>
</li>
<li>type：设置套接字通信的类型；<ul>
<li>SOCK_STREAM：Tcp连接，提供序列化的、可靠的、双向连接的字节流。支持带外数据传输；</li>
<li>SOCK_DGRAM：支持UDP连接（无连接状态的消息）；</li>
</ul>
</li>
<li>protocol：制定某个协议的特定类型，即type类型中的某个类型。通常某协议中只有一种特定类型，这样protocol参数仅能设置为0；但是有些协议有多种特定的类型，需要设置这个参数来选择特定的类型；</li>
</ul>
</li>
<li>返回值：调用成功返回一个标识这个套接字的文件描述符，失败的时候返回-1；</li>
</ul>
<h3 id="设置socket"><a href="#设置socket" class="headerlink" title="设置socket"></a>设置socket</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">setsockopt</span><span class="params">(<span class="type">int</span> sock, <span class="type">int</span> level, <span class="type">int</span> optname, <span class="type">const</span> <span class="type">void</span> *optval, <span class="type">socklen_t</span> optlen)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：设置与某个套接字关联的选项；</li>
<li>参数：<ul>
<li>sock：需要设置的套接字；</li>
<li>level：指定控制套接字的层次：<ul>
<li>SOL_SOCKET：通用套接字选项；</li>
<li>IPPROTO_IP：IP选项；</li>
<li>IPPROTO_TCP：TCP选项；</li>
</ul>
</li>
<li>optname：指定控制的方式：<ul>
<li>SO_LINGER：延迟关闭连接；</li>
</ul>
</li>
<li>optval：根据optname的数据类型进行转换；</li>
<li>optlen：选项的长度；</li>
</ul>
</li>
<li>返回值：成功返回0，失败返回-1；</li>
</ul>
<h3 id="绑定socket"><a href="#绑定socket" class="headerlink" title="绑定socket"></a>绑定socket</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bind</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> addrlen)</span></span>; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> </span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">short</span>            sin_family;    <span class="comment">// 2 字节 ，地址族，e.g. AF_INET, AF_INET6</span></span><br><span class="line"> <span class="type">unsigned</span> <span class="type">short</span>   sin_port;      <span class="comment">// 2 字节 ，16位TCP/UDP 端口号 e.g. htons(3490)，</span></span><br><span class="line"> <span class="keyword">struct</span> <span class="title class_">in_addr</span>   sin_addr;      <span class="comment">// 4 字节 ，32位IP地址</span></span><br><span class="line"> <span class="type">char</span>             sin_zero[<span class="number">8</span>];   <span class="comment">// 8 字节 ，不使用</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：把一个地址族中的特定地址赋给socket；</li>
<li>参数：<ul>
<li>sockfd：通过socket()函数创建的socket套接字；</li>
<li>addr：sockaddr结构体指针，指向要绑定给sockfd的协议地址；</li>
<li>addrlen：地址的长度；</li>
</ul>
</li>
<li>返回值：绑定成功返回0，失败返回-1；</li>
</ul>
<h3 id="监听socket"><a href="#监听socket" class="headerlink" title="监听socket"></a>监听socket</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">listen</span><span class="params">(<span class="type">int</span> sockfd,<span class="type">int</span> backlog)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：使用主动连接套接口变为被连接套接口，使得一个进程可以接受其它进程的请求，从而成为一个服务器进程；</li>
<li>参数：<ul>
<li>sockfd：通过socket()函数创建的socket套接字；</li>
<li>backlog：建立好连接处于ESTABLISHED状态的队列最大长度；</li>
</ul>
</li>
<li>返回值：成功返回0，失败返回-1；</li>
</ul>
<h3 id="连接socket"><a href="#连接socket" class="headerlink" title="连接socket"></a>连接socket</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> sockfd,<span class="keyword">struct</span> sockaddr* serv_addr,<span class="type">int</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：客户端调用，与服务端建立TCP连接；</li>
<li>参数：<ul>
<li>sockfd：通过socket()函数创建的socket套接字；</li>
<li>serv_addr：sockaddr结构体指针，保存了想要连接的服务端主机地址和端口号；</li>
<li>addrlen：地址的长度；</li>
</ul>
</li>
<li>返回值：成功返回0，失败返回-1；</li>
</ul>
<h3 id="接收socket"><a href="#接收socket" class="headerlink" title="接收socket"></a>接收socket</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">accept</span><span class="params">(<span class="type">int</span> socket,<span class="keyword">struct</span> sockaddr* addr,<span class="type">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：服务端监听到客户端发送过来的connect请求后，调用accept函数接收请求，这样就建立好了连接；</li>
<li>参数：<ul>
<li>socket：通过socket()函数创建的socket套接字；</li>
<li>addr：sockaddr结构体指针，保存了建立连接的客户端主机地址和端口号；</li>
<li>addrlen：地址的长度；</li>
</ul>
</li>
<li>返回值：成功返回0，失败返回-1；</li>
</ul>
<h3 id="创建管道通信"><a href="#创建管道通信" class="headerlink" title="创建管道通信"></a>创建管道通信</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">socketpair</span><span class="params">(<span class="type">int</span> domain, <span class="type">int</span> type, <span class="type">int</span> protocol, <span class="type">int</span> sv[<span class="number">2</span>])</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：创建管道进行进程间通信；</li>
<li>参数：<ul>
<li>domain：表示协议族，在Linux下只能为AF_LOCAL或者AF_UNIX；</li>
<li>type：表示协议，可以是SOCK_STREAM（TCP）或者SOCK_DGRAM（UDP）；</li>
<li>protocol：表示类型，只能为0；</li>
<li>sv[2]：管道，两端都可以读写；</li>
</ul>
</li>
<li>返回值：成功返回0，失败返回-1；</li>
</ul>
<h2 id="核心代码分析"><a href="#核心代码分析" class="headerlink" title="核心代码分析"></a>核心代码分析</h2><h3 id="类成员变量"><a href="#类成员变量" class="headerlink" title="类成员变量"></a>类成员变量</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">connection_poll* m_connpool;          <span class="comment">//数据库连接池</span></span><br><span class="line">string m_user;                        <span class="comment">//数据库信息:登录名</span></span><br><span class="line">string m_passWord;                    <span class="comment">//数据库信息:密码</span></span><br><span class="line">string m_databaseName;                <span class="comment">//数据库信息:库名</span></span><br><span class="line"><span class="type">int</span> m_sql_num;                        <span class="comment">//连接池数量</span></span><br><span class="line">threadpool&lt;http_conn&gt;* m_pool;        <span class="comment">//线程池</span></span><br><span class="line"><span class="type">int</span> m_thread_num;                     <span class="comment">//线程数量</span></span><br><span class="line">epoll_event events[MAX_EVENT_NUMBER]; <span class="comment">//epoll调用返回的事件集合</span></span><br><span class="line"><span class="type">int</span> m_epollfd;                        <span class="comment">//epoll文件描述符</span></span><br><span class="line"><span class="type">int</span> m_listenfd;                       <span class="comment">//监听文件描述符</span></span><br><span class="line"><span class="type">int</span> m_OPT_LINGER;                     <span class="comment">//优雅关闭连接</span></span><br><span class="line"><span class="type">int</span> m_LISTENTrigmode;                 <span class="comment">//listenfd触发模式</span></span><br><span class="line"><span class="type">int</span> m_CONNTrigmode;                   <span class="comment">//connfd触发模式</span></span><br><span class="line">client_data* users_timer;             <span class="comment">//定时器资源</span></span><br><span class="line">Utils utils;                          <span class="comment">//定时器对象</span></span><br><span class="line">http_conn* users;                     <span class="comment">//http解析对象</span></span><br><span class="line"><span class="type">int</span> m_port;                           <span class="comment">//端口号</span></span><br><span class="line"><span class="type">char</span>* m_root;                         <span class="comment">//root资源路径</span></span><br><span class="line"><span class="type">int</span> m_log_write;                      <span class="comment">//异步日志</span></span><br><span class="line"><span class="type">int</span> m_close_log;                      <span class="comment">//关闭日志</span></span><br><span class="line"><span class="type">int</span> m_actormodel;                     <span class="comment">//工作模式</span></span><br><span class="line"><span class="type">int</span> m_pipefd[<span class="number">2</span>];                      <span class="comment">//管道</span></span><br></pre></td></tr></table></figure>
<h3 id="类的构造函数"><a href="#类的构造函数" class="headerlink" title="类的构造函数"></a>类的构造函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">    WebServer::<span class="built_in">WebServer</span>()</span><br><span class="line">&#123;</span><br><span class="line">    users = <span class="keyword">new</span> http_conn[MAX_FD];</span><br><span class="line">    m_root=<span class="built_in">getcwd</span>(<span class="literal">nullptr</span>,<span class="number">256</span>);</span><br><span class="line">    <span class="built_in">assert</span>(m_root);</span><br><span class="line">    <span class="built_in">strncat</span>(m_root,<span class="string">&quot;/root&quot;</span>,<span class="number">6</span>);</span><br><span class="line">    users_timer = <span class="keyword">new</span> client_data[MAX_FD];</span><br><span class="line"></span><br><span class="line">    m_port = <span class="number">9006</span>;             <span class="comment">//端口号，默认9006</span></span><br><span class="line">    m_sql_num = <span class="number">8</span>;             <span class="comment">//数据库连接池数量，默认8</span></span><br><span class="line">    m_thread_num = <span class="number">8</span>;          <span class="comment">//线程池内的线程数量，默认8</span></span><br><span class="line">    m_log_write = <span class="number">0</span>;           <span class="comment">//日志模式，默认同步</span></span><br><span class="line">    m_OPT_LINGER = <span class="number">0</span>;          <span class="comment">//优雅关闭连接，默认不使用</span></span><br><span class="line">    m_LISTENTrigmode=<span class="number">0</span>;        <span class="comment">//listenfd触发模式，默认LT</span></span><br><span class="line">    m_CONNTrigmode=<span class="number">0</span>;          <span class="comment">//connfd触发模式，默认LT</span></span><br><span class="line">    m_close_log = <span class="number">0</span>;           <span class="comment">//关闭日志，默认不关闭</span></span><br><span class="line">    m_actormodel = <span class="number">0</span>;          <span class="comment">//并发模型，默认是proactor</span></span><br><span class="line">    m_user = <span class="string">&quot;root&quot;</span>;           <span class="comment">//数据库信息:登录名</span></span><br><span class="line">    m_passWord = <span class="string">&quot;1&quot;</span>;          <span class="comment">//数据库信息:密码</span></span><br><span class="line">    m_databaseName = <span class="string">&quot;yourdb&quot;</span>; <span class="comment">//数据库信息:库名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过类的构造函数初始化相关变量，生成默认最大事件数的http类对象和定时器。</p>
<h3 id="类的析构函数"><a href="#类的析构函数" class="headerlink" title="类的析构函数"></a>类的析构函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">    WebServer::~<span class="built_in">WebServer</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">close</span>(m_epollfd);   <span class="comment">//关闭epoll文件描述符</span></span><br><span class="line">    <span class="built_in">close</span>(m_listenfd);  <span class="comment">//关闭监听文件描述符</span></span><br><span class="line">    <span class="built_in">close</span>(m_pipefd[<span class="number">1</span>]); <span class="comment">//关闭管道</span></span><br><span class="line">    <span class="built_in">close</span>(m_pipefd[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">delete</span>[] users;      <span class="comment">//释放http解析资源</span></span><br><span class="line">    <span class="keyword">delete</span>[] users_timer;<span class="comment">//释放定时器资源</span></span><br><span class="line">    <span class="keyword">delete</span> m_pool;       <span class="comment">//释放线程池资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当类对象离开作用域时，调用析构函数自动释放资源：关闭epoll文件描述符、监听文件描述符，关闭管道，释放http解析资源、定时器资源和线程池资源。</p>
<h3 id="开启日志"><a href="#开启日志" class="headerlink" title="开启日志"></a>开启日志</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="type">void</span> <span class="title">WebServer::log_write</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == m_close_log)  <span class="comment">//日志未关闭</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == m_log_write)</span><br><span class="line">            Log::<span class="built_in">get_instance</span>()-&gt;<span class="built_in">init</span>(<span class="string">&quot;./ServerLog&quot;</span>, m_close_log, <span class="number">2000</span>, <span class="number">800000</span>, <span class="number">800</span>); <span class="comment">//异步</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Log::<span class="built_in">get_instance</span>()-&gt;<span class="built_in">init</span>(<span class="string">&quot;./ServerLog&quot;</span>, m_close_log, <span class="number">2000</span>, <span class="number">800000</span>, <span class="number">0</span>);   <span class="comment">//同步</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用日志类的get_instance函数，通过单例模式返回一个静态类对象，之后调用init函数开启日志，通过参数max_queue_size判断异步&#x2F;同步模式。当其大于0时，说明是异步日志模式，此时创建指定大小的阻塞队列，同时创建新线程，用于从阻塞队列中取出写日志任务。当其不大于0时，不做额外操作。</p>
<h3 id="建立数据库连接池"><a href="#建立数据库连接池" class="headerlink" title="建立数据库连接池"></a>建立数据库连接池</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">WebServer::sql_pool</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_connpool = connection_poll::<span class="built_in">GetInstance</span>();</span><br><span class="line">    m_connpool-&gt;<span class="built_in">init</span>(<span class="string">&quot;localhost&quot;</span>, m_user, m_passWord, m_databaseName, <span class="number">3306</span>, m_sql_num, m_close_log);</span><br><span class="line"></span><br><span class="line">    users-&gt;<span class="built_in">initmysql_result</span>(m_connpool);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用GetInstance函数，通过单例模式返回一个静态类对象，之后调用init函数，登录数据库用户名密码，建立指定大小的数据库连接池，最后调用initmysql_result函数，取出数据库内存储的浏览器端的用户名和密码，供后续注册、登录验证。</p>
<h3 id="建立线程池"><a href="#建立线程池" class="headerlink" title="建立线程池"></a>建立线程池</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">WebServer::thread_pool</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_pool = <span class="keyword">new</span> <span class="built_in">threadpool</span>&lt;http_conn&gt;(m_actormodel, m_connpool, m_thread_num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在线程池中创建指定数量的线程，线程执行worker函数，其调用私有工作run函数，run函数从工作队列中取出任务执行，如果队列为空则堵塞等待。</p>
<h3 id="建立epoll监听"><a href="#建立epoll监听" class="headerlink" title="建立epoll监听"></a>建立epoll监听</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">WebServer::eventListen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_listenfd = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">assert</span>(m_listenfd &gt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == m_OPT_LINGER)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">linger</span> tmp = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="built_in">setsockopt</span>(m_listenfd, SOL_SOCKET, SO_LINGER, &amp;tmp, <span class="built_in">sizeof</span>(tmp));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == m_OPT_LINGER)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> linger tmp = &#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="built_in">setsockopt</span>(m_listenfd, SOL_SOCKET, SO_LINGER, &amp;tmp, <span class="built_in">sizeof</span>(tmp));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> address;</span><br><span class="line">    <span class="built_in">bzero</span>(&amp;address, <span class="built_in">sizeof</span>(address));</span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    address.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line">    address.sin_port = <span class="built_in">htons</span>(m_port);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">setsockopt</span>(m_listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;flag, <span class="built_in">sizeof</span>(flag));</span><br><span class="line">    ret = <span class="built_in">bind</span>(m_listenfd, (<span class="keyword">struct</span> sockaddr *)&amp;address, <span class="built_in">sizeof</span>(address));</span><br><span class="line">    <span class="built_in">assert</span>(ret &gt;= <span class="number">0</span>);</span><br><span class="line">    ret = <span class="built_in">listen</span>(m_listenfd, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">assert</span>(ret &gt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    utils.<span class="built_in">init</span>(TIMESLOT);</span><br><span class="line"></span><br><span class="line">    epoll_event events[MAX_EVENT_NUMBER];</span><br><span class="line">    m_epollfd = <span class="built_in">epoll_create</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">assert</span>(m_epollfd != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    utils.<span class="built_in">addfd</span>(m_epollfd, m_listenfd, <span class="literal">false</span>, m_LISTENTrigmode);</span><br><span class="line">    http_conn::m_epollfd = m_epollfd;</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">socketpair</span>(PF_UNIX, SOCK_STREAM, <span class="number">0</span>, m_pipefd);</span><br><span class="line">    <span class="built_in">assert</span>(ret != <span class="number">-1</span>);</span><br><span class="line">    utils.<span class="built_in">setnonblocking</span>(m_pipefd[<span class="number">1</span>]);</span><br><span class="line">    utils.<span class="built_in">addfd</span>(m_epollfd, m_pipefd[<span class="number">0</span>], <span class="literal">false</span>, <span class="number">0</span>);</span><br><span class="line">    utils.<span class="built_in">addsig</span>(SIGPIPE, SIG_IGN);</span><br><span class="line">    utils.<span class="built_in">addsig</span>(SIGALRM, utils.sig_handler, <span class="literal">false</span>);</span><br><span class="line">    utils.<span class="built_in">addsig</span>(SIGTERM, utils.sig_handler, <span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">alarm</span>(TIMESLOT);</span><br><span class="line">    Utils::u_pipefd = m_pipefd;</span><br><span class="line">    Utils::u_epollfd = m_epollfd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在服务端中，socket通信从创建socket套接字开始，之后调用bind函数绑定本地的IP地址和端口号，再调用listen函数监听客户端发来的连接。其中可以根据m_OPT_LINGER标志判断是否开始优雅关闭连接，默认当调用close函数时会立即返回，这样可能会有未发送的数据。当标志置1时，则调用setsockopt函数设置延迟关闭，即当文件描述符关闭时内核将拖延一段时间，如果缓冲区扔残留数据，进程将处于睡眠状态，直到（a）所有数据发送完且被对方确认，之后进行正常的终止序列（描述字访问计数为0）或（b）延迟时间到。此种情况下，应用程序检查close的返回值是非常重要的，如果在数据发送完并被确认前时间到，close将返回EWOULDBLOCK错误且套接口发送缓冲区中的任何数据都丢失。close的成功返回仅告诉我们发送的数据（和FIN）已由对方TCP确认，它并不能告诉我们对方应用进程是否已读了数据。如果套接口设为非阻塞的，它将不等待close完成。</p>
<h3 id="处理epoll监听事件队列"><a href="#处理epoll监听事件队列" class="headerlink" title="处理epoll监听事件队列"></a>处理epoll监听事件队列</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">WebServer::eventLoop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">bool</span> timeout = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> stop_server = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (!stop_server)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> number = <span class="built_in">epoll_wait</span>(m_epollfd, events, MAX_EVENT_NUMBER, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (number &lt; <span class="number">0</span> &amp;&amp; errno != EINTR)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">LOG_ERROR</span>(<span class="string">&quot;%s&quot;</span>, <span class="string">&quot;epoll failure&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; number; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> sockfd = events[i].data.fd;</span><br><span class="line">            <span class="keyword">if</span> (sockfd == m_listenfd)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">bool</span> flag = <span class="built_in">dealclinetdata</span>();</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">false</span> == flag)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (events[i].events &amp; (EPOLLRDHUP | EPOLLHUP | EPOLLERR))</span><br><span class="line">            &#123;</span><br><span class="line">                util_timer *timer = users_timer[sockfd].timer;</span><br><span class="line">                <span class="built_in">deal_timer</span>(timer, sockfd);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((sockfd == m_pipefd[<span class="number">0</span>]) &amp;&amp; (events[i].events &amp; EPOLLIN))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">bool</span> flag = <span class="built_in">dealwithsignal</span>(timeout, stop_server);</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">false</span> == flag)</span><br><span class="line">                    <span class="built_in">LOG_ERROR</span>(<span class="string">&quot;%s&quot;</span>, <span class="string">&quot;dealclientdata failure&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (events[i].events &amp; EPOLLIN)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">dealwithread</span>(sockfd);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (events[i].events &amp; EPOLLOUT)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">dealwithwrite</span>(sockfd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (timeout)</span><br><span class="line">        &#123;</span><br><span class="line">            utils.<span class="built_in">timer_handler</span>();</span><br><span class="line">            <span class="built_in">LOG_INFO</span>(<span class="string">&quot;%s&quot;</span>, <span class="string">&quot;timer tick&quot;</span>);</span><br><span class="line">            timeout = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在eventLoop函数中，服务器主线程调用epoll_wait函数监听是否有事件响应，返回值number为准备就绪事件的数量，当number大于0时，遍历events集合，其内部存放准备就绪的事件。如果是m_listenfd，说明有新的客户连接产生，此时调用dealclientdata函数接收并处理请求；如果与指定信号相与为真，说明是服务器端关闭连接，此时需要移除对应的定时器；如果为m_pipefd[0]，说明有信号产生，此时调用dealwithsignal函数处理信号；如果与EPOLLIN相与为真，说明是客户端发送数据，此时调用dealwithread函数处理http请求数据；如果与EPOLLOUT相与为真，说明需要向客户端发送数据，此时调用dealwithwrite函数处理http响应数据。</p>
<h3 id="处理新的客户端连接"><a href="#处理新的客户端连接" class="headerlink" title="处理新的客户端连接"></a>处理新的客户端连接</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">WebServer::dealclinetdata</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> client_address;</span><br><span class="line">    <span class="type">socklen_t</span> client_addrlength = <span class="built_in">sizeof</span>(client_address);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == m_LISTENTrigmode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> connfd = <span class="built_in">accept</span>(m_listenfd, (<span class="keyword">struct</span> sockaddr *)&amp;client_address, &amp;client_addrlength);</span><br><span class="line">        <span class="keyword">if</span> (connfd &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">LOG_ERROR</span>(<span class="string">&quot;%s:errno is:%d&quot;</span>, <span class="string">&quot;accept error&quot;</span>, errno);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (http_conn::m_user_count &gt;= MAX_FD)</span><br><span class="line">        &#123;</span><br><span class="line">            utils.<span class="built_in">show_error</span>(connfd, <span class="string">&quot;Internal server busy&quot;</span>);</span><br><span class="line">            <span class="built_in">LOG_ERROR</span>(<span class="string">&quot;%s&quot;</span>, <span class="string">&quot;Internal server busy&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">timer</span>(connfd, client_address);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> connfd = <span class="built_in">accept</span>(m_listenfd, (<span class="keyword">struct</span> sockaddr *)&amp;client_address, &amp;client_addrlength);</span><br><span class="line">            <span class="keyword">if</span> (connfd &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">LOG_ERROR</span>(<span class="string">&quot;%s:errno is:%d&quot;</span>, <span class="string">&quot;accept error&quot;</span>, errno);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (http_conn::m_user_count &gt;= MAX_FD)</span><br><span class="line">            &#123;</span><br><span class="line">                utils.<span class="built_in">show_error</span>(connfd, <span class="string">&quot;Internal server busy&quot;</span>);</span><br><span class="line">                <span class="built_in">LOG_ERROR</span>(<span class="string">&quot;%s&quot;</span>, <span class="string">&quot;Internal server busy&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">timer</span>(connfd, client_address);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>dealclientdata函数用于处理新的客户端连接请求，通过m_LISTENTrigmode标志判断LT&#x2F;ET模式，默认为LT模式，此时无需一次性读完，当标志为1时，表示为ET模式，此时需要一次性读完，所以需要通过while循环调用accept函数接收客户端请求数据，当没有数据可读时结束循环。</p>
<h3 id="处理信号函数"><a href="#处理信号函数" class="headerlink" title="处理信号函数"></a>处理信号函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">WebServer::dealwithsignal</span><span class="params">(<span class="type">bool</span> &amp;timeout, <span class="type">bool</span> &amp;stop_server)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sig;</span><br><span class="line">    <span class="type">char</span> signals[<span class="number">1024</span>];</span><br><span class="line">    ret = <span class="built_in">recv</span>(m_pipefd[<span class="number">0</span>], signals, <span class="built_in">sizeof</span>(signals), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ret; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (signals[i])</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> SIGALRM:</span><br><span class="line">            &#123;</span><br><span class="line">                timeout = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> SIGTERM:</span><br><span class="line">            &#123;</span><br><span class="line">                stop_server = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>dealwithsignal函数用于处理通过管道发送的信号，主要有SIGALRM和SIGTERM信号。</p>
<h3 id="处理http请求数据"><a href="#处理http请求数据" class="headerlink" title="处理http请求数据"></a>处理http请求数据</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">WebServer::dealwithread</span><span class="params">(<span class="type">int</span> sockfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    util_timer *timer = users_timer[sockfd].timer;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == m_actormodel)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (timer)</span><br><span class="line">            <span class="built_in">adjust_timer</span>(timer);</span><br><span class="line">        m_pool-&gt;<span class="built_in">append</span>(users + sockfd, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> == users[sockfd].improv)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">1</span> == users[sockfd].timer_flag)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">deal_timer</span>(timer, sockfd);</span><br><span class="line">                    users[sockfd].timer_flag = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                users[sockfd].improv = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (users[sockfd].<span class="built_in">read_once</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">LOG_INFO</span>(<span class="string">&quot;deal with the client(%s)&quot;</span>, <span class="built_in">inet_ntoa</span>(users[sockfd].<span class="built_in">get_address</span>()-&gt;sin_addr));</span><br><span class="line">            m_pool-&gt;<span class="built_in">append_p</span>(users + sockfd);</span><br><span class="line">            <span class="keyword">if</span> (timer)</span><br><span class="line">                <span class="built_in">adjust_timer</span>(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">deal_timer</span>(timer, sockfd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>dealwithread函数用于处理http请求数据，m_actormodel标志用于判断工作模式，默认为reactor模型，此时调用append函数将事件放入请求队列中，此时需要传入参数0，将m_state标志置0，表示为读事件；当m_actormodel标志为1时，表示是proactor模型，同样调用append_p函数将事件放入请求队列中。</p>
<h3 id="处理http响应数据"><a href="#处理http响应数据" class="headerlink" title="处理http响应数据"></a>处理http响应数据</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">WebServer::dealwithwrite</span><span class="params">(<span class="type">int</span> sockfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    util_timer *timer = users_timer[sockfd].timer;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == m_actormodel)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (timer)</span><br><span class="line">            <span class="built_in">adjust_timer</span>(timer);</span><br><span class="line">        m_pool-&gt;<span class="built_in">append</span>(users + sockfd, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> == users[sockfd].improv)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">1</span> == users[sockfd].timer_flag)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">deal_timer</span>(timer, sockfd);</span><br><span class="line">                    users[sockfd].timer_flag = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                users[sockfd].improv = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (users[sockfd].<span class="built_in">write</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">LOG_INFO</span>(<span class="string">&quot;send data to the client(%s)&quot;</span>, <span class="built_in">inet_ntoa</span>(users[sockfd].<span class="built_in">get_address</span>()-&gt;sin_addr));</span><br><span class="line">            <span class="keyword">if</span> (timer)</span><br><span class="line">                <span class="built_in">adjust_timer</span>(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">deal_timer</span>(timer, sockfd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>dealwithwrite函数用于处理http响应数据，m_actormodel标志用于判断工作模式，默认为reactor模型，此时调用append函数将事件放入请求队列中，此时需要传入参数1，将m_state标志置1，表示为写事件；当m_actormodel标志为1时，表示是proactor模型，此时直接调用write函数。</p>
]]></content>
      <categories>
        <category>webserver</category>
      </categories>
      <tags>
        <tag>学习日志</tag>
        <tag>WebServer类</tag>
      </tags>
  </entry>
  <entry>
    <title>cache模块——心跳包</title>
    <url>/2022/05/12/cache%E6%A8%A1%E5%9D%97%E2%80%94%E5%BF%83%E8%B7%B3%E5%8C%85/</url>
    <content><![CDATA[<h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><p>cache server在运行时，新建一个线程定时向master发送心跳包，以确保master能确定自己的存活状态，同时接收master发送的指令，根据指令不同进行对应的操作。<br><a href="https://imgtu.com/i/Xn2JQH"><img src="https://s1.ax1x.com/2022/05/28/Xn2JQH.png" alt="cache-心跳包"></a></p>
<span id="more"></span>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="缓存扩缩容"><a href="#缓存扩缩容" class="headerlink" title="缓存扩缩容"></a>缓存扩缩容</h3><p>分布式缓存中存在多个cache server节点，当节点增加或者减少时，数据对应的存储节点也需要发送变化。master监控着所有cache server节点发送来的心跳包，因此可以检测到节点变化，此时向其它节点发送指令，进行对应的操作。</p>
<ul>
<li>ADD_CACHE_SERVER：扩容命令，说明有新的cache server节点加入，此时将json数据包中的IP列表读出，新建一个线程，通过一致性哈希算法将LRU对象中的所有数据与其对应的缓存节点对应起来，并新建线程向cache server服务器发送对应的所有数据。</li>
<li>SHUTDOWN_CACHE_SERVER：缩容命令，也就是本cache server服务器需要主动关闭，此时同样将json数据包中的IP列表读出，新建一个线程，通过一致性哈希算法将LRU对象中的所有数据与其对应的缓存节点对应起来，并新建线程向cache server服务器发送对应的所有数据，发送完毕后退出整个程序。</li>
<li>REFLESH_IP：备份命令，说明此时有其它cache server服务器关闭了，将备份LRU对象中的数据读出，并通过一致性哈希算法与服务器对应起来，如果该数据属于本服务器，则从备份LRU对象中写到LRU对象中，最后分别建立线程向其它cache server服务器发送其对应的所有数据。</li>
</ul>
<h2 id="核心代码分析"><a href="#核心代码分析" class="headerlink" title="核心代码分析"></a>核心代码分析</h2><h3 id="cache发送数据"><a href="#cache发送数据" class="headerlink" title="cache发送数据"></a>cache发送数据</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *<span class="title">task_connectoth</span><span class="params">(<span class="type">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;transfertooth);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">task_connect_oth</span>* <span class="built_in">taskconnect</span>((<span class="keyword">struct</span> task_connect_oth*) arg);</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;transfertooth);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> ipport_s = <span class="built_in">get_ipport</span>(taskconnect-&gt;addr);</span><br><span class="line">    string&amp; ip_oth = ipport_s.ip;</span><br><span class="line">    <span class="type">int</span>&amp; port_oth = ipport_s.port;</span><br><span class="line">    <span class="type">int</span> cachfd = <span class="built_in">Socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> cache_oth_addr;</span><br><span class="line">    <span class="built_in">bzero</span>(&amp;cache_oth_addr,<span class="built_in">sizeof</span>(cache_oth_addr));</span><br><span class="line">    cache_oth_addr.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">inet_pton</span>(AF_INET, (<span class="type">const</span> <span class="type">char</span>*)ip_oth.<span class="built_in">data</span>(), &amp;cache_oth_addr.sin_addr.s_addr);</span><br><span class="line">    cache_oth_addr.sin_port = <span class="built_in">htons</span>(port_oth);</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">connect</span>(cachfd, (<span class="keyword">struct</span> sockaddr *)&amp;cache_oth_addr, <span class="built_in">sizeof</span>(cache_oth_addr));</span><br><span class="line">    <span class="keyword">auto</span> flags = <span class="built_in">fcntl</span>(cachfd,F_GETFL,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">fcntl</span>(cachfd, F_SETFL, flags &amp; O_NONBLOCK);</span><br><span class="line">    <span class="keyword">if</span>(ret&lt;<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;(*taskconnect-&gt;ipport_and_key)[taskconnect-&gt;addr].<span class="built_in">size</span>(); j++)</span><br><span class="line">    &#123;</span><br><span class="line">        string key = (*taskconnect-&gt;ipport_and_key)[taskconnect-&gt;addr][j];</span><br><span class="line">        string value = (*taskconnect-&gt;LC).<span class="built_in">get</span>(key, <span class="literal">false</span>);</span><br><span class="line">        json write_j = <span class="built_in">Write_oth_ClientCache</span>(key, value);</span><br><span class="line">        string buf = write_j.<span class="built_in">dump</span>()+<span class="string">&quot;\0&quot;</span>;</span><br><span class="line">        <span class="type">int</span> n=<span class="built_in">Write</span>(cachfd, (<span class="type">const</span> <span class="type">char</span> *)buf.<span class="built_in">data</span>(), buf.<span class="built_in">length</span>()+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Close</span>(cachfd);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Sleep_ms</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Close</span>(cachfd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>task_connectoth函数用于cache server与其它cache server建立连接，发送数据。</p>
<h3 id="cache节点变化"><a href="#cache节点变化" class="headerlink" title="cache节点变化"></a>cache节点变化</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="title">doit_iplistchange</span><span class="params">(<span class="type">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pthread_rwlock_wrlock</span>(&amp;shutdown_lock);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">iplistchange_struct</span>* ipchange=(<span class="keyword">struct</span> iplistchange_struct *)arg;</span><br><span class="line">    shared_ptr&lt;unordered_map&lt;string,vector&lt;string&gt;&gt;&gt; ipport_and_key=make_shared&lt;unordered_map&lt;string,vector&lt;string&gt;&gt;&gt;();</span><br><span class="line">    (*ipchange-&gt;key_addr).<span class="built_in">RefreshIPList</span>(*ipchange-&gt;ipport_list);</span><br><span class="line">    <span class="keyword">if</span>(ipchange-&gt;exit_flag)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;prepare to close...&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i = (*ipchange-&gt;LC).cache.<span class="built_in">begin</span>(); i!=(*ipchange-&gt;LC).cache.<span class="built_in">end</span>();i++)&#123;</span><br><span class="line">        string key = i-&gt;first;</span><br><span class="line">        string addr = (*ipchange-&gt;key_addr).<span class="built_in">GetServerIndex</span>(key);</span><br><span class="line">        (*ipport_and_key)[addr].<span class="built_in">push_back</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">signal</span>(SIGPIPE, SIG_IGN);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">task_connect_oth</span> task_arg;</span><br><span class="line">    task_arg.ipport_and_key = ipport_and_key;</span><br><span class="line">    task_arg.LC = ipchange-&gt;LC;</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> takeout_allval[ipport_and_key-&gt;<span class="built_in">size</span>()];</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i = ipport_and_key-&gt;<span class="built_in">begin</span>(); i!=ipport_and_key-&gt;<span class="built_in">end</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Sleep_ms</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">if</span>(curen_addr==i-&gt;first)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = count++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;transfertooth);</span><br><span class="line">        task_arg.addr = i-&gt;first;</span><br><span class="line">        <span class="built_in">Pthread_create</span>(&amp;takeout_allval[count++], <span class="literal">nullptr</span>, &amp;task_connectoth, &amp;task_arg);</span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;transfertooth);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Sleep_ms</span>(<span class="number">200</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;ipport_and_key-&gt;<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag==i)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">pthread_join</span>(takeout_allval[i], <span class="literal">nullptr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ipchange-&gt;exit_flag)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;close done&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_rwlock_unlock</span>(&amp;shutdown_lock);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>doit_iplistchange函数内部根据一致性哈希算法对新的IP列表建立哈希环，然后将LRU中的数据与服务器对应起来，之后遍历所有数据，如果与本服务器对应则不做操作，如果对应于其它服务器，则调用task_connectoth函数发送数据，最后根据exit_flag标志，如果为真则直接退出程序，关闭服务器。</p>
<h3 id="cache容灾"><a href="#cache容灾" class="headerlink" title="cache容灾"></a>cache容灾</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Heartbeat::reflesh_handler</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;ipchange_lock);</span><br><span class="line">    (*ipport_list).<span class="built_in">clear</span>();</span><br><span class="line">    unordered_set&lt;string&gt; ipnew;</span><br><span class="line">    vector&lt;string&gt; key_send;</span><br><span class="line">    sendout_bk-&gt;<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;iplist_json[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;iplist&quot;</span>].<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        (*ipport_list).<span class="built_in">push_back</span>(iplist_json[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;iplist&quot;</span>][i]);</span><br><span class="line">        ipnew.<span class="built_in">insert</span>((string)iplist_json[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;iplist&quot;</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i = (*LC_BK).cache.<span class="built_in">begin</span>(); i!=(*LC_BK).cache.<span class="built_in">end</span>();i++)&#123;</span><br><span class="line">        string key = i-&gt;first;</span><br><span class="line">        string addr = (*key_addr).<span class="built_in">GetServerIndex</span>(key);</span><br><span class="line">        <span class="keyword">if</span>(ipnew.<span class="built_in">find</span>(addr)==ipnew.<span class="built_in">end</span>())&#123;</span><br><span class="line">            key_send.<span class="built_in">push_back</span>(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    (*key_addr).<span class="built_in">RefreshIPList</span>(*ipport_list);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;key_send.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        (*sendout_bk)[(*key_addr).<span class="built_in">GetServerIndex</span>(key_send[i])].<span class="built_in">push_back</span>(key_send[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!(sendout_bk-&gt;<span class="built_in">empty</span>()))&#123;</span><br><span class="line">        <span class="built_in">signal</span>(SIGPIPE, SIG_IGN);</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;        </span><br><span class="line">        task_arg.LC = LC_BK;</span><br><span class="line">        task_arg.ipport_and_key = sendout_bk;</span><br><span class="line">        <span class="type">int</span> flag=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i = sendout_bk-&gt;<span class="built_in">begin</span>(); i!=sendout_bk-&gt;<span class="built_in">end</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(curen_addr==i-&gt;first)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;(*sendout_bk)[curen_addr].<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                    string temp_key = (*sendout_bk)[curen_addr][j];</span><br><span class="line">                    string temp_val = LC_BK-&gt;<span class="built_in">get</span>(temp_key, <span class="literal">false</span>);</span><br><span class="line">                    LC-&gt;<span class="built_in">put</span>(temp_key, temp_val);</span><br><span class="line">                &#125;</span><br><span class="line">                flag = count++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Sleep_ms</span>(<span class="number">100</span>);</span><br><span class="line">            <span class="built_in">pthread_mutex_lock</span>(&amp;transfertooth);</span><br><span class="line">            task_arg.addr = i-&gt;first;</span><br><span class="line">            <span class="built_in">Pthread_create</span>(&amp;takeout_allval[count++], <span class="literal">nullptr</span>, &amp;task_connectoth, &amp;task_arg);</span><br><span class="line">            <span class="built_in">pthread_mutex_unlock</span>(&amp;transfertooth);        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;ipchange_lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当系统中有一个cache server服务器关闭时，其它cache server便调用此函数，首先对比json数据包和自身的IP列表，判断在备份LRU中有哪些key需要转移节点，然后判断需要转移的key对应的服务器是否是自身，如果是则从备份LRU中移动到LRU，如果不是则调用task_connectoth函数发送至目标服务器。</p>
<h3 id="cache发送心跳包"><a href="#cache发送心跳包" class="headerlink" title="cache发送心跳包"></a>cache发送心跳包</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *<span class="title">heart_beat</span><span class="params">(<span class="type">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Heartbeat <span class="title">heartbeat_hd</span><span class="params">((<span class="keyword">struct</span> heartbeat_struct *)arg)</span></span>;</span><br><span class="line">    heartbeat_hd.<span class="built_in">heartbeat_connect</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        heartbeat_hd.<span class="built_in">heartbeat_send</span>();</span><br><span class="line">        <span class="built_in">Sleep_ms</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="type">int</span> commond = heartbeat_hd.<span class="built_in">is_anycommond</span>();</span><br><span class="line">        <span class="keyword">if</span>(SHUTDOWN_CACHE==commond)&#123;</span><br><span class="line">            heartbeat_hd.<span class="built_in">shutdown_handler</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ADD_CACHE==commond)&#123;</span><br><span class="line">            heartbeat_hd.<span class="built_in">add_handler</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(REFLESH_IP==commond)&#123;</span><br><span class="line">            heartbeat_hd.<span class="built_in">reflesh_handler</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>cache server服务器在main主函数中创建一个新线程运行heart_beat函数，内部首先调用heartbeat_connect函数与master建立连接，然后定时循环调用heartbeat_send函数向master发送心跳包，使用is_anycommond函数接收master指令，如果json数据包指令为SHUTDOWN_CACHE，说明需要关闭本cache server，此时调用shutdown_handler函数，其内部调用doit_iplistchange函数转移数据；如果指令为ADD_CACHE，说明有新的cache server加入，此时调用add_handler函数，其内部调用doit_iplistchange函数转移数据；如果指令为REFLESH_IP，说明有其它cache server关闭，此时调用reflesh_handle函数，转移备份LRU中属于被关闭cache server的数据。</p>
]]></content>
      <categories>
        <category>分布式缓存</category>
      </categories>
      <tags>
        <tag>学习日志</tag>
        <tag>cache</tag>
        <tag>心跳包</tag>
      </tags>
  </entry>
  <entry>
    <title>cache模块——数据读写</title>
    <url>/2022/05/10/cache%E6%A8%A1%E5%9D%97%E2%80%94%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99/</url>
    <content><![CDATA[<h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><p>cache server是一个可以同时向多个client提供服务的服务器，其并发能力至关重要，所以采用epoll和线程池架构来提高cache server服务器的并发处理能力，即通过epoll函数监听多个事件，并让对应的处理函数交于线程池中的工作线程处理。同时还需要处理master容灾时备份master发送过来的IP和端口号信息。<br><a href="https://imgtu.com/i/XnXmCQ"><img src="https://s1.ax1x.com/2022/05/28/XnXmCQ.png" alt="cache-数据读写"></a></p>
<span id="more"></span>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="epoll函数"><a href="#epoll函数" class="headerlink" title="epoll函数"></a>epoll函数</h3><p>epoll是Linux内核为处理大批量文件描述符而作了改进的poll，是Linux下多路复用IO接口select&#x2F;poll的增强版本，在获取事件的时候，它无须遍历整个被侦听的描述符集，只要遍历那些被内核IO事件异步唤醒而加入Ready队列的描述符集合就行了。</p>
<h3 id="客户端请求"><a href="#客户端请求" class="headerlink" title="客户端请求"></a>客户端请求</h3><p>cache接收到的请求可能是client的，也可能是其它cache server的，还可能是master的，根据json数据包的type可以判断并且做出相应逻辑处理。</p>
<ul>
<li>KEY_VALUE_REQUEST：client发起的读数据请求，从LRU中读取出key对应的value，再发送给client。</li>
<li>KEY_VALUE_RESPOND：client发起的写数据请求，则将数据写入到LRU中。同时通过一致性哈希算法找到该数据对应的备份cache服务器，将该数据的type改成KEY_VALUE_REPONDBK，然后将其发送到该备份服务器。</li>
<li>KEY_VALUE_RESPONDBK：其它cache server服务器发送的写数据请求，则将数据写入到备份LRU中。</li>
<li>REFLESH_MASTER：备份master发起的命令，更改master的IP地址和端口号。</li>
</ul>
<h2 id="核心代码分析"><a href="#核心代码分析" class="headerlink" title="核心代码分析"></a>核心代码分析</h2><h3 id="建立master连接"><a href="#建立master连接" class="headerlink" title="建立master连接"></a>建立master连接</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">WriteRead::WR_listen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    listenfd = <span class="built_in">Socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">setsockopt</span>(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="built_in">sizeof</span>(opt));</span><br><span class="line">    <span class="built_in">bzero</span>(&amp;servaddr, <span class="built_in">sizeof</span>(servaddr));</span><br><span class="line">    servaddr.sin_family = AF_INET;</span><br><span class="line">    servaddr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(CACHESERV_IP);</span><br><span class="line">    servaddr.sin_port = <span class="built_in">htons</span>(CACHESERV_PORT);<span class="comment">//test!!!!!!!!!!!!!</span></span><br><span class="line">    <span class="built_in">Bind</span>(listenfd, (<span class="keyword">struct</span> sockaddr *)&amp;servaddr, <span class="built_in">sizeof</span>(servaddr));</span><br><span class="line">    <span class="built_in">Listen</span>(listenfd, listen_num);</span><br><span class="line">    efd = <span class="built_in">Epoll_create</span>(openmax);</span><br><span class="line">    task_arg_listen.efd = efd;</span><br><span class="line">    task_arg.efd = efd;</span><br><span class="line">    tep.events = EPOLLIN | EPOLLET;</span><br><span class="line">    tep.data.fd = listenfd;</span><br><span class="line">    <span class="built_in">Epoll_ctl</span>(efd, EPOLL_CTL_ADD, listenfd, &amp;tep);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过socket、bind、listen建立socket连接，之后将套接字添加进epoll函数中监听。</p>
<h3 id="处理新连接请求"><a href="#处理新连接请求" class="headerlink" title="处理新连接请求"></a>处理新连接请求</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">WriteRead::WR_listenHandler</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;tasklisten_lock);</span><br><span class="line">    task_arg_listen.cliaddr = &amp;cliaddr;</span><br><span class="line">    task_arg_listen.listenfd = listenfd;</span><br><span class="line">    task_arg_listen.num = ++num;</span><br><span class="line">    <span class="function">Task <span class="title">TT</span><span class="params">(task_listen, &amp;task_arg_listen)</span></span>;</span><br><span class="line">    (*ThrPl).<span class="built_in">addTask</span>(TT);            </span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;tasklisten_lock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">task_listen</span><span class="params">(<span class="type">void</span> *task_arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">pthread_rwlock_rdlock</span>(&amp;shutdown_lock);</span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;tasklisten_lock);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">pack_tasklisten</span>* <span class="built_in">task_lst</span>((<span class="keyword">struct</span> pack_tasklisten *)task_arg);</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;tasklisten_lock);</span><br><span class="line">        </span><br><span class="line">    <span class="type">socklen_t</span> clilen = <span class="built_in">sizeof</span>(task_lst-&gt;cliaddr);</span><br><span class="line">    <span class="type">int</span> connfd = <span class="built_in">Accept</span>(task_lst-&gt;listenfd, (<span class="keyword">struct</span> sockaddr *)&amp;task_lst-&gt;cliaddr, &amp;clilen);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> cliaddr;</span><br><span class="line">    <span class="type">char</span> str[INET_ADDRSTRLEN];</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;received from &quot;</span>&lt;&lt;<span class="built_in">inet_ntop</span>(AF_INET, &amp;cliaddr.sin_addr, str, <span class="built_in">sizeof</span>(str))&lt;&lt;<span class="string">&quot; at PORT &quot;</span>&lt;&lt;<span class="built_in">ntohs</span>(cliaddr.sin_port)&lt;&lt;endl; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> flag = <span class="built_in">fcntl</span>(connfd, F_GETFL);</span><br><span class="line">    <span class="built_in">fcntl</span>(connfd, F_SETFL, flag | O_NONBLOCK);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">epoll_event</span> tep;</span><br><span class="line">    tep.events = EPOLLIN | EPOLLOUT | EPOLLET;</span><br><span class="line">    tep.data.fd = connfd;</span><br><span class="line">    <span class="built_in">Epoll_ctl</span>(task_lst-&gt;efd, EPOLL_CTL_ADD, connfd, &amp;tep);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_rwlock_unlock</span>(&amp;shutdown_lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当epoll函数返回的事件是监听套接字时，代表此时有新连接接入，此时调用WR_listenHandler函数处理新连接，其内部将task_listen函数添加进工作队列，使用线程池中的工作线程处理。task_listen函数接收新连接，并将其添加进epoll函数监听。</p>
<h3 id="处理已连接事件IO"><a href="#处理已连接事件IO" class="headerlink" title="处理已连接事件IO"></a>处理已连接事件IO</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">WriteRead::WR_cfdHandler</span><span class="params">(<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;task_lock);</span><br><span class="line">    task_arg.buf = buf;</span><br><span class="line">    task_arg.sockfd = ep[index].data.fd;</span><br><span class="line">    <span class="function">Task <span class="title">TT</span><span class="params">(task_cfd, &amp;task_arg)</span></span>;</span><br><span class="line">    (*ThrPl).<span class="built_in">addTask</span>(TT);</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;task_lock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">task_cfd</span><span class="params">(<span class="type">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pthread_rwlock_rdlock</span>(&amp;shutdown_lock);</span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;task_lock);</span><br><span class="line">    <span class="function">Task_putget <span class="title">task_pg</span><span class="params">((<span class="keyword">struct</span> pack_taskconnect *)arg)</span></span>;</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;task_lock);</span><br><span class="line">    <span class="type">ssize_t</span> n = task_pg.<span class="built_in">read_fromclient</span>();</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">        task_pg.<span class="built_in">closeconnect</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> infotype = task_pg.<span class="built_in">is_infotype</span>();</span><br><span class="line">        <span class="keyword">if</span>(infotype==KEY_VALUE_REQUEST)</span><br><span class="line">            task_pg.<span class="built_in">kvrequest_handler</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(infotype==KEY_VALUE_RESPOND||infotype==KEY_VALUE_RESPONDBK)</span><br><span class="line">            task_pg.<span class="built_in">kvrespond_handler</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(infotype==REFLESH_MASTER)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">pthread_mutex_lock</span>(&amp;reflesh_master_lock);</span><br><span class="line">            master_addr = task_pg.<span class="built_in">refleshmaster</span>();</span><br><span class="line">            <span class="built_in">pthread_mutex_unlock</span>(&amp;reflesh_master_lock);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pthread_rwlock_unlock</span>(&amp;shutdown_lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当epoll函数返回的是已建立连接的套接字时，代表有IO请求发生，此时将task_cfd函数添加进线程池的工作队列中。task_cfd内部首先调用read_fromclient函数读取套接字中的json数据包，如果数据为空，则使用closeconnect函数关闭套接字；如果json数据包类型为KEY_VALUE_RESQUEST，则调用kvrequest_handler函数处理client的读数据请求；当类型为KEY_VALUE_RESPOND或KEY_VALUE_RESPONDBK时，调用kvrespond_handler函数处理client或cache server的写数据请求；如果类型为REFLESH_MASTER，则更新master的IP地址和端口号。</p>
<h3 id="cache读数据"><a href="#cache读数据" class="headerlink" title="cache读数据"></a>cache读数据</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Task_putget::kvrequest_handler</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pthread_rwlock_rdlock</span>(&amp;rw_lock);</span><br><span class="line">    info[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;value&quot;</span>] = (*LC).<span class="built_in">get</span>(info[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;key&quot;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(info[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;value&quot;</span>]==<span class="string">&quot;&quot;</span>)</span><br><span class="line">        info[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;flag&quot;</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        info[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;flag&quot;</span>] = <span class="literal">true</span>;</span><br><span class="line">    string str_out = info.<span class="built_in">dump</span>()+<span class="string">&quot;\0&quot;</span>;</span><br><span class="line">    <span class="built_in">Write</span>(sockfd, (<span class="type">char</span> *)str_out.<span class="built_in">data</span>(), str_out.<span class="built_in">length</span>()+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">pthread_rwlock_unlock</span>(&amp;rw_lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>cache处理读数据请求的函数，当读取成功时，将flag标志置1，否则置0。</p>
<h3 id="cache写数据"><a href="#cache写数据" class="headerlink" title="cache写数据"></a>cache写数据</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Task_putget::kvrespond_handler</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pthread_rwlock_wrlock</span>(&amp;rw_lock);</span><br><span class="line">    <span class="keyword">if</span>(info[<span class="string">&quot;type&quot;</span>]==KEY_VALUE_RESPONDBK)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;the number of receiving backup data is &quot;</span>&lt;&lt;++rcv_bk&lt;&lt;endl;</span><br><span class="line">        (*LC_BK).<span class="built_in">put</span>(info[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;key&quot;</span>], info[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;value&quot;</span>]);</span><br><span class="line">        <span class="built_in">pthread_rwlock_unlock</span>(&amp;rw_lock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;the number of receiving stored data is &quot;</span>&lt;&lt;++rcv_cli&lt;&lt;endl;</span><br><span class="line">    (*LC).<span class="built_in">put</span>(info[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;key&quot;</span>], info[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;value&quot;</span>]);</span><br><span class="line"></span><br><span class="line">    string addr = key_addr-&gt;<span class="built_in">GetBackUpServer</span>(info[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;key&quot;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!addr.<span class="built_in">empty</span>() &amp;&amp; addr!=curen_addr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> ipport_s = <span class="built_in">get_ipport</span>(addr);</span><br><span class="line">        string&amp; ip = ipport_s.ip;</span><br><span class="line">        <span class="type">int</span>&amp; port = ipport_s.port;</span><br><span class="line">        <span class="type">int</span> cachfd = <span class="built_in">Socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> cache_bk_addr;</span><br><span class="line">        <span class="built_in">bzero</span>(&amp;cache_bk_addr,<span class="built_in">sizeof</span>(cache_bk_addr));</span><br><span class="line">        cache_bk_addr.sin_family = AF_INET;</span><br><span class="line">        <span class="built_in">inet_pton</span>(AF_INET, (<span class="type">const</span> <span class="type">char</span>*)ip.<span class="built_in">data</span>(), &amp;cache_bk_addr.sin_addr.s_addr);</span><br><span class="line">        cache_bk_addr.sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="built_in">connect</span>(cachfd, (<span class="keyword">struct</span> sockaddr *)&amp;cache_bk_addr, <span class="built_in">sizeof</span>(cache_bk_addr))&lt;<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> flags = <span class="built_in">fcntl</span>(cachfd,F_GETFL,<span class="number">0</span>);</span><br><span class="line">            <span class="built_in">fcntl</span>(cachfd,F_SETFL,flags|O_NONBLOCK);</span><br><span class="line">            json sout_data = <span class="built_in">Write_bk_ClientCache</span>((<span class="type">const</span> string)info[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;key&quot;</span>], (<span class="type">const</span> string)info[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;value&quot;</span>]);</span><br><span class="line">            string s_data = sout_data.<span class="built_in">dump</span>()+<span class="string">&quot;\0&quot;</span>;</span><br><span class="line">            <span class="built_in">Write</span>(cachfd, (<span class="type">char</span> *)s_data.<span class="built_in">data</span>(), s_data.<span class="built_in">length</span>()+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Close</span>(cachfd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pthread_rwlock_unlock</span>(&amp;rw_lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>cache处理写函数请求的函数。如果类型为KEY_VALUE_RESPONDBK，则将数据写入备份LRU中；如果类型为KEY_VALUE_RESPOND，则将数据写入LRU中，同时找到该key对应的备份cache server服务器，向其发送类型为KEY_VALUE_RESPONDBK的json数据包。</p>
]]></content>
      <categories>
        <category>分布式缓存</category>
      </categories>
      <tags>
        <tag>学习日志</tag>
        <tag>cache</tag>
        <tag>数据读写</tag>
      </tags>
  </entry>
  <entry>
    <title>client模块</title>
    <url>/2022/05/16/client%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><p>client需要与master和cache server之间交互，其中与master的交互是需要请求cache server列表来更新本地的cache serve列表，与cache server的交互则主要有两个功能：一是随机产生key和对应的value，发送给cache server；二是根据key向对应的cache server请求其相应的value数据。<br><a href="https://imgtu.com/i/XuelEF"><img src="https://s1.ax1x.com/2022/05/28/XuelEF.png" alt="client"></a></p>
<span id="more"></span>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="master交互"><a href="#master交互" class="headerlink" title="master交互"></a>master交互</h3><p>client需要通过与master进行交互，更新本地的cache server列表，请求分布有三种触发情况：</p>
<ul>
<li>创建client时没有给定初始cache server分布</li>
<li>本地cache server缓存超时</li>
<li>与某个cache server读写时发现其不可用</li>
</ul>
<p><a href="https://imgtu.com/i/Xuu1US"><img src="https://s1.ax1x.com/2022/05/28/Xuu1US.png" alt="master交互"></a></p>
<h3 id="cache交互"><a href="#cache交互" class="headerlink" title="cache交互"></a>cache交互</h3><p>client可以向cache写{key，value}数据，还可以根据key向其对应的cache server请求相应的value数据。<br><a href="https://imgtu.com/i/Xulowt"><img src="https://s1.ax1x.com/2022/05/28/Xulowt.png" alt="cache交互"></a></p>
<h2 id="核心代码分析"><a href="#核心代码分析" class="headerlink" title="核心代码分析"></a>核心代码分析</h2><h3 id="client初始化"><a href="#client初始化" class="headerlink" title="client初始化"></a>client初始化</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Client::<span class="built_in">Client</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">DistributionRequest</span>();</span><br><span class="line">&#125;</span><br><span class="line">Client::<span class="built_in">Client</span>(vector&lt;string&gt; iplist)</span><br><span class="line">&#123;</span><br><span class="line">    alliplist.<span class="built_in">swap</span>(iplist);</span><br><span class="line">    hash.<span class="built_in">RefreshIPList</span>(alliplist);</span><br><span class="line">    <span class="built_in">time</span>(&amp;start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>client有两种构造函数，当未提供初始cache server列表时，需要向master请求分布，当给定初始列表时，直接根据列表和一致性哈希算法构造哈希环。</p>
<h3 id="请求cache分布"><a href="#请求cache分布" class="headerlink" title="请求cache分布"></a>请求cache分布</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Client::DistributionRequest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,nwrite;</span><br><span class="line">    ipport_pair masterip=<span class="built_in">get_ipport</span>(MASTER_IP);</span><br><span class="line">    json client_to_master=<span class="built_in">Writejs</span>(DISTRIBUTION_REQUEST);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        n=<span class="built_in">ConnectServ</span>(masterip,mastercfd);</span><br><span class="line">        <span class="keyword">if</span>(n!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Close</span>(mastercfd);</span><br><span class="line">            masterip=<span class="built_in">get_ipport</span>(MASTER_IP_BACKUP);</span><br><span class="line">            n=<span class="built_in">ConnectServ</span>(masterip,mastercfd);</span><br><span class="line">            <span class="keyword">if</span>(n!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">perr_exit</span>(<span class="string">&quot;connection to master failed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nwrite=<span class="built_in">WriteData</span>(mastercfd,client_to_master);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">while</span>(nwrite&lt;<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    json jsin=<span class="built_in">ReadData</span>(mastercfd);</span><br><span class="line">    <span class="keyword">if</span>(jsin[<span class="string">&quot;type&quot;</span>]!=DISTRIBUTION_RESPOND)</span><br><span class="line">        <span class="built_in">perr_exit</span>(<span class="string">&quot;distribution request returns fault&quot;</span>);</span><br><span class="line"></span><br><span class="line">    alliplist=jsin[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;iplist&quot;</span>].get&lt;vector&lt;string&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(alliplist.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="built_in">perr_exit</span>(<span class="string">&quot;invalid distribution&quot;</span>);</span><br><span class="line">    hash.<span class="built_in">RefreshIPList</span>(alliplist);</span><br><span class="line">    <span class="built_in">time</span>(&amp;start);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;distribution request once&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">Close</span>(mastercfd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>client调用DistributionRequest函数向master请求cache server分布，其内部首先与master建立连接，如果连接失败则向备用master建立连接，之后发送请求分布的json数据，然后读取master返回的json数据，提取出cache server列表，并根据新的列表构造哈希环。</p>
<h3 id="写入cache数据"><a href="#写入cache数据" class="headerlink" title="写入cache数据"></a>写入cache数据</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Client::keyValueWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">signal</span>(SIGPIPE,SIG_IGN);</span><br><span class="line">    ofstream outfile;</span><br><span class="line">    outfile.<span class="built_in">open</span>(KEY_FILE_NAME,ios::app);</span><br><span class="line">    <span class="keyword">if</span>(!outfile.<span class="built_in">is_open</span>())</span><br><span class="line">        <span class="built_in">perr_exit</span>(<span class="string">&quot;open file failed&quot;</span>);</span><br><span class="line"></span><br><span class="line">    json js=<span class="built_in">Writejs</span>(KEY_VALUE_RESPOND);</span><br><span class="line">    string key=js[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;key&quot;</span>].<span class="built_in">get</span>&lt;string&gt;();</span><br><span class="line">    string value=js[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;value&quot;</span>].<span class="built_in">get</span>&lt;string&gt;();</span><br><span class="line">    <span class="built_in">CountTime</span>();</span><br><span class="line">    ipport_pair oneipbf=<span class="built_in">get_ipport</span>(hash.<span class="built_in">GetServerIndex</span>(key));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n=<span class="built_in">ConnectServ</span>(oneipbf,kvwritecfd);</span><br><span class="line">    <span class="keyword">while</span>(n&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Close</span>(kvwritecfd);</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">DistributionRequest</span>();</span><br><span class="line"></span><br><span class="line">        oneipbf=<span class="built_in">get_ipport</span>(hash.<span class="built_in">GetServerIndex</span>(key));</span><br><span class="line">        n=<span class="built_in">ConnectServ</span>(oneipbf,kvwritecfd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> nwrite=<span class="built_in">WriteData</span>(kvwritecfd,js);</span><br><span class="line">    <span class="keyword">if</span>(nwrite&lt;<span class="number">0</span>)</span><br><span class="line">        oneipbf.port=<span class="number">0</span>;</span><br><span class="line">    outfile&lt;&lt;key&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;value&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;oneipbf.port&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        js=<span class="built_in">Writejs</span>(KEY_VALUE_RESPOND);</span><br><span class="line">        key=js[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;key&quot;</span>].<span class="built_in">get</span>&lt;string&gt;();</span><br><span class="line">        value=js[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;value&quot;</span>].<span class="built_in">get</span>&lt;string&gt;();</span><br><span class="line">        <span class="built_in">CountTime</span>();</span><br><span class="line">        ipport_pair oneip=<span class="built_in">get_ipport</span>(hash.<span class="built_in">GetServerIndex</span>(key));</span><br><span class="line">        <span class="keyword">if</span>(oneip.ip!=oneipbf.ip||oneip.port!=oneipbf.port)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Close</span>(kvwritecfd);</span><br><span class="line">            n=<span class="built_in">ConnectServ</span>(oneip,kvwritecfd);</span><br><span class="line">            <span class="keyword">while</span>(n&lt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">Close</span>(kvwritecfd);</span><br><span class="line">                <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">                <span class="built_in">DistributionRequest</span>();</span><br><span class="line">                oneip=<span class="built_in">get_ipport</span>(hash.<span class="built_in">GetServerIndex</span>(key));</span><br><span class="line">                n=<span class="built_in">ConnectServ</span>(oneip,kvwritecfd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nwrite=<span class="built_in">WriteData</span>(kvwritecfd,js);</span><br><span class="line">        <span class="keyword">if</span>(nwrite&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            oneipbf.port=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        oneipbf=oneip;</span><br><span class="line">        outfile&lt;&lt;key&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;value&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;oneip.port&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">Sleep_ms</span>(<span class="number">300</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Close</span>(kvwritecfd);</span><br><span class="line">    outfile.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>client调用keyValueWrite函数向cache server定时循环写入随机键值对数据，并将其保存在本地文件中，供读取函数使用，以测试缓存命中率。写数据函数内部首先根据key找到其对应的cache服务器，然后向其建立连接，如果连接失败则循环向master请求cache分布，再与key对应的服务器建立连接，知道连接成功建立。之后循环进行以上过程，其中还需要调用CountTime函数定时，每经过5秒便重新向master请求cache分布，避免本地缓存失效。</p>
<h3 id="读取cache数据"><a href="#读取cache数据" class="headerlink" title="读取cache数据"></a>读取cache数据</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">Client::keyValueRequest</span><span class="params">(<span class="type">const</span> string key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    json js=<span class="built_in">Writejs</span>(key);</span><br><span class="line">    json jsin;</span><br><span class="line">    ipport_pair oneip;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CountTime</span>();</span><br><span class="line">        oneip=<span class="built_in">get_ipport</span>(hash.<span class="built_in">GetServerIndex</span>(key));</span><br><span class="line">        <span class="type">int</span> n=<span class="built_in">ConnectServ</span>(oneip,kvreqcfd);</span><br><span class="line">        <span class="keyword">while</span>(n&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Close</span>(kvreqcfd);</span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">DistributionRequest</span>();</span><br><span class="line"></span><br><span class="line">            oneip=<span class="built_in">get_ipport</span>(hash.<span class="built_in">GetServerIndex</span>(key));</span><br><span class="line">            n=<span class="built_in">ConnectServ</span>(oneip,kvreqcfd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> nwrite=<span class="built_in">WriteData</span>(kvreqcfd,js);</span><br><span class="line">        <span class="keyword">if</span>(nwrite&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Close</span>(kvreqcfd);</span><br><span class="line">            <span class="built_in">DistributionRequest</span>();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        jsin=<span class="built_in">ReadData</span>(kvreqcfd);</span><br><span class="line">        <span class="keyword">if</span>(jsin.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Close</span>(kvreqcfd);</span><br><span class="line">            <span class="built_in">perr_exit</span>(<span class="string">&quot;connection with cache fails&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(jsin[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;flag&quot;</span>]==<span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Close</span>(kvreqcfd);</span><br><span class="line">            <span class="built_in">DistributionRequest</span>();</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;<span class="number">2</span>)</span><br><span class="line">                <span class="built_in">perr_exit</span>(<span class="string">&quot;Data lose&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(jsin[<span class="string">&quot;type&quot;</span>]==KEY_VALUE_REQUEST&amp;&amp;jsin[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;key&quot;</span>]==key)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="built_in">perr_exit</span>(<span class="string">&quot;key value request returns fault&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Close</span>(kvreqcfd);</span><br><span class="line">    string value=jsin[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;value&quot;</span>].<span class="built_in">get</span>&lt;string&gt;();</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>client调用keyValueRequest函数向cache读取指定key的value。函数内部首先通过Writejs函数打开保存了键值对的本地文件，之后提取出key，与其对应的cache服务器建立连接，如果建立失败则向master拉取cache分布，循环知道成功建立连接，随后发送请求key数据包，然后读取cache返回的json数据，提出其中的value数据。</p>
]]></content>
      <categories>
        <category>分布式缓存</category>
      </categories>
      <tags>
        <tag>学习日志</tag>
        <tag>client</tag>
      </tags>
  </entry>
  <entry>
    <title>main主函数</title>
    <url>/2022/03/01/main%E4%B8%BB%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><p>使用C++语言在Linux环境下搭建轻量级Web服务器，属于网络编程的简单实现，实现了以下功能：</p>
<ul>
<li>结合线程池、socket套接字、epoll函数实现多线程的并发模型，通过标志位切换LT&#x2F;ET模式、Reactor&#x2F;模拟Proactor模式</li>
<li>结合主状态机、从状态机解析HTTP请求报文，可以处理GET和POST请求，返回服务器图片、视频资源</li>
<li>使用服务器内部数据库保存用户名、登录密码，实现用户通过浏览器进行注册、登录功能</li>
<li>基于有序链表实现定时器，关闭超时的非活跃连接</li>
<li>结合单例模式和阻塞队列实现异步写日志模式，记录服务器的运行状态</li>
</ul>
<p><a href="https://imgtu.com/i/O1CC7V"><img src="https://s1.ax1x.com/2022/05/08/O1CC7V.png" alt="WebServer"></a></p>
<span id="more"></span>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><p>Web服务器是指驻留于因特网上某种类型计算机的程序。当Web浏览器（客户端）连到服务器上并请求文件时，服务器将处理该请求并将文件反馈到该浏览器上，附带的信息会告诉浏览器如何查看该文件（即文件类型）。服务器使用HTTP（超文本传输协议）与客户机浏览器进行信息交流，因此也常被称为HTTP服务器。</p>
<h2 id="核心代码分析"><a href="#核心代码分析" class="headerlink" title="核心代码分析"></a>核心代码分析</h2><h3 id="新建WebServer类对象"><a href="#新建WebServer类对象" class="headerlink" title="新建WebServer类对象"></a>新建WebServer类对象</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">WebServer server;</span><br></pre></td></tr></table></figure>
<p>新建WebServer类，通过构造函数初始化以下变量：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">m_port = <span class="number">9006</span>;             <span class="comment">//端口号，默认9006</span></span><br><span class="line">m_sql_num = <span class="number">8</span>;             <span class="comment">//数据库连接池数量，默认8</span></span><br><span class="line">m_thread_num = <span class="number">8</span>;          <span class="comment">//线程池内的线程数量，默认8</span></span><br><span class="line">m_log_write = <span class="number">0</span>;           <span class="comment">//写日志模式，默认为同步</span></span><br><span class="line">m_OPT_LINGER = <span class="number">0</span>;          <span class="comment">//优雅关闭连接，默认不使用</span></span><br><span class="line">m_LISTENTrigmode=<span class="number">0</span>;        <span class="comment">//listenfd触发模式，默认LT</span></span><br><span class="line">m_CONNTrigmode=<span class="number">0</span>;          <span class="comment">//connfd触发模式，默认LT</span></span><br><span class="line">m_close_log = <span class="number">0</span>;           <span class="comment">//关闭日志，默认不关闭</span></span><br><span class="line">m_actormodel = <span class="number">0</span>;          <span class="comment">//并发模型，默认是proactor</span></span><br><span class="line">m_user = <span class="string">&quot;root&quot;</span>;           <span class="comment">//数据库信息:登录名</span></span><br><span class="line">m_passWord = <span class="string">&quot;1&quot;</span>;          <span class="comment">//数据库信息:密码</span></span><br><span class="line">m_databaseName = <span class="string">&quot;yourdb&quot;</span>; <span class="comment">//数据库信息:库名</span></span><br></pre></td></tr></table></figure>
<h3 id="开启日志"><a href="#开启日志" class="headerlink" title="开启日志"></a>开启日志</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">server.<span class="built_in">log_write</span>();</span><br></pre></td></tr></table></figure>
<p>调用Log类的init初始化函数。</p>
<h3 id="建立数据库连接池"><a href="#建立数据库连接池" class="headerlink" title="建立数据库连接池"></a>建立数据库连接池</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">server.<span class="built_in">sql_pool</span>();</span><br></pre></td></tr></table></figure>
<p>调用conection_poll类的init初始化函数，并调用数据库的initmysql_result函数，取得用户名、密码。</p>
<h3 id="建立线程池"><a href="#建立线程池" class="headerlink" title="建立线程池"></a>建立线程池</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">server.<span class="built_in">thread_pool</span>();</span><br></pre></td></tr></table></figure>
<p>在线程池中新建指定数量的线程。</p>
<h3 id="建立epoll监听套接字"><a href="#建立epoll监听套接字" class="headerlink" title="建立epoll监听套接字"></a>建立epoll监听套接字</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">server.<span class="built_in">eventListen</span>();</span><br></pre></td></tr></table></figure>
<p>建立socket套接字，调用epoll函数监听。</p>
<h3 id="处理epoll响应事件"><a href="#处理epoll响应事件" class="headerlink" title="处理epoll响应事件"></a>处理epoll响应事件</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">server.<span class="built_in">eventLoop</span>();</span><br></pre></td></tr></table></figure>
<p>处理epoll函数返回的响应事件集合。</p>
]]></content>
      <categories>
        <category>webserver</category>
      </categories>
      <tags>
        <tag>学习日志</tag>
      </tags>
  </entry>
  <entry>
    <title>http处理类</title>
    <url>/2022/03/20/http%E5%A4%84%E7%90%86%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><p>浏览器端发出http连接请求，主线程创建http对象接收请求并将所有数据读入对应buffer，将该对象插入任务队列，工作线程从任务队列中取出一个任务进行处理。工作线程取出任务后，调用process_read函数，通过主、从状态机对请求报文进行解析。解析完之后，跳转do_request函数生成响应报文，通过process_write写入buffer，返回给浏览器端。<br><a href="https://imgtu.com/i/OQV1rd"><img src="https://s1.ax1x.com/2022/05/07/OQV1rd.png" alt="http类"></a></p>
<span id="more"></span>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="http请求报文"><a href="#http请求报文" class="headerlink" title="http请求报文"></a>http请求报文</h3><p>HTTP请求报文由请求行（request line）、请求头部（header）、空行和请求数据四个部分组成：</p>
<ul>
<li>请求行：用来说明请求类型，要访问的资源以及所使用的HTTP版本。</li>
<li>请求头部：紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息。<ul>
<li>HOST：给出请求资源所在服务器的域名；</li>
<li>User-Agent：HTTP客户端程序的信息，该信息由你发出请求使用的浏览器来定义,并且在每个请求中自动发送等；</li>
<li>Accept：说明用户代理可处理的媒体类型；</li>
<li>Accept-Encoding：说明用户代理支持的内容编码；</li>
<li>Accept-Language：说明用户代理能够处理的自然语言集；</li>
<li>Content-Type：说明实现主体的媒体类型；</li>
<li>Content-Length：说明实现主体的大小；</li>
<li>Connection：连接管理，可以是Keep-Alive或close；</li>
</ul>
</li>
<li>空行：请求头部后面的空行是必须的即使第四部分的请求数据为空，也必须有空行。</li>
<li>主体：请求数据，可以添加任意的其他数据。</li>
</ul>
<p><a href="https://imgtu.com/i/O1CK76"><img src="https://s1.ax1x.com/2022/05/08/O1CK76.png" alt="HTTP请求"></a></p>
<h3 id="http响应报文"><a href="#http响应报文" class="headerlink" title="http响应报文"></a>http响应报文</h3><p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。</p>
<ul>
<li>状态行：由HTTP协议版本号，状态码，状态消息三部分组成。</li>
<li>消息报头：用来说明客户端要使用的一些附加信息。</li>
<li>空行：消息报头后面的空行是必须的。</li>
<li>响应正文：服务器返回给客户端的文本信息。空行后面的html部分为响应正文。</li>
</ul>
<p><a href="https://imgtu.com/i/O1CbuR"><img src="https://s1.ax1x.com/2022/05/08/O1CbuR.png" alt="HTTP响应"></a></p>
<h3 id="有限状态机"><a href="#有限状态机" class="headerlink" title="有限状态机"></a>有限状态机</h3><p>有限状态机,也称为FSM(Finite State Machine)，其在任意时刻都处于有限状态集合中的某一状态。当其获得一个输入字符时，将从当前状态转换到另一个状态，或者仍然保持在当前状态。任何一个FSM都可以用状态转换图来描述，图中的节点表示FSM中的一个状态，有向（方向表示从一个初态转换到次态）加权（权表示事件）边表示输入字符时状态的变化。如果图中不存在与当前状态与输入字符对应的有向边，则FSM将进入“消亡状态(Doom State)”，此后FSM将一直保持“消亡状态”。<br><a href="https://imgtu.com/i/O1unu8"><img src="https://s1.ax1x.com/2022/05/08/O1unu8.png" alt="主从状态机"></a></p>
<h2 id="基础API"><a href="#基础API" class="headerlink" title="基础API"></a>基础API</h2><h3 id="epoll创建"><a href="#epoll创建" class="headerlink" title="epoll创建"></a>epoll创建</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">epoll_create</span><span class="params">(<span class="type">int</span> size)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>作用：创建epoll文件描述符；</li>
<li>参数：<ul>
<li>size：自Linux2.6.8后，size参数被忽略，但是依然要大于0；</li>
</ul>
</li>
<li>返回值：成功则返回epoll文件描述符，失败返回一个负数；</li>
</ul>
<h3 id="epoll注册事件"><a href="#epoll注册事件" class="headerlink" title="epoll注册事件"></a>epoll注册事件</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="type">int</span> epfd,<span class="type">int</span> op,<span class="type">int</span> fd,<span class="keyword">struct</span> epoll_event* event)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>作用：告诉内核要监听什么类型的事件；</li>
<li>参数：<ul>
<li>epfd：epoll_create函数返回的文件描述符；</li>
<li>op：表示动作类型：<ul>
<li>EPOLL_CTL_ADD：注册新的fd到epfd中；</li>
<li>EPOLL_CTL_MOD：修改已经注册的fd的监听事件；</li>
<li>EPOLL_CTL_DEL：从epfd中删除一个fd；</li>
</ul>
</li>
<li>fd：需要监听的文件描述符。epoll将要监听的文件描述符fd加到红黑树上，红黑树的遍历效率比表更高，创建epfd时，内核同时创建了一个红黑树数据结构，epoll_ctl对红黑树中的每个fd注册管理事件属性。</li>
<li>event：表示感兴趣的事件和被触发的事件，可能的取值有：<ul>
<li>EPOLLIN：文件描述符可以读；</li>
<li>EPOLLOUT：文件描述符可以写；</li>
<li>EPOLLPRI：文件描述符有紧急的数可读；</li>
<li>EPOLLERR：文件描述符发生错误；</li>
<li>EPOLLHUP：文件描述符被挂断；</li>
<li>EPOLLET：ET的epoll工作模式；</li>
<li>EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里；</li>
</ul>
</li>
</ul>
</li>
<li>返回值：成功时返回0，失败时返回-1，并设置errno；</li>
</ul>
<h3 id="epoll-wait函数"><a href="#epoll-wait函数" class="headerlink" title="epoll_wait函数"></a>epoll_wait函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="type">int</span> epfd，<span class="keyword">struct</span> epoll_event * events， <span class="type">int</span> maxevents，<span class="type">int</span> timeout)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>作用：等待文件描述符epfd引用的epoll实例上的I&#x2F;O事件。等待注册在epfd上的socket的fd的事件的发生，如果发生则将发生的sokct的fd和事件类型放入到events数组中。并且，将注册在epfd上的socket的fd的事件类型给清空。所以如果下一个循环你还要关注这个socket的fd的话，则需要用epoll_ctl(epfd,EPOLL_CTL_MOD,listenfd,&amp;ev)来重新设置socket的fd的事件类型。这时不用EPOLL_CTL_ADD,因为socket的fd并未清空，只是事件类型清空。</li>
<li>参数：<ul>
<li>epfd：由epoll_create产生的epoll句柄；</li>
<li>events：从内核得到事件的集合；</li>
<li>maxevents：内核这个events有多大(数组成员的个数),这个maxevents的值不能大于创建epoll_create()时的size；</li>
<li>timeout：超时时间（毫秒，0会立即返回，-1将永久阻塞），当超过timeout还没有事件触发时，就超时；</li>
</ul>
</li>
<li>返回值：需要处理的事件数目，若返回0表示已超时；</li>
</ul>
<h3 id="recv函数"><a href="#recv函数" class="headerlink" title="recv函数"></a>recv函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">recv</span><span class="params">(SOCKET s,<span class="type">char</span> FAR* buf,<span class="type">int</span> len,<span class="type">int</span> flags)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>作用：从TCP连接的另一端接收数据；</li>
<li>参数：<ul>
<li>s：指定接收端套接字描述符；</li>
<li>buf：指明缓冲区，用来存放接收到的数据；</li>
<li>len：缓冲区的长度；</li>
<li>flags：一般置0；</li>
</ul>
</li>
<li>返回值：执行成功后返回接收到的字节数，失败则返回-1，并成功设置errno为以下某个值：<ul>
<li>EAGAIN：套接字已标记为非阻塞，而接收操作被阻塞或者接收超时；</li>
<li>EBADF：sock不是有效的描述词；</li>
<li>ECONNREFUSE：远程主机阻绝网络连接；</li>
<li>EFAULT：内存空间访问出错；</li>
<li>EINTR：操作被信号中断；</li>
<li>EINVAL：参数无效；</li>
<li>ENOMEM：内存不足；</li>
<li>ENOTCONN：与面向连接关联的套接字尚未被连接上；</li>
<li>ENOTSOCK：sock索引的不是套接字；</li>
</ul>
</li>
</ul>
<h3 id="stat函数"><a href="#stat函数" class="headerlink" title="stat函数"></a>stat函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">stat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * file_name, <span class="keyword">struct</span> stat *buf)</span></span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stat</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">dev_t</span> st_dev; <span class="comment">//device 文件的设备编号</span></span><br><span class="line">    <span class="type">ino_t</span> st_ino; <span class="comment">//inode 文件的i-node</span></span><br><span class="line">    <span class="type">mode_t</span> st_mode; <span class="comment">//protection 文件的类型和存取的权限</span></span><br><span class="line">    <span class="type">nlink_t</span> st_nlink; <span class="comment">//number of hard links 连到该文件的硬连接数目, 刚建立的文件值为1.</span></span><br><span class="line">    <span class="type">uid_t</span> st_uid; <span class="comment">//user ID of owner 文件所有者的用户识别码</span></span><br><span class="line">    <span class="type">gid_t</span> st_gid; <span class="comment">//group ID of owner 文件所有者的组识别码</span></span><br><span class="line">    <span class="type">dev_t</span> st_rdev; <span class="comment">//device type 若此文件为装置设备文件, 则为其设备编号</span></span><br><span class="line">    <span class="type">off_t</span> st_size; <span class="comment">//total size, in bytes 文件大小, 以字节计算</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> st_blksize; <span class="comment">//blocksize for filesystem I/O 文件系统的I/O 缓冲区大小.</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> st_blocks; <span class="comment">//number of blocks allocated 占用文件区块的个数, 每一区块大小为512 个字节.</span></span><br><span class="line">    <span class="type">time_t</span> st_atime; <span class="comment">//time of lastaccess 文件最近一次被存取或被执行的时间, 一般只有在用mknod、utime、read、write 与tructate 时改变.</span></span><br><span class="line">    <span class="type">time_t</span> st_mtime; <span class="comment">//time of last modification 文件最后一次被修改的时间, 一般只有在用mknod、utime 和write 时才会改变</span></span><br><span class="line">    <span class="type">time_t</span> st_ctime; <span class="comment">//time of last change i-node 最近一次被更改的时间, 此参数会在文件所有者、组、权限被更改时更新</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：将参数file_name所指的文件状态, 复制到参数buf所指的结构中；</li>
<li>参数：<ul>
<li>file_name：文件指针；</li>
<li>buf：结构体；</li>
</ul>
</li>
<li>返回值：执行成功则返回0，失败返回-1，错误代码存于errno：<ul>
<li>ENOENT：参数file_name 指定的文件不存在；</li>
<li>ENOTDIR：路径中的目录存在但却非真正的目录；</li>
<li>ELOOP：欲打开的文件有过多符号连接问题, 上限为16符号连接；</li>
<li>EFAULT：参数buf为无效指针, 指向无法存在的内存空间；</li>
<li>EACCESS：存取文件时被拒绝；</li>
<li>ENOMEM：核心内存不足；</li>
<li>ENAMETOOLONG：参数file_name的路径名称太长；</li>
</ul>
</li>
</ul>
<h3 id="内存映射函数"><a href="#内存映射函数" class="headerlink" title="内存映射函数"></a>内存映射函数</h3><p>内存映射，简而言之就是将用户空间的一段内存区域映射到内核空间，映射成功后，用户对这段内存区域的修改可以直接反映到内核空间，同样，内核空间对这段区域的修改也直接反映用户空间。那么对于内核空间&lt;—-&gt;用户空间两者之间需要大量数据传输等操作的话效率是非常高的。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *<span class="title">mmap</span><span class="params">(<span class="type">void</span> *start, <span class="type">size_t</span> length, <span class="type">int</span> prot, <span class="type">int</span> flags, <span class="type">int</span> fd, <span class="type">off_t</span> offsize)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：将某个文件内容映射到内存中，对该内存区域的存取即是直接对该文件内容的读写；</li>
<li>参数：<ul>
<li>start：指向欲对应的内存起始地址，通常设为NULL，代表让系统自动选定地址，对应成功后该地址会返回；</li>
<li>length：代表将文件中多大的部分对应到内存；</li>
<li>prot：代表映射区域的保护方式，有下列组合：<ul>
<li>PROT_EXEC：映射区域可被执行；</li>
<li>PROT_READ：映射区域可被读取；</li>
<li>PROT_WRITE：映射区域可被写入；</li>
<li>PROT_NONE：映射区域不能存取；</li>
</ul>
</li>
<li>flags：会影响映射区域的各种特性：<ul>
<li>MAP_FIXED：如果参数 start 所指的地址无法成功建立映射时，则放弃映射，不对地址做修正。通常不鼓励用此旗标；</li>
<li>MAP_SHARED：对应射区域的写入数据会复制回文件内，而且允许其他映射该文件的进程共享；</li>
<li>MAP_PRIVATE：对应射区域的写入操作会产生一个映射文件的复制，即私人的”写入时复制” (copy on write)对此区域作的任何修改都不会写回原来的文件内容；</li>
<li>MAP_ANONYMOUS：建立匿名映射，此时会忽略参数fd，不涉及文件，而且映射区域无法和其他进程共享；</li>
<li>MAP_DENYWRITE：只允许对应射区域的写入操作，其他对文件直接写入的操作将会被拒绝；</li>
<li>MAP_LOCKED：将映射区域锁定住，这表示该区域不会被置换(swap)；</li>
</ul>
</li>
<li>fd：open()返回的文件描述词，代表欲映射到内存的文件；</li>
<li>offsize：文件映射的偏移量，通常设置为0，代表从文件最前方开始对应，offset必须是分页大小的整数倍；</li>
</ul>
</li>
<li>返回值：若映射成功则返回映射区的内存起始地址，否则返回-1，错误原因存于errno中：<ul>
<li>EBADF：参数fd不是有效的文件描述词；</li>
<li>EACCES：存取权限有误；</li>
<li>EINVAL：参数start、length或offset有一个不合法；</li>
<li>EAGAIN：文件被锁住，或是有太多内存被锁住；</li>
<li>ENOMEM：内存不足；</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">munmap</span><span class="params">(<span class="type">void</span>* start,<span class="type">size_t</span> length)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：取消内存映射；</li>
<li>参数：<ul>
<li>start：指向映射内存起始地址；</li>
<li>length：欲取消的内存大小；</li>
</ul>
</li>
<li>返回值：如果解除映射成功则返回0，否则返回-1，错误原因存于errno中；</li>
</ul>
<h3 id="writev函数"><a href="#writev函数" class="headerlink" title="writev函数"></a>writev函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">writev</span><span class="params">(<span class="type">int</span> filedes,<span class="type">const</span> <span class="keyword">struct</span> iovec* iov,<span class="type">int</span> iovcnt)</span></span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">iovec</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span>* iov_base;</span><br><span class="line">    <span class="type">size_t</span> iov_len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：在一次函数调用中写多个非连续缓冲区，即以顺序iov[0]、iov[1]至iov[iovcnt-1]从缓冲区中聚集输出数据。</li>
<li>参数：<ul>
<li>filedes：文件描述符；</li>
<li>iov：iovec类型结构体：<ul>
<li>iov_base：指向数据的地址；</li>
<li>iov_len：数据的长度；</li>
</ul>
</li>
<li>iovcnt：结构体的个数；</li>
</ul>
</li>
<li>返回值：成功则返回已写的字节数，若出错则返回-1;</li>
</ul>
<h3 id="vsnprintf函数"><a href="#vsnprintf函数" class="headerlink" title="vsnprintf函数"></a>vsnprintf函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">vsnprintf</span><span class="params">(<span class="type">char</span>* s,<span class="type">size_t</span> n,<span class="type">const</span> <span class="type">char</span>* format,va_list arg)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：将格式化的数据从变量参数列表写入大小已设置的缓冲区；</li>
<li>参数：<ul>
<li>s：指向存储结果的缓冲区指针；</li>
<li>n：缓冲区中要使用的最大字节数；</li>
<li>format：包含格式字符串的C字符串；</li>
<li>arg：初始化的变量参数列表，使用方法如下：<ul>
<li>首先在函数里定义一个va_list型的变量，这个变量是指向参数的指针；</li>
<li>然后用va_start宏初始化变量刚定义的va_list变量；</li>
<li>然后用va_arg返回可变的参数，va_arg的第二个参数是你要返回的参数的类型（如果函数有多个可变参数的，依次调用va_arg获取各个参数）；</li>
<li>最后用va_end宏结束可变参数的获取；</li>
</ul>
</li>
</ul>
</li>
<li>返回值：返回写入的字符数，失败则返回负数；</li>
</ul>
<h2 id="核心代码分析"><a href="#核心代码分析" class="headerlink" title="核心代码分析"></a>核心代码分析</h2><h3 id="http类成员变量"><a href="#http类成员变量" class="headerlink" title="http类成员变量"></a>http类成员变量</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> FILENAME_LEN=<span class="number">200</span>;       <span class="comment">//文件名长度</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> READ_BUFFER_SIZE=<span class="number">2048</span>;  <span class="comment">//读缓冲区大小</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> WRITE_BUFFER_SIZE=<span class="number">1024</span>; <span class="comment">//写缓冲区大小</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_epollfd;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_user_count;</span><br><span class="line">MYSQL* mysql;</span><br><span class="line"><span class="type">int</span> m_state;  <span class="comment">//读为0，写为1</span></span><br><span class="line"><span class="type">int</span> m_sockfd;</span><br><span class="line">sockaddr_in m_address;</span><br><span class="line"><span class="type">char</span> m_read_buf[READ_BUFFER_SIZE]; <span class="comment">//存储读取的请求报文数据</span></span><br><span class="line"><span class="type">int</span> m_read_idx;                    <span class="comment">//读缓冲区中数据的最后一个字节的下一个位置</span></span><br><span class="line"><span class="type">int</span> m_checked_idx;                 <span class="comment">//读缓冲区中读取的位置</span></span><br><span class="line"><span class="type">int</span> m_start_line;                  <span class="comment">//读缓冲区中已经解析的字符个数</span></span><br><span class="line"><span class="type">char</span> m_write_buf[WRITE_BUFFER_SIZE]; <span class="comment">//存储的响应报文数据</span></span><br><span class="line"><span class="type">int</span> m_write_idx;                   <span class="comment">//写缓冲区中的数据长度</span></span><br><span class="line">CHECK_STATE m_check_state;         <span class="comment">//主状态机的状态</span></span><br><span class="line">METHOD m_method;                   <span class="comment">//请求方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解析请求报文中对应的6个变量</span></span><br><span class="line"><span class="type">char</span> m_real_file[FILENAME_LEN];    <span class="comment">//存储读取文件的名称</span></span><br><span class="line"><span class="type">char</span>* m_url;</span><br><span class="line"><span class="type">char</span>* m_version;</span><br><span class="line"><span class="type">char</span>* m_host;</span><br><span class="line"><span class="type">int</span> m_content_length;</span><br><span class="line"><span class="type">bool</span> m_linger;</span><br><span class="line"><span class="type">int</span> bytes_to_send;</span><br><span class="line"><span class="type">int</span> bytes_have_send;               <span class="comment">//已发送的字节数</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* m_string;                    <span class="comment">//存储请求头数据</span></span><br><span class="line"><span class="type">int</span> cgi;                           <span class="comment">//是否启用的POST</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stat</span> m_file_stat;           <span class="comment">//文件结构  </span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">iovec</span> m_iv[<span class="number">2</span>];              <span class="comment">//每一个元素指向一个缓冲区</span></span><br><span class="line"><span class="type">int</span> m_iv_count;</span><br><span class="line"><span class="type">char</span>* m_file_address;              <span class="comment">//文件地址</span></span><br><span class="line"><span class="type">char</span>* doc_root;                    <span class="comment">//网站根目录，文件夹内存放请求的资源和跳转的html文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将表中的用户名和密码放入map中</span></span><br><span class="line">map&lt;string,string&gt; users;</span><br><span class="line"><span class="type">int</span> m_TRIGMode;</span><br><span class="line"><span class="type">int</span> m_close_log;</span><br><span class="line"><span class="type">char</span> sql_user[<span class="number">100</span>];</span><br><span class="line"><span class="type">char</span> sql_passwd[<span class="number">100</span>];</span><br><span class="line"><span class="type">char</span> sql_name[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//报文的请求方法</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">METHOD</span>&#123;GET=<span class="number">0</span>,POST,HEAD,PUT,DELETE,TRACE,OPTIONS,CONNECT,PATH&#125;;</span><br><span class="line"><span class="comment">//主状态机的状态：解析请求行、解析请求头、解析消息体</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CHECK_STATE</span>&#123;CHECK_STATE_REQUESTLINE=<span class="number">0</span>,CHECK_STATE_HEADER,CHECK_STATE_CONTENT&#125;;</span><br><span class="line"><span class="comment">//报文解析的结果：请求不完整、获得了完整的HTTP请求、请求资源不存在、HTTP请求报文有错误或请求资源为目录、请求资源禁止访问、请求资源可以正常访问、服务器内部错误</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">HTTP_CODE</span>&#123;NO_REQUEST,GET_REQUEST,NO_RESOURCE,BAD_REQUEST,FORBIDDEN_REQUEST,FILE_REQUEST,INTERNAL_ERROR,CLOSED_CONNECTION&#125;;</span><br><span class="line"><span class="comment">//从状态机的状态：完整读取一行、报文语法有误、读取的行不完整</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">LINE_STATUS</span>&#123;LINE_OK=<span class="number">0</span>,LINE_BAD,LINE_OPEN&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="初始化数据库连接"><a href="#初始化数据库连接" class="headerlink" title="初始化数据库连接"></a>初始化数据库连接</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">http_conn::initmysql_result</span><span class="params">(connection_poll* connPool)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MYSQL *mysql = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="function">connectionRAII <span class="title">mysqlcon</span><span class="params">(&amp;mysql, connPool)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_query</span>(mysql, <span class="string">&quot;SELECT username,passwd FROM user&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">LOG_ERROR</span>(<span class="string">&quot;SELECT error:%s\n&quot;</span>, <span class="built_in">mysql_error</span>(mysql));</span><br><span class="line">    &#125;</span><br><span class="line">    MYSQL_RES *result = <span class="built_in">mysql_store_result</span>(mysql);</span><br><span class="line">    <span class="type">int</span> num_fields = <span class="built_in">mysql_num_fields</span>(result);</span><br><span class="line">    MYSQL_FIELD *fields = <span class="built_in">mysql_fetch_fields</span>(result);</span><br><span class="line">    <span class="keyword">while</span> (MYSQL_ROW row = <span class="built_in">mysql_fetch_row</span>(result))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">string <span class="title">temp1</span><span class="params">(row[<span class="number">0</span>])</span></span>;</span><br><span class="line">        <span class="function">string <span class="title">temp2</span><span class="params">(row[<span class="number">1</span>])</span></span>;</span><br><span class="line">        users[temp1] = temp2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先从数据库连接池中取一个数据库连接，然后在user表中检索username、passwd数据（此数据是通过用户在浏览器端注册后，添加至数据库中），将对应的用户名和密码存入map中，供后续登录验证。</p>
<h3 id="初始化http类对象"><a href="#初始化http类对象" class="headerlink" title="初始化http类对象"></a>初始化http类对象</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">http_conn::init</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> sockaddr_in &amp;addr, <span class="type">char</span> *root, <span class="type">int</span> TRIGMode,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="type">int</span> close_log, string user, string passwd, string sqlname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_sockfd = sockfd;</span><br><span class="line">    m_address = addr;</span><br><span class="line">    <span class="built_in">addfd</span>(m_epollfd, sockfd, <span class="literal">true</span>, m_TRIGMode); </span><br><span class="line">    m_user_count++;</span><br><span class="line">    doc_root = root;</span><br><span class="line">    m_TRIGMode = TRIGMode;</span><br><span class="line">    m_close_log = close_log;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(sql_user, user.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcpy</span>(sql_passwd, passwd.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcpy</span>(sql_name, sqlname.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">init</span>(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>初始化http类对象，将sockfd添加到epollfd中，并开启oneshot事件，同步root目录位置等信息，并且调用私有初始化函数，用于初始化诸多成员变量，例如初始化读写缓冲区、存储文件，将状态初始化为分析请求行状态等。</p>
<h3 id="一次性读函数"><a href="#一次性读函数" class="headerlink" title="一次性读函数"></a>一次性读函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::read_once</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m_read_idx&gt;=READ_BUFFER_SIZE)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> bytes_read=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(m_TRIGMode==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bytes_read=<span class="built_in">recv</span>(m_sockfd,m_read_buf+m_read_idx,READ_BUFFER_SIZE-m_read_idx,<span class="number">0</span>);</span><br><span class="line">        m_read_idx+=bytes_read;</span><br><span class="line">        <span class="keyword">if</span>(bytes_read&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            bytes_read=<span class="built_in">recv</span>(m_sockfd,m_read_buf+m_read_idx,READ_BUFFER_SIZE-m_read_idx,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(bytes_read==<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(errno==EAGAIN||errno==EWOULDBLOCK)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(bytes_read==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            m_read_idx+=bytes_read;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用read_once函数读取浏览器端发送来的请求报文，直到无数据可读或对方关闭连接，读取到m_read_buffer中，并更新m_read_index。m_TRIGMode为LT&#x2F;ET模式切换标志，为0时表示处于LT模式，此时不需要一次性读完全部数据，因为epoll会一直通知此文件描述符仍有文件可读；为1时表示处于ET模式，此时如果一次性未把数据读完，后续不会再进行通知，需要需要通过while循环不断读取数据，直到无数据可读。</p>
<h3 id="处理http请求报文函数"><a href="#处理http请求报文函数" class="headerlink" title="处理http请求报文函数"></a>处理http请求报文函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::process_read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LINE_STATUS line_status=LINE_OK;</span><br><span class="line">    HTTP_CODE ret=NO_REQUEST;</span><br><span class="line">    <span class="type">char</span>* text=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((m_check_state==CHECK_STATE_CONTENT&amp;&amp;line_status==LINE_OK)||((line_status=<span class="built_in">parse_line</span>())==LINE_OK))</span><br><span class="line">    &#123;</span><br><span class="line">        text=<span class="built_in">get_line</span>();</span><br><span class="line">        m_start_line=m_checked_idx;</span><br><span class="line">        <span class="built_in">LOG_INFO</span>(<span class="string">&quot;%s&quot;</span>,text);</span><br><span class="line">        <span class="keyword">switch</span>(m_check_state)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> CHECK_STATE_REQUESTLINE:</span><br><span class="line">            &#123;</span><br><span class="line">                ret=<span class="built_in">parse_request_line</span>(text);</span><br><span class="line">                <span class="keyword">if</span>(ret==BAD_REQUEST)</span><br><span class="line">                    <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> CHECK_STATE_HEADER:</span><br><span class="line">            &#123;</span><br><span class="line">                ret=<span class="built_in">parse_headers</span>(text);</span><br><span class="line">                <span class="keyword">if</span>(ret==BAD_REQUEST)</span><br><span class="line">                    <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(ret==GET_REQUEST)</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">do_request</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> CHECK_STATE_CONTENT:</span><br><span class="line">            &#123;</span><br><span class="line">                ret=<span class="built_in">parse_content</span>(text);</span><br><span class="line">                <span class="keyword">if</span>(ret==GET_REQUEST)</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">do_request</span>();</span><br><span class="line">                line_status=LINE_OPEN;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> INTERNAL_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> NO_REQUEST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>process_read函数通过while循环，将主从状态机进行封装，对报文的每一行进行循环处理。循环有两个判断条件，一是主状态机转移到CHECK_STATE_CONTENT，该条件涉及解析消息体；二是从状态机转移到LINE_OK，该条件涉及解析请求行和请求头部。两个条件为或关系，满足一个即可。在while循环体中，使用从状态机读取数据，调用get_line函数，通过m_start_line将从状态机读取数据间接赋给text，而主状态机解析text。parse_request_line为解析请求行函数，parse_headers为解析请求头函数，parse_content为解析消息体函数，do_request为处理http响应函数。</p>
<h3 id="从状态机函数"><a href="#从状态机函数" class="headerlink" title="从状态机函数"></a>从状态机函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">http_conn::LINE_STATUS <span class="title">http_conn::parse_line</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (; m_checked_idx &lt; m_read_idx; ++m_checked_idx)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = m_read_buf[m_checked_idx];</span><br><span class="line">        <span class="keyword">if</span> (temp == <span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((m_checked_idx + <span class="number">1</span>) == m_read_idx)</span><br><span class="line">                <span class="keyword">return</span> LINE_OPEN;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (m_read_buf[m_checked_idx + <span class="number">1</span>] == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                m_read_buf[m_checked_idx++] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                m_read_buf[m_checked_idx++] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="keyword">return</span> LINE_OK;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> LINE_BAD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (temp == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (m_checked_idx &gt; <span class="number">1</span> &amp;&amp; m_read_buf[m_checked_idx - <span class="number">1</span>] == <span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                m_read_buf[m_checked_idx - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                m_read_buf[m_checked_idx++] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="keyword">return</span> LINE_OK;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> LINE_BAD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> LINE_OPEN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>http请求报文中，每一行的数据由\r\n作为结束字符，空行只有\r\n，因此可以通过查找\r\n将报文拆解成单独的行进行解析。从状态机负责读取缓冲区中的数据，并将每行数据末尾的\r\n置为\0\0，然后更新从状态机在缓冲区中读取的位置m_checked_index，以此来驱动主状态机解析。</p>
<ul>
<li>从状态机从m_read_buf中逐字节读取，判断当前字节是否为\r<ul>
<li>接下来的字符是\n，将\r\n修改成\0\0，将m_checked_idx指向下一行的开头，则返回LINE_OK</li>
<li>接下来达到了buffer末尾，表示buffer还需要继续接收，返回LINE_OPEN</li>
<li>否则，表示语法错误，返回LINE_BAD</li>
</ul>
</li>
<li>当前字节不是\r，判断是否是\n（一般是上次读取到\r就到了buffer末尾，没有接收完整，再次接收时会出现这种情况）<ul>
<li>如果前一个字符是\r，则将\r\n修改成\0\0，将m_checked_idx指向下一行的开头，则返回LINE_OK</li>
</ul>
</li>
<li>当前字节既不是\r，也不是\n<ul>
<li>表示接收不完整，需要继续接收，返回LINE_OPEN</li>
</ul>
</li>
</ul>
<h3 id="解析http请求行函数"><a href="#解析http请求行函数" class="headerlink" title="解析http请求行函数"></a>解析http请求行函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::parse_request_line</span><span class="params">(<span class="type">char</span>* text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_url=<span class="built_in">strpbrk</span>(text,<span class="string">&quot; \t&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!m_url)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">    *m_url++=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="type">char</span>* method=text; </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcasecmp</span>(method,<span class="string">&quot;GET&quot;</span>)==<span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        m_method=GET;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcasecmp</span>(method,<span class="string">&quot;POST&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_method=POST;</span><br><span class="line">        cgi=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    m_url+=<span class="built_in">strspn</span>(m_url,<span class="string">&quot; \t&quot;</span>);</span><br><span class="line">    m_version=<span class="built_in">strpbrk</span>(m_url,<span class="string">&quot; \t&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!m_version)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">    *m_version++=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    m_version+=<span class="built_in">strspn</span>(m_version,<span class="string">&quot; \t&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcasecmp</span>(m_version,<span class="string">&quot;HTTP/1.1&quot;</span>)!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strncasecmp</span>(m_url,<span class="string">&quot;http://&quot;</span>,<span class="number">7</span>)==<span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        m_url+=<span class="number">7</span>;</span><br><span class="line">        m_url=<span class="built_in">strchr</span>(m_url,<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strncasecmp</span>(m_url,<span class="string">&quot;https://&quot;</span>,<span class="number">8</span>)==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_url+=<span class="number">8</span>;</span><br><span class="line">        m_url=<span class="built_in">strchr</span>(m_url,<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!m_url||m_url[<span class="number">0</span>]!=<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(m_url)==<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">strcat</span>(m_url,<span class="string">&quot;judge.html&quot;</span>); </span><br><span class="line">    m_check_state=CHECK_STATE_HEADER;</span><br><span class="line">    <span class="keyword">return</span> NO_REQUEST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主状态机初始状态是CHECK_STATE_REQUESTLINE，通过调用从状态机来驱动主状态机，在主状态机进行解析前，从状态机已经将每一行的末尾\r\n符号改为\0\0，以便于主状态机直接取出对应字符串进行处理。当主状态机处于初始状态CHECK_STATE_REQUESTLINE，调用parse_request_line函数解析请求行，解析函数从m_read_buf中解析HTTP请求行，获得请求方法、目标URL及HTTP版本号，解析完成后主状态机的状态变为CHECK_STATE_HEADER。</p>
<h3 id="解析http请求头函数"><a href="#解析http请求头函数" class="headerlink" title="解析http请求头函数"></a>解析http请求头函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::parse_headers</span><span class="params">(<span class="type">char</span>* text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(text[<span class="number">0</span>]==<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(m_content_length!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_check_state=CHECK_STATE_CONTENT;</span><br><span class="line">            <span class="keyword">return</span> NO_REQUEST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> GET_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strncasecmp</span>(text,<span class="string">&quot;Connection:&quot;</span>,<span class="number">11</span>)==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        text+=<span class="number">11</span>;</span><br><span class="line">        text+=<span class="built_in">strspn</span>(text,<span class="string">&quot; \t&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcasecmp</span>(text,<span class="string">&quot;keep-alive&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">            m_linger=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strncasecmp</span>(text,<span class="string">&quot;Content-length:&quot;</span>,<span class="number">15</span>)==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        text+=<span class="number">15</span>;</span><br><span class="line">        text+=<span class="built_in">strspn</span>(text,<span class="string">&quot; \t&quot;</span>);</span><br><span class="line">        m_content_length=<span class="built_in">atol</span>(text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strncasecmp</span>(text,<span class="string">&quot;Host:&quot;</span>,<span class="number">5</span>)==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        text+=<span class="number">5</span>;</span><br><span class="line">        text+=<span class="built_in">strspn</span>(text,<span class="string">&quot; \t&quot;</span>);</span><br><span class="line">        m_host=text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">LOG_INFO</span>(<span class="string">&quot;oop!unknow header: %s&quot;</span>,text);</span><br><span class="line">    <span class="keyword">return</span> NO_REQUEST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当主状态机处于CHECK_STATE_HEADER状态时，调用parse_headers函数解析请求头部信息。判断是空行还是请求头，若是空行，进而判断content-length是否为0，如果不是0，表明是POST请求，则状态转移到CHECK_STATE_CONTENT，否则说明是GET请求，则报文解析结束。若解析的是请求头部字段，则主要分析connection字段，content-length字段。connection字段判断是keep-alive还是close，决定是长连接还是短连接，content-length字段，这里用于读取post请求的消息体长度。</p>
<h3 id="解析http请求主体函数"><a href="#解析http请求主体函数" class="headerlink" title="解析http请求主体函数"></a>解析http请求主体函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::parse_content</span><span class="params">(<span class="type">char</span>* text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m_read_idx&gt;=(m_content_length+m_checked_idx))</span><br><span class="line">    &#123;</span><br><span class="line">        text[m_content_length]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        m_string=text;</span><br><span class="line">        <span class="keyword">return</span> GET_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> NO_REQUEST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当主状态机处于CHECK_STATE_CONTENT状态时，调用parse_content函数解析消息体，主要是保存post请求消息体，为后面的登录和注册做准备。</p>
<h3 id="处理http请求函数"><a href="#处理http请求函数" class="headerlink" title="处理http请求函数"></a>处理http请求函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::do_request</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(m_real_file,doc_root);</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">strlen</span>(doc_root);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* p=<span class="built_in">strrchr</span>(m_url,<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(cgi==<span class="number">1</span>&amp;&amp;(*(p+<span class="number">1</span>)==<span class="string">&#x27;2&#x27;</span>||*(p+<span class="number">1</span>)==<span class="string">&#x27;3&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> flag=m_url[<span class="number">1</span>];</span><br><span class="line">        <span class="type">char</span>* m_url_real=(<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>)*<span class="number">200</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(m_url_real,<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="built_in">strcat</span>(m_url_real,m_url+<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>(m_real_file+len,m_url_real,FILENAME_LEN-len<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">free</span>(m_url_real);</span><br><span class="line">        <span class="type">char</span> name[<span class="number">100</span>],password[<span class="number">100</span>];</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">5</span>;m_string[i]!=<span class="string">&#x27;&amp;&#x27;</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            name[i<span class="number">-5</span>]=m_string[i];</span><br><span class="line">        &#125;</span><br><span class="line">        name[i<span class="number">-5</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=i+<span class="number">10</span>;m_string[i]!=<span class="string">&#x27;\0&#x27;</span>;i++,j++)</span><br><span class="line">        &#123;</span><br><span class="line">            password[j]=m_string[i];</span><br><span class="line">        &#125;</span><br><span class="line">        password[j]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(*(p+<span class="number">1</span>)==<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span>* sql_insert=(<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>)*<span class="number">200</span>);</span><br><span class="line">            <span class="built_in">strcpy</span>(sql_insert,<span class="string">&quot;INSERT INTO user(username,passwd) VALUES(&quot;</span>);</span><br><span class="line">            <span class="built_in">strcat</span>(sql_insert,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">            <span class="built_in">strcat</span>(sql_insert,name);</span><br><span class="line">            <span class="built_in">strcat</span>(sql_insert,<span class="string">&quot;&#x27;, &#x27;&quot;</span>);</span><br><span class="line">            <span class="built_in">strcat</span>(sql_insert,password);</span><br><span class="line">            <span class="built_in">strcat</span>(sql_insert,<span class="string">&quot;&#x27;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(users.<span class="built_in">find</span>(name)==users.<span class="built_in">end</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                m_lock.<span class="built_in">lock</span>();</span><br><span class="line">                <span class="type">int</span> res=<span class="built_in">mysql_query</span>(mysql,sql_insert);</span><br><span class="line">                users.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string,string&gt;(name,password));</span><br><span class="line">                m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">                <span class="built_in">strcpy</span>(m_url,<span class="string">&quot;/log.html&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">strcpy</span>(m_url,<span class="string">&quot;/registerError.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(*(p+<span class="number">1</span>)==<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(users.<span class="built_in">find</span>(name)!=users.<span class="built_in">end</span>()&amp;&amp;users[name]==password)</span><br><span class="line">                <span class="built_in">strcpy</span>(m_url,<span class="string">&quot;/welcome.html&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">strcpy</span>(m_url,<span class="string">&quot;/logError.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(*(p+<span class="number">1</span>)==<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span>* m_url_real=(<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>)*<span class="number">200</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(m_url_real,<span class="string">&quot;/register.html&quot;</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>(m_real_file+len,m_url_real,<span class="built_in">strlen</span>(m_url_real));</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">free</span>(m_url_real);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(*(p+<span class="number">1</span>)==<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span>* m_url_real=(<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>)*<span class="number">200</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(m_url_real,<span class="string">&quot;/log.html&quot;</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>(m_real_file+len,m_url_real,<span class="built_in">strlen</span>(m_url_real));</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">free</span>(m_url_real);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(*(p+<span class="number">1</span>)==<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span>* m_url_real=(<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>)*<span class="number">200</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(m_url_real,<span class="string">&quot;/picture.html&quot;</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>(m_real_file+len,m_url_real,<span class="built_in">strlen</span>(m_url_real));</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">free</span>(m_url_real);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(*(p+<span class="number">1</span>)==<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span>* m_url_real=(<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>)*<span class="number">200</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(m_url_real,<span class="string">&quot;/video.html&quot;</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>(m_real_file+len,m_url_real,<span class="built_in">strlen</span>(m_url_real));</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">free</span>(m_url_real);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">strncpy</span>(m_real_file+len,m_url,FILENAME_LEN-len<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">stat</span>(m_real_file,&amp;m_file_stat)&lt;<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> NO_RESOURCE;</span><br><span class="line">    <span class="keyword">if</span>(!(m_file_stat.st_mode&amp;S_IROTH))</span><br><span class="line">        <span class="keyword">return</span> FORBIDDEN_REQUEST;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">S_ISDIR</span>(m_file_stat.st_mode)) </span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    <span class="type">int</span> fd=<span class="built_in">open</span>(m_real_file,O_RDONLY);</span><br><span class="line">    m_file_address=(<span class="type">char</span>*)<span class="built_in">mmap</span>(<span class="number">0</span>,m_file_stat.st_size,PROT_READ,MAP_PRIVATE,fd,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">close</span>(fd);</span><br><span class="line">    <span class="keyword">return</span> FILE_REQUEST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>process_read函数的返回值是对请求的文件分析后的结果，一部分是语法错误导致的BAD_REQUEST，一部分是do_request的返回结果。该函数将网站根目录和url文件拼接，然后通过stat判断该文件属性。另外，为了提高访问速度，通过mmap进行映射，将普通文件映射到内存逻辑地址。m_url为请求报文中解析出的请求资源，以&#x2F;开头，也就是&#x2F;XXX，项目中解析后的m_url有8种情况：</p>
<ul>
<li>GET请求，跳转到欢迎访问页面</li>
<li>0：POST请求，跳转到注册页面</li>
<li>1：POST请求，跳转到登录页面</li>
<li>2CGISQL.cgi：POST请求，进行登录校验，验证成功跳转到资源请求成功页面，失败则跳转到登录失败页面</li>
<li>3CGISQL.cgi：POST请求，进行注册校验，注册成功跳转到登录页面，失败则跳转到注册失败页面</li>
<li>5：POST请求，跳转到图片请求页面</li>
<li>6：POST请求，跳转到视频请求页面</li>
</ul>
<p>在解析http请求函数中已经保存了浏览器端用户输入的用户密码，在http请求处理函数中，提取出用户名和密码，然后判断是注册还是登录，如果是注册，先检测数据库中是否有重名，没有重名则直接增加数据，如果是登录，进行判断，若浏览器端输入的用户名和密码在表中可以查找到，返回1，否则返回0。</p>
<h3 id="写响应报文函数"><a href="#写响应报文函数" class="headerlink" title="写响应报文函数"></a>写响应报文函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::process_write</span><span class="params">(HTTP_CODE ret)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> INTERNAL_ERROR:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add_status_line</span>(<span class="number">500</span>,error_500_title);</span><br><span class="line">            <span class="built_in">add_headers</span>(<span class="built_in">strlen</span>(error_500_form));</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">add_content</span>(error_500_form))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> BAD_REQUEST:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add_status_line</span>(<span class="number">404</span>,error_400_title);</span><br><span class="line">            <span class="built_in">add_headers</span>(<span class="built_in">strlen</span>(error_400_form));</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">add_content</span>(error_400_form))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> FORBIDDEN_REQUEST:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add_status_line</span>(<span class="number">403</span>,error_403_title);</span><br><span class="line">            <span class="built_in">add_headers</span>(<span class="built_in">strlen</span>(error_403_form));</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">add_content</span>(error_403_form))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> FILE_REQUEST:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add_status_line</span>(<span class="number">200</span>,ok_200_title);</span><br><span class="line">            <span class="keyword">if</span>(m_file_stat.st_size!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">add_headers</span>(m_file_stat.st_size);</span><br><span class="line">                m_iv[<span class="number">0</span>].iov_base=m_write_buf;</span><br><span class="line">                m_iv[<span class="number">0</span>].iov_len=m_write_idx;</span><br><span class="line">                m_iv[<span class="number">1</span>].iov_base=m_file_address;</span><br><span class="line">                m_iv[<span class="number">1</span>].iov_len=m_file_stat.st_size;</span><br><span class="line">                m_iv_count=<span class="number">2</span>;</span><br><span class="line">                bytes_to_send=m_write_idx+m_file_stat.st_size;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">const</span> <span class="type">char</span>* ok_string=<span class="string">&quot;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>;</span><br><span class="line">                <span class="built_in">add_headers</span>(<span class="built_in">strlen</span>(ok_string));</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">add_content</span>(ok_string))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_iv[<span class="number">0</span>].iov_base=m_write_buf;</span><br><span class="line">    m_iv[<span class="number">0</span>].iov_len=m_write_idx;</span><br><span class="line">    m_iv_count=<span class="number">1</span>;</span><br><span class="line">    bytes_to_send=m_write_idx;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>响应报文分为两种，一种是请求文件的存在，通过io向量机制iovec，声明两个iovec，第一个指向m_write_buf，第二个指向mmap的地址m_file_address；一种是请求出错，这时候只申请一个iovec，指向m_write_buf。请求出错包括内部错误（500）、报文语法有误（404）、资源没有访问权限（403），请求文件存在则是文件存在（200）。该函数调用了三个写响应报文函数，add_status_line函数——添加状态行，add_headers——添加消息报头，add_content函数——添加文本。</p>
<h3 id="写状态行、消息报头函数"><a href="#写状态行、消息报头函数" class="headerlink" title="写状态行、消息报头函数"></a>写状态行、消息报头函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::add_status_line</span><span class="params">(<span class="type">int</span> status,<span class="type">const</span> <span class="type">char</span>* title)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add_response</span>(<span class="string">&quot;%s %d %s\r\n&quot;</span>,<span class="string">&quot;HTTP/1.1&quot;</span>,status,title);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::add_headers</span><span class="params">(<span class="type">int</span> content_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add_content_length</span>(content_len)&amp;&amp;<span class="built_in">add_linger</span>()&amp;&amp;<span class="built_in">add_blank_line</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::add_content</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* content)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add_response</span>(<span class="string">&quot;%s&quot;</span>,content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>add_headers函数接收报文长度为参数，内部又调用add_content_length函数（添加响应报文长度）、add_linger函数（添加通知状态，告诉浏览器端是保持连接或者关闭）、add_blank_line函数（添加空行）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::add_content_length</span><span class="params">(<span class="type">int</span> content_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add_response</span>(<span class="string">&quot;Content-Length:%d\r\n&quot;</span>,content_len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::add_linger</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add_response</span>(<span class="string">&quot;Connection:%s\r\n&quot;</span>,(m_linger==<span class="literal">true</span>)?<span class="string">&quot;keep-alive&quot;</span>:<span class="string">&quot;close&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::add_blank_line</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add_response</span>(<span class="string">&quot;%s&quot;</span>,<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上写http响应函数都调用同一个函数add_response，通过引入不同参数实现不同功能。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::add_response</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format,...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m_write_idx&gt;=WRITE_BUFFER_SIZE)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    va_list arg_list;</span><br><span class="line">    <span class="built_in">va_start</span>(arg_list,format);</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">vsnprintf</span>(m_write_buf+m_write_idx,WRITE_BUFFER_SIZE<span class="number">-1</span>-m_write_idx,format,arg_list);</span><br><span class="line">    <span class="keyword">if</span>(len&gt;=(WRITE_BUFFER_SIZE<span class="number">-1</span>-m_write_idx))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">va_end</span>(arg_list);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_write_idx+=len;</span><br><span class="line">    <span class="built_in">va_end</span>(arg_list);</span><br><span class="line">    <span class="built_in">LOG_INFO</span>(<span class="string">&quot;request:%s&quot;</span>,m_write_buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用add_response函数更新m_write_index指针和缓冲区m_write_buf中的内容。如果写入内容超出缓冲区大小则报错。将数据从可变参数写入缓冲区，返回写入数据的长度，如果写入的数据长度超过缓冲区剩余空间则报错，否则更新m_write_idx位置。</p>
<h3 id="服务器主线程写响应函数"><a href="#服务器主线程写响应函数" class="headerlink" title="服务器主线程写响应函数"></a>服务器主线程写响应函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::write</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(bytes_to_send==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">modfd</span>(m_epollfd,m_sockfd,EPOLLIN,m_TRIGMode);</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temp=<span class="built_in">writev</span>(m_sockfd,m_iv,m_iv_count);</span><br><span class="line">        <span class="keyword">if</span> (temp &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (errno == EAGAIN)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">modfd</span>(m_epollfd, m_sockfd, EPOLLOUT, m_TRIGMode);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">unmap</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bytes_have_send += temp;</span><br><span class="line">        bytes_to_send -= temp;</span><br><span class="line">        <span class="keyword">if</span> (bytes_have_send &gt;= m_iv[<span class="number">0</span>].iov_len)</span><br><span class="line">        &#123;</span><br><span class="line">            m_iv[<span class="number">0</span>].iov_len = <span class="number">0</span>;</span><br><span class="line">            m_iv[<span class="number">1</span>].iov_base = m_file_address + (bytes_have_send - m_write_idx);</span><br><span class="line">            m_iv[<span class="number">1</span>].iov_len = bytes_to_send;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_iv[<span class="number">0</span>].iov_base = m_write_buf + bytes_have_send;</span><br><span class="line">            m_iv[<span class="number">0</span>].iov_len = m_iv[<span class="number">0</span>].iov_len - bytes_have_send;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(bytes_to_send&lt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">unmap</span>();</span><br><span class="line">            <span class="built_in">modfd</span>(m_epollfd,m_sockfd,EPOLLIN,m_TRIGMode);</span><br><span class="line">            <span class="keyword">if</span>(m_linger)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">init</span>();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务器子线程调用process_write完成响应报文，随后注册epollout事件，服务器主线程检测写事件，并调用http_conn::write函数将响应报文发送给浏览器端。在生成响应报文时初始化byte_to_send，包括头部信息和文件数据大小。通过writev函数循环发送响应报文数据，根据返回值更新byte_have_send和iovec结构体的指针和长度，并判断响应报文整体是否发送成功。</p>
<ul>
<li>若writev单次发送成功，更新byte_to_send和byte_have_send的大小，若响应报文整体发送成功，则取消mmap映射，并判断是否是长连接；<ul>
<li>长连接重置http类实例，注册读事件，不关闭连接；</li>
<li>短连接直接关闭连接；</li>
</ul>
</li>
<li>若writev单次发送不成功，判断是否是写缓冲区满了；<ul>
<li>若不是因为缓冲区满了而失败，取消mmap映射，关闭连接；</li>
<li>若eagain则满了，更新iovec结构体的指针和长度，并注册写事件，等待下一次写事件触发（当写缓冲区从不可写变为可写，触发epollout），因此在此期间无法立即接收到同一用户的下一请求，但可以保证连接的完整性。</li>
</ul>
</li>
</ul>
<h3 id="http工作函数"><a href="#http工作函数" class="headerlink" title="http工作函数"></a>http工作函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">http_conn::process</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HTTP_CODE read_ret=<span class="built_in">process_read</span>();</span><br><span class="line">    <span class="keyword">if</span>(read_ret==NO_REQUEST)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">modfd</span>(m_epollfd,m_sockfd,EPOLLIN,m_TRIGMode);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> write_ret=<span class="built_in">process_write</span>(read_ret);</span><br><span class="line">    <span class="keyword">if</span>(!write_ret)</span><br><span class="line">        <span class="built_in">close_conn</span>();</span><br><span class="line">    <span class="built_in">modfd</span>(m_epollfd,m_sockfd,EPOLLOUT,m_TRIGMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>http类对象的工作函数，先调用process_read函数读取http请求，当请求不完整则需要继续接收请求数据，注册并监听读事件。如果请求完整则调用process_write完成报文响应，最后注册并监听写事件。</p>
]]></content>
      <categories>
        <category>webserver</category>
      </categories>
      <tags>
        <tag>学习日志</tag>
        <tag>http处理类</tag>
      </tags>
  </entry>
  <entry>
    <title>master模块</title>
    <url>/2022/05/20/master%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><p>master模块是分布式缓存系统的管理中心，需要同时与多个client和cache server交互，并且根据接收到的数据进行不同的逻辑处理。在master主函数中，新建多个线程分别处理不同的业务：接收来自cache server的心跳包和client的指令，并做出相应处理；检测cache心跳包计数是否持续增加；向从master定时发送心跳包。<br><a href="https://imgtu.com/i/XKcfHI"><img src="https://s1.ax1x.com/2022/05/28/XKcfHI.png" alt="master模块"></a></p>
<span id="more"></span>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="master数据收发"><a href="#master数据收发" class="headerlink" title="master数据收发"></a>master数据收发</h3><p>采用socket编程、epoll函数IO多路复用功能和多线程编程，在master端实时监听前来建立连接的client和cache server。其中client需要与master建立通信，请求最新的cache列表，而cache则定时向master发送心跳包。<br><a href="https://imgtu.com/i/XKcAtf"><img src="https://s1.ax1x.com/2022/05/28/XKcAtf.png" alt="epoll通信"></a></p>
<h3 id="cache心跳包检测"><a href="#cache心跳包检测" class="headerlink" title="cache心跳包检测"></a>cache心跳包检测</h3><p>master端维护了已建立连接的cache server列表，根据cache server会定时循环向master发送心跳包的特点，内部维护一个unordered_map结构，接收到cache心跳包时，便计数+1。因此可以比较在经过一段时候后，cache server列表的心跳包计数是否都有所增加，以此判断cache的存活状态，若计数不再增加可判断其已关闭，从cache server列表中删除此服务器，并通知其它服务器更新数据。</p>
<h3 id="master容灾"><a href="#master容灾" class="headerlink" title="master容灾"></a>master容灾</h3><p>设计主master和从master，主master定时循环向从master发送心跳包，从master通过对心跳包计数以判断主master存活情况，当其故障时，从master接替工作，并通知cache server列表中的所有服务器。</p>
<h2 id="核心代码分析"><a href="#核心代码分析" class="headerlink" title="核心代码分析"></a>核心代码分析</h2><h3 id="cache心跳包检测-1"><a href="#cache心跳包检测-1" class="headerlink" title="cache心跳包检测"></a>cache心跳包检测</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="title">heartstate</span><span class="params">(<span class="type">void</span>*)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cachestatemap.<span class="built_in">size</span>()&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            precachestatemap=cachestatemap;</span><br><span class="line">            <span class="built_in">delayms</span>(<span class="number">1500</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> it=cachestatemap.<span class="built_in">begin</span>();it!=cachestatemap.<span class="built_in">end</span>();it++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">auto</span> itt=precachestatemap.<span class="built_in">find</span>(it-&gt;first);</span><br><span class="line">                <span class="keyword">if</span>(itt!=precachestatemap.<span class="built_in">end</span>())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(it-&gt;second&lt;=itt-&gt;second)</span><br><span class="line">                    &#123;</span><br><span class="line">                        psshutport=it-&gt;first;</span><br><span class="line">                        psshutip=heartip;</span><br><span class="line">                        <span class="keyword">if</span>(passive_shutdown_flag==<span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span>(psshutport!=shutport)</span><br><span class="line">                                passive_shutdown_flag=<span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(it-&gt;second&gt;<span class="number">1000</span>)</span><br><span class="line">                        it-&gt;second=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立cachestatemap维护cache心跳包的计算，循环检测，延时1.5后，所有cache的心跳包计数是否有所增加，若未增加时，判断其已被动关闭,此时将passive_shutdown_flag标志置1，并将被动关闭的cache服务器的IP和port保存至psshutport和psshutip中，供后续逻辑处理流程使用。</p>
<h3 id="master容灾-1"><a href="#master容灾-1" class="headerlink" title="master容灾"></a>master容灾</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="title">masterupdata</span><span class="params">(<span class="type">void</span>*)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    json heartbeat_json;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv_addr;</span><br><span class="line">    <span class="built_in">signal</span>(SIGPIPE,SIG_IGN);</span><br><span class="line">    <span class="built_in">bzero</span>(&amp;serv_addr,<span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line">    <span class="type">socklen_t</span> serv_addr_len;</span><br><span class="line">    serv_addr.sin_family=AF_INET;</span><br><span class="line">    <span class="built_in">inet_pton</span>(AF_INET,SPAREMASTER_IP,&amp;serv_addr.sin_addr.s_addr);</span><br><span class="line">    serv_addr.sin_port=<span class="built_in">htons</span>(SPAREMASTER_PORT);</span><br><span class="line">    <span class="type">int</span> cfd=<span class="built_in">Socket_connect</span>(<span class="literal">true</span>,(<span class="keyword">struct</span> sockaddr*)&amp;serv_addr,<span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        heartbeat_json=<span class="built_in">updatamaster</span>();</span><br><span class="line">        string buf=heartbeat_json.<span class="built_in">dump</span>();</span><br><span class="line">        buf+=<span class="string">&quot;\0&quot;</span>;</span><br><span class="line">        n=<span class="built_in">Write</span>(cfd,(<span class="type">char</span>*)buf.<span class="built_in">data</span>(),buf.<span class="built_in">length</span>());</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">0</span>)</span><br><span class="line">            cfd=<span class="built_in">Socket_connect</span>(<span class="literal">false</span>,(<span class="keyword">struct</span> sockaddr*)&amp;serv_addr,<span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line">        <span class="built_in">delayms</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">masterstate</span><span class="params">(<span class="type">void</span>*)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(master_recovery==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(masterstatemap.<span class="built_in">size</span>()&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            premasterstatemap=masterstatemap;</span><br><span class="line">            <span class="built_in">delayms</span>(<span class="number">1500</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> iter = masterstatemap.<span class="built_in">begin</span>(); iter != masterstatemap.<span class="built_in">end</span>(); iter++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">auto</span> iterr = premasterstatemap.<span class="built_in">find</span>(iter-&gt;first);</span><br><span class="line">                <span class="keyword">if</span>(iterr!=premasterstatemap.<span class="built_in">end</span>())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(iter-&gt;second &lt;= iterr-&gt;second)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;IPportlist.<span class="built_in">size</span>();i++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            string IPnow=IPportlist[i].<span class="built_in">substr</span>(<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">                            string Portnow=IPportlist[i].<span class="built_in">substr</span>(<span class="number">10</span>,<span class="number">4</span>);</span><br><span class="line">                            <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv_addr;</span><br><span class="line">                            <span class="type">socklen_t</span> serv_addr_len;</span><br><span class="line">                            <span class="built_in">signal</span>(SIGPIPE, SIG_IGN);</span><br><span class="line">                            <span class="built_in">bzero</span>(&amp;serv_addr,<span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line">                            serv_addr.sin_family = AF_INET;</span><br><span class="line">                            <span class="built_in">inet_pton</span>(AF_INET, IPnow.<span class="built_in">c_str</span>(), &amp;serv_addr.sin_addr.s_addr);</span><br><span class="line">                            serv_addr.sin_port = <span class="built_in">htons</span>(<span class="built_in">atoi</span>(Portnow.<span class="built_in">c_str</span>()));</span><br><span class="line">                            <span class="type">int</span> cfd = <span class="built_in">Socket_connect</span>(<span class="literal">true</span>, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line">                            <span class="type">int</span> flags=<span class="built_in">fcntl</span>(cfd,F_GETFL,<span class="number">0</span>);</span><br><span class="line">                            <span class="built_in">fcntl</span>(cfd,F_SETFL,flags|O_NONBLOCK);</span><br><span class="line">                            string buf1 = <span class="built_in">refreshmaster</span>().<span class="built_in">dump</span>();</span><br><span class="line">                            buf1+=<span class="string">&quot;\0&quot;</span>;</span><br><span class="line">                            <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">                            n = <span class="built_in">Write</span>(cfd, (<span class="type">char</span> *)buf1.<span class="built_in">data</span>(), buf1.<span class="built_in">length</span>()+<span class="number">1</span>);</span><br><span class="line">                            <span class="keyword">while</span>(n&lt;<span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                cfd = <span class="built_in">Socket_connect</span>(<span class="literal">false</span>, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line">                                n = <span class="built_in">Write</span>(cfd, (<span class="type">char</span> *)buf1.<span class="built_in">data</span>(), buf1.<span class="built_in">length</span>()+<span class="number">1</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="built_in">Close</span>(cfd);</span><br><span class="line">                        &#125;</span><br><span class="line">                        IPportlist.<span class="built_in">clear</span>();</span><br><span class="line">                        master_recovery=<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主master模块创建新线程运行masterupdata函数，定时循环向从master发送心跳包。从master模块创建新线程运行masterstate函数，通过维护masterstatemap结构对主master心跳包计数，延时1.5s，判断心跳包计数是否有所增加，当未增加，判断此时主master已故障，因此遍历cache server列表，向内所有服务器发送类型为REFLESH_MASTER的json数据包，通知更新master的IP地址和端口号。</p>
<h3 id="master逻辑处理"><a href="#master逻辑处理" class="headerlink" title="master逻辑处理"></a>master逻辑处理</h3><h4 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> openmax=<span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> buf[BUFSIZ],str[openmax];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> saddr,caddr;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">epoll_event</span> tep,ep[openmax];</span><br><span class="line"><span class="type">int</span> listen_num=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> server_fd=<span class="built_in">Socket</span>(AF_INET,SOCK_STREAM,<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> opt=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">setsockopt</span>(server_fd,SOL_SOCKET,SO_REUSEADDR,&amp;opt,<span class="built_in">sizeof</span>(opt));</span><br><span class="line"><span class="built_in">bzero</span>(&amp;saddr,<span class="built_in">sizeof</span>(saddr));</span><br><span class="line">saddr.sin_family=AF_INET;</span><br><span class="line">saddr.sin_port=<span class="built_in">htons</span>(MASTER_PORT);</span><br><span class="line">saddr.sin_addr.s_addr=<span class="built_in">inet_addr</span>(MASTER_IP);</span><br><span class="line"><span class="type">int</span> ret=<span class="built_in">Bind</span>(server_fd,(<span class="keyword">struct</span> sockaddr*)&amp;saddr,<span class="built_in">sizeof</span>(saddr));</span><br><span class="line">ret=<span class="built_in">Listen</span>(server_fd,listen_num);</span><br><span class="line"><span class="type">int</span> efd=<span class="built_in">Epoll_create</span>(openmax);</span><br><span class="line">tep.events=EPOLLIN|EPOLLET;</span><br><span class="line">tep.data.fd=server_fd;</span><br><span class="line"><span class="type">int</span> res=<span class="built_in">Epoll_ctl</span>(efd,EPOLL_CTL_ADD,server_fd,&amp;tep);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;等待客户端连接...&quot;</span>&lt;&lt;endl;</span><br></pre></td></tr></table></figure>
<p>通过socket、bind、listen函数创建socket套接字，并将其加入epoll函数，监听事件发生。</p>
<h4 id="新连接接入"><a href="#新连接接入" class="headerlink" title="新连接接入"></a>新连接接入</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(ep[i].data.fd==server_fd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">socklen_t</span> clilen=<span class="built_in">sizeof</span>(caddr);</span><br><span class="line">    <span class="type">int</span> client_fd=<span class="built_in">Accept</span>(server_fd,(<span class="keyword">struct</span> sockaddr*)&amp;caddr,&amp;clilen);</span><br><span class="line">    <span class="keyword">auto</span> flag=<span class="built_in">fcntl</span>(client_fd,F_GETFL);</span><br><span class="line">    <span class="built_in">fcntl</span>(client_fd,F_SETFL,flag|O_NONBLOCK);</span><br><span class="line">    tep.events=EPOLLIN|EPOLLOUT|EPOLLET;</span><br><span class="line">    tep.data.fd=client_fd;</span><br><span class="line">    res=<span class="built_in">Epoll_ctl</span>(efd,EPOLL_CTL_ADD,client_fd,&amp;tep);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当监听事件文件描述符有IO响应时，代表有新连接（cache server或者client）接入，此时调用accept函数接收对端连接，并将其加入epoll函数中监听。</p>
<h4 id="逻辑处理"><a href="#逻辑处理" class="headerlink" title="逻辑处理"></a>逻辑处理</h4><ul>
<li>类型为DISTRIBUTION_REQUEST时，代表是client发来的拉取cache分布请求，master则调用Distributionresquest函数，其内部向client发送类型为DISTRIBUTION_RESPOND的json数据包，包含了master维护的cache server列表。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(info[<span class="string">&quot;type&quot;</span>]==DISTRIBUTION_REQUEST)</span><br><span class="line">    <span class="built_in">Distributionresquest</span>(sockfd);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Distributionresquest</span><span class="params">(<span class="type">int</span> clie_fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pthread_rwlock_rdlock</span>(&amp;rw_lock);</span><br><span class="line">    json data,listip;</span><br><span class="line">    vector&lt;string&gt; dataip;</span><br><span class="line">    <span class="type">int</span> size=IPportlist.<span class="built_in">size</span>();</span><br><span class="line">    listip[<span class="string">&quot;type&quot;</span>]=DISTRIBUTION_RESPOND;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dataip.<span class="built_in">push_back</span>(IPportlist[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    data[<span class="string">&quot;iplist&quot;</span>]=dataip;</span><br><span class="line">    listip[<span class="string">&quot;data&quot;</span>]=data;</span><br><span class="line">    string str_out=listip.<span class="built_in">dump</span>();</span><br><span class="line">    str_out+=<span class="string">&quot;\0&quot;</span>;</span><br><span class="line">    <span class="built_in">Write</span>(clie_fd,(<span class="type">char</span>*)str_out.<span class="built_in">data</span>(),str_out.<span class="built_in">length</span>()+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">pthread_rwlock_unlock</span>(&amp;rw_lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>类型为SHUTDOWN_CACHE时，代表是接收到的主动关闭cache服务器指令，此时将json数据包内需要关闭的cache列表保存到shutipnow和shutportnow结构中，并将相关标志位置1。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(info[<span class="string">&quot;type&quot;</span>]==SHUTDOWN_CACHE)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;string&gt; userdata=info[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;iplist&quot;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;userdata.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ipport_pair temp=<span class="built_in">get_ipport</span>(userdata[i]);</span><br><span class="line">        shutipnow.<span class="built_in">push_back</span>(temp.ip);</span><br><span class="line">        shutportnow.<span class="built_in">push_back</span>(<span class="built_in">to_string</span>(temp.port));</span><br><span class="line">    &#125;</span><br><span class="line">    shut_cache_size=shutportnow.<span class="built_in">size</span>();</span><br><span class="line">    cache_shutdown=<span class="number">1</span>;</span><br><span class="line">    cache_shutdown_type=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>类型为HEART_BEAT时，代表接收到了cache的心跳包，此时将心跳包的地址、状态保存下来，将心跳包计数+1，如果状态为false，则表示该cache主动关闭，将cache_shutdown_type标志置2。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(info[<span class="string">&quot;type&quot;</span>]==HEART_BEAT)</span><br><span class="line">&#123;</span><br><span class="line">    string heartdata=info[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;iplist&quot;</span>];</span><br><span class="line">    <span class="type">bool</span> heartstate=info[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;state&quot;</span>];</span><br><span class="line">    ipport_pair temp=<span class="built_in">get_ipport</span>(heartdata);</span><br><span class="line">    heartip=temp.ip;</span><br><span class="line">    heartport=<span class="built_in">to_string</span>(temp.port);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> it=cachestatemap.<span class="built_in">find</span>(heartport);</span><br><span class="line">    <span class="keyword">if</span>(it!=cachestatemap.<span class="built_in">end</span>())</span><br><span class="line">        (it-&gt;second++);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(heartstate==<span class="literal">false</span>)</span><br><span class="line">        cache_shutdown_type=<span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>通过cache_shutdown_type标志判断是否需要关闭发送此心跳包的cache服务器，当标志为1时，表示处于主动关闭状态，判断cache地址是否出现在主动关闭cache列表中，如果出现，则将其保存在shutport和shutip中；当标志为2时，表示处于被动关闭状态，此时直接将cache地址保存在shutport和shutip中。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(cache_shutdown_type==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> it1=<span class="built_in">find</span>(shutportnow.<span class="built_in">begin</span>(),shutportnow.<span class="built_in">end</span>(),heartport);</span><br><span class="line">    <span class="keyword">if</span>(it1!=shutportnow.<span class="built_in">end</span>())</span><br><span class="line">        shutport=*it1;</span><br><span class="line">    <span class="keyword">auto</span> it2=<span class="built_in">find</span>(shutipnow.<span class="built_in">begin</span>(),shutipnow.<span class="built_in">end</span>(),heartip);</span><br><span class="line">    <span class="keyword">if</span>(it2!=shutipnow.<span class="built_in">end</span>())</span><br><span class="line">        shutip=*it2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(cache_shutdown_type==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    shutport=heartport;</span><br><span class="line">    shutip=heartip;</span><br><span class="line">    cache_shutdown=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在portlist中寻找，判断心跳包的cache是否出现过，如果未出现过，还要判断是否出现在主动关闭cache列表中，防止待关闭的cache发生重连现象。当它出现在主动关闭cache列表中时，将cache_shutdown_type标志置1，后续对标志进行判断，如果为0时，将cache地址加入到维护的各类列表中；标志为1时，重置标志后不做其它处理。<br><a href="https://imgtu.com/i/XK2ZLj"><img src="https://s1.ax1x.com/2022/05/28/XK2ZLj.png" alt="cache扩容"></a><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> result=<span class="built_in">find</span>(Portlist.<span class="built_in">begin</span>(),Portlist.<span class="built_in">end</span>(),<span class="built_in">atoi</span>(heartport.<span class="built_in">c_str</span>()));</span><br><span class="line"><span class="keyword">if</span>(result==Portlist.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(reconnect_count&lt;reconnect_maxnum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> itt=<span class="built_in">find</span>(shutportnow.<span class="built_in">begin</span>(),shutportnow.<span class="built_in">end</span>(),heartport);</span><br><span class="line">        <span class="keyword">if</span>(itt!=shutportnow.<span class="built_in">end</span>())</span><br><span class="line">            cache_shutdown_done=<span class="number">1</span>;</span><br><span class="line">        reconnect_count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cache_shutdown_done=<span class="number">0</span>;</span><br><span class="line">        reconnect_count=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span>(cache_shutdown_done)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            IPlist.<span class="built_in">push_back</span>(heartip);</span><br><span class="line">            Portlist.<span class="built_in">push_back</span>(<span class="built_in">atoi</span>(heartport.<span class="built_in">c_str</span>()));</span><br><span class="line">            IPportlist.<span class="built_in">push_back</span>(heartdata);</span><br><span class="line">            cachemap.<span class="built_in">emplace</span>(heartport,<span class="number">0</span>);</span><br><span class="line">            cachemapshut.<span class="built_in">emplace</span>(heartport,<span class="number">0</span>);</span><br><span class="line">            cachestatemap.<span class="built_in">emplace</span>(heartport,<span class="number">0</span>);</span><br><span class="line">            masterupdatemap.<span class="built_in">emplace</span>(heartport,<span class="number">0</span>);</span><br><span class="line">            expan_flag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            cache_shutdown_done=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>当expan_flag标志为1时，表示有新cache加入，需要向其发送更新节点信息，查找cache地址是否出现在cachemap中，当出现并且计数为0时，向其发送更新节点信息，并将计数置1，然后增加cache_flesh_count计数，但计数等于cachemap大小时，表示已向所有节点发送更新信息，然后将expan_flag标志置0，cache_flesh_count计数归0，然后重置cachemap中所有cache计数。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(expan_flag==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;string&gt;().<span class="built_in">swap</span>(shutportnow);</span><br><span class="line">    <span class="built_in">vector</span>&lt;string&gt;().<span class="built_in">swap</span>(shutipnow);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> it=cachemap.<span class="built_in">find</span>(heartport);</span><br><span class="line">    <span class="keyword">if</span>(it!=cachemap.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(it-&gt;second==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            it-&gt;second=<span class="number">1</span>;</span><br><span class="line">            cache_flesh_count++;</span><br><span class="line">            <span class="built_in">refreship</span>(sockfd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cache_flesh_count==cachemap.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        expan_flag=<span class="number">0</span>;</span><br><span class="line">        cache_flesh_count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; v:cachemap)</span><br><span class="line">            v.second=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>当cache地址等于待关闭cache地址且cache_shutdown_type标志为1时，代表此时cache在主动关闭cache列表中，此时将其地址从各类列表中删除，然后调用refreship函数向其关闭节点命令，并且计数。当计数等于主动关闭cache列表大小时，代表所有主动关闭cache均已关闭，此时将相关标志位重置。<br><a href="https://imgtu.com/i/XKR3Nt"><img src="https://s1.ax1x.com/2022/05/28/XKR3Nt.png" alt="cache主动缩容"></a><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(shutport==heartport&amp;&amp;cache_shutdown==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it=IPlist.<span class="built_in">begin</span>();it!=IPlist.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*it==shutip) </span><br><span class="line">        &#123;</span><br><span class="line">            IPlist.<span class="built_in">erase</span>(it);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it=Portlist.<span class="built_in">begin</span>();it!=Portlist.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*it==<span class="built_in">atoi</span>(shutport.<span class="built_in">c_str</span>()))</span><br><span class="line">        &#123;</span><br><span class="line">            Portlist.<span class="built_in">erase</span>(it);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it=IPportlist.<span class="built_in">begin</span>();it!=IPportlist.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*it==heartdata)</span><br><span class="line">        &#123;</span><br><span class="line">            IPportlist.<span class="built_in">erase</span>(it);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> it1=cachemap.<span class="built_in">find</span>(heartport);</span><br><span class="line">    <span class="keyword">if</span>(it1!=cachemap.<span class="built_in">end</span>())</span><br><span class="line">        cachemap.<span class="built_in">erase</span>(it1);</span><br><span class="line">    <span class="keyword">auto</span> it2=cachemapshut.<span class="built_in">find</span>(heartport);</span><br><span class="line">    <span class="keyword">if</span>(it2!=cachemapshut.<span class="built_in">end</span>())</span><br><span class="line">        cachemapshut.<span class="built_in">erase</span>(it2);</span><br><span class="line">    <span class="keyword">auto</span> it3=cachestatemap.<span class="built_in">find</span>(heartport);</span><br><span class="line">    <span class="keyword">if</span>(it3!=cachestatemap.<span class="built_in">end</span>())</span><br><span class="line">        cachestatemap.<span class="built_in">erase</span>(it3);</span><br><span class="line">    <span class="keyword">auto</span> it4=precachestatemap.<span class="built_in">find</span>(heartport);</span><br><span class="line">    <span class="keyword">if</span>(it4!=precachestatemap.<span class="built_in">end</span>())</span><br><span class="line">        precachestatemap.<span class="built_in">erase</span>(it4);</span><br><span class="line">    <span class="keyword">auto</span> it5=masterupdatemap.<span class="built_in">find</span>(heartport);</span><br><span class="line">    <span class="keyword">if</span>(it5!=masterupdatemap.<span class="built_in">end</span>())</span><br><span class="line">        masterupdatemap.<span class="built_in">erase</span>(it5);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">refreship</span>(sockfd);</span><br><span class="line">    cache_shutdown_count++;</span><br><span class="line">    flag8=<span class="number">1</span>;</span><br><span class="line">    reconnect_maxnum=<span class="number">20</span>;</span><br><span class="line">    shutport=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    shutip=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>((cache_shutdown_type==<span class="number">1</span>||cache_shutdown_type==<span class="number">2</span>)&amp;&amp;(cache_shutdown_count==shut_cache_size&amp;&amp;flag8==<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cache_shutdown_count=<span class="number">0</span>;</span><br><span class="line">        cache_shutdown=<span class="number">0</span>;</span><br><span class="line">        allcache_shutdown_down=<span class="number">1</span>;</span><br><span class="line">        cache_shutdown_done=<span class="number">1</span>;</span><br><span class="line">        cache_shutdown_type=<span class="number">0</span>;</span><br><span class="line">        flag8=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>当passive_shutdown_flag标志为1时，表示此时cache进入被动关闭状态，将其地址从各类列表中删除。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(passive_shutdown_flag==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it=IPlist.<span class="built_in">begin</span>();it!=IPlist.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*it==psshutip)</span><br><span class="line">        &#123;</span><br><span class="line">            IPlist.<span class="built_in">erase</span>(it);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it=Portlist.<span class="built_in">begin</span>();it!=Portlist.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*it==<span class="built_in">atoi</span>(psshutport.<span class="built_in">c_str</span>()))</span><br><span class="line">        &#123;</span><br><span class="line">            Portlist.<span class="built_in">erase</span>(it);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    string temp=psshutip+<span class="string">&quot;:&quot;</span>+psshutport;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it=IPportlist.<span class="built_in">begin</span>();it!=IPportlist.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*it==temp)</span><br><span class="line">        &#123;</span><br><span class="line">            IPportlist.<span class="built_in">erase</span>(it);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> it1=cachemap.<span class="built_in">find</span>(psshutport);</span><br><span class="line">    <span class="keyword">if</span>(it1!=cachemap.<span class="built_in">end</span>())</span><br><span class="line">        cachemap.<span class="built_in">erase</span>(it1);</span><br><span class="line">    <span class="keyword">auto</span> it2=cachemapshut.<span class="built_in">find</span>(psshutport);</span><br><span class="line">    <span class="keyword">if</span>(it2!=cachemapshut.<span class="built_in">end</span>())</span><br><span class="line">        cachemapshut.<span class="built_in">erase</span>(it2);</span><br><span class="line">    <span class="keyword">auto</span> it3=cachestatemap.<span class="built_in">find</span>(psshutport);</span><br><span class="line">    <span class="keyword">if</span>(it3!=cachestatemap.<span class="built_in">end</span>())</span><br><span class="line">        cachestatemap.<span class="built_in">erase</span>(it3);</span><br><span class="line">    <span class="keyword">auto</span> it4=precachestatemap.<span class="built_in">find</span>(psshutport);</span><br><span class="line">    <span class="keyword">if</span>(it4!=precachestatemap.<span class="built_in">end</span>())</span><br><span class="line">        precachestatemap.<span class="built_in">erase</span>(it4);</span><br><span class="line">    <span class="keyword">auto</span> it5=masterupdatemap.<span class="built_in">find</span>(psshutport);</span><br><span class="line">    <span class="keyword">if</span>(it5!=masterupdatemap.<span class="built_in">end</span>())</span><br><span class="line">        masterupdatemap.<span class="built_in">erase</span>(it5);</span><br><span class="line"></span><br><span class="line">    allcache_shutdown_down=<span class="number">1</span>;</span><br><span class="line">    cache_shutdown_done=<span class="number">1</span>;</span><br><span class="line">    reconnect_maxnum=<span class="number">20</span>;</span><br><span class="line">    flag8=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>当allcache_shutdown_done标志为1时，表示所有需要关闭的cache服务均已关闭，此时需要向其它cache服务器发送刷新节点命令，通过cachemapshut结构保存是否发送标志，未发送置将标志置1，计数增加后调用refleship函数向其发送刷新列表指令，当计数等于cachemapshut结构大小时，表示发送完毕，此时重置相关标志位。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(allcache_shutdown_down==<span class="number">1</span>&amp;&amp;flag8==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> it=cachemapshut.<span class="built_in">find</span>(heartport);</span><br><span class="line">    <span class="keyword">if</span>(it!=cachemapshut.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(it-&gt;second==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            it-&gt;second=<span class="number">1</span>;</span><br><span class="line">            num2++;</span><br><span class="line">            <span class="built_in">refreship</span>(sockfd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(num2==cachemapshut.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        allcache_shutdown_down=<span class="number">0</span>;</span><br><span class="line">        passive_shutdown_flag=<span class="number">0</span>;</span><br><span class="line">        num2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; v:cachemapshut)</span><br><span class="line">            v.second=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>分布式缓存</category>
      </categories>
      <tags>
        <tag>学习日志</tag>
        <tag>master</tag>
      </tags>
  </entry>
  <entry>
    <title>一致性哈希</title>
    <url>/2022/05/06/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/</url>
    <content><![CDATA[<h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><p>对于一个分布式key-value型缓存系统，某个key应该到哪个或者哪些节点上获得，应该是确定的。哈希算法可以保证对同一个关键字进行哈希计算，每次计算都是相同的值，这样就可以将某个key确定到一个节点上，但是如果节点数量发生了变化，也就是在对系统做扩容或者缩容时，必须迁移改变了映射关系的数据。然而哈希算法在面对节点数量变化时，最坏情况下所有数据都需要迁移，成本高。因此需要采用一致性哈希算法，与哈希算法的不同之处在于，哈希算法是对节点的数量进行取模计算，而一致性哈希算法是对2^32进行取模运算。<br><a href="https://imgtu.com/i/XmwHTH"><img src="https://s1.ax1x.com/2022/05/27/XmwHTH.png" alt="哈希环"></a></p>
<span id="more"></span>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="一致性哈希理论"><a href="#一致性哈希理论" class="headerlink" title="一致性哈希理论"></a>一致性哈希理论</h3><ul>
<li>把对2^32进行取模运算的结果值组织成一个圆环，可以把这个圆想象成由2^32个点组成的圆（下图a）。</li>
<li>对存储节点进行哈希计算，例如根据节点的IP地址进行哈希（下图b）；当对数据进行存储或访问时，对数据进行哈希映射，根据映射的结果值往顺时针的方向找到第一个节点，就是存储该数据的节点（下图c）。</li>
<li>当增加（下图d）或者移除（下图e）一个节点时，仅影响该节点在哈希环上顺时针相邻的后继节点，其它数据不会受到影响。</li>
</ul>
<p><a href="https://imgtu.com/i/XmDCJs"><img src="https://s1.ax1x.com/2022/05/27/XmDCJs.png" alt="一致性哈希理论"></a></p>
<h3 id="虚拟结点"><a href="#虚拟结点" class="headerlink" title="虚拟结点"></a>虚拟结点</h3><p>一致性哈希算法并不保证节点能够在哈希环上分布均匀，这样就会带来一个问题，会有大量的请求集中在一个节点上（下图左），在这种节点分布不均匀的情况下，进行容灾与扩容时，哈希环上的相邻节点容易受到过大影响，容易发生雪崩式的连锁反应。<br>因此要想解除节点在哈希环上分配不均匀的问题，就是要有大量的节点，当实际上我们没有那么多节点，所以需要加入虚拟节点，也就是对一个真实节点做多个副本。具体做法是，不再将真实节点映射到哈希环上，而是将虚拟节点映射到哈希环上（下图右），并将虚拟节点映射到实际节点。</p>
<p><a href="https://imgtu.com/i/Xms8aD"><img src="https://s1.ax1x.com/2022/05/27/Xms8aD.png" alt="虚拟结点"></a></p>
<h2 id="核心代码分析"><a href="#核心代码分析" class="headerlink" title="核心代码分析"></a>核心代码分析</h2><h3 id="GETHash函数"><a href="#GETHash函数" class="headerlink" title="GETHash函数"></a>GETHash函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">ConsistentHash::GETHash</span><span class="params">(string key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> p=<span class="number">16777619</span>;</span><br><span class="line">    <span class="type">uint32_t</span> hash=<span class="number">2166136261</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> index=<span class="number">0</span>;index&lt;key.<span class="built_in">size</span>();index++)</span><br><span class="line">    &#123;</span><br><span class="line">        hash=(hash^key[index])*p;</span><br><span class="line">    &#125;</span><br><span class="line">    hash+=hash&lt;&lt;<span class="number">13</span>;</span><br><span class="line">    hash^=hash&gt;&gt;<span class="number">7</span>;</span><br><span class="line">    hash+=hash&lt;&lt;<span class="number">3</span>;</span><br><span class="line">    hash^=hash&gt;&gt;<span class="number">17</span>;</span><br><span class="line">    hash+=hash&lt;&lt;<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">if</span>(hash&lt;<span class="number">0</span>)</span><br><span class="line">        hash=-hash;</span><br><span class="line">    <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>采用的32位Fowler-Noll-Vo算法,将Cache Server的地址端口以及key映射到环上的哈希算法。该算法能快速哈希大量数据并保持较小的冲突率，具有高度分散性，使得它适用于处理一些非常相近的字符串。</p>
<h3 id="构造哈希环"><a href="#构造哈希环" class="headerlink" title="构造哈希环"></a>构造哈希环</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ConsistentHash::RefreshIPList</span><span class="params">(<span class="type">const</span> vector&lt;string&gt;&amp; iplist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    virtualNodes.<span class="built_in">clear</span>();</span><br><span class="line">    serverNodes.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="type">bool</span> f=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; ip:iplist)</span><br><span class="line">    &#123;</span><br><span class="line">        f=f&amp;&amp;<span class="built_in">AddServer</span>(ip);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ConsistentHash::AddServer</span><span class="params">(<span class="type">const</span> string&amp; nodeIP)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;virtualNodeNum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        stringstream nodeKey;</span><br><span class="line">        nodeKey&lt;&lt;nodeIP&lt;&lt;<span class="string">&quot;#&quot;</span>&lt;&lt;i;</span><br><span class="line">        <span class="type">uint32_t</span> partition=<span class="built_in">GETHash</span>(nodeKey.<span class="built_in">str</span>());</span><br><span class="line">        virtualNodes.<span class="built_in">insert</span>(&#123;partition,nodeIP&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">uint32_t</span> partition=<span class="built_in">GETHash</span>(nodeIP);</span><br><span class="line">    serverNodes.<span class="built_in">insert</span>(&#123;partition,nodeIP&#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据IP列表构建哈希环，其中virtulNodeNum为设置的虚拟节点数量。</p>
<h3 id="获得key对应的节点和备份节点"><a href="#获得key对应的节点和备份节点" class="headerlink" title="获得key对应的节点和备份节点"></a>获得key对应的节点和备份节点</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">ConsistentHash::GetServerIndex</span><span class="params">(<span class="type">const</span> string&amp; key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> partition=<span class="built_in">GETHash</span>(key);</span><br><span class="line">    <span class="keyword">auto</span> it=virtualNodes.<span class="built_in">lower_bound</span>(partition);</span><br><span class="line">    <span class="keyword">if</span>(it==virtualNodes.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(virtualNodes.<span class="built_in">empty</span>())</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;no available nodes&quot;</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> virtualNodes.<span class="built_in">begin</span>()-&gt;second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">ConsistentHash::GetBackUpServer</span><span class="params">(<span class="type">const</span> string&amp; key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> partition=<span class="built_in">GETHash</span>(key);</span><br><span class="line">    <span class="keyword">auto</span> it=virtualNodes.<span class="built_in">lower_bound</span>(partition);</span><br><span class="line">    <span class="keyword">if</span>(it==virtualNodes.<span class="built_in">end</span>())</span><br><span class="line">        it=virtualNodes.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">while</span>(it!=virtualNodes.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        it++;</span><br><span class="line">        <span class="keyword">if</span>(it==virtualNodes.<span class="built_in">end</span>())</span><br><span class="line">            it=virtualNodes.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">if</span>(it-&gt;second!=<span class="built_in">GetServerIndex</span>(key))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过key的哈希值，找到哈希环上顺时针方向上的第一个cache server节点，此为该key对应的存储节点，同时找到备份节点。</p>
]]></content>
      <categories>
        <category>分布式缓存</category>
      </categories>
      <tags>
        <tag>学习日志</tag>
        <tag>一致性哈希</tag>
      </tags>
  </entry>
  <entry>
    <title>定时器</title>
    <url>/2022/03/15/%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
    <content><![CDATA[<h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><p>服务器主循环为每一个连接创建一个定时器，并对每个连接进行定时，利用升序时间链表容器将所有定时器串联起来，若主循环接收到定时通知，则在链表中依次执行定时任务。本项目利用alarm函数周期性触发SIGALRM信号，信号处理函数利用管道通知主循环，主循环接受到该信号后对升序链表上所有定时器进行处理。若该段时间内没有交换出具，则将该连接关闭，释放所占用的资源。<br><a href="https://imgtu.com/i/OMytEj"><img src="https://s1.ax1x.com/2022/05/07/OMytEj.png" alt="定时器"></a></p>
<span id="more"></span>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><strong>定时事件</strong>：固定一段时间之后触发某段代码，由该段代码处理一个事件。<br><strong>非活跃事件</strong>：客户端与服务器端建立连接后，长时间不交换数据，一直占用服务端的文件描述符，导致连接资源的浪费。<br><strong>定时器</strong>：将定时事件与连接资源封装为一个结构体定时器。</p>
<h2 id="基础API"><a href="#基础API" class="headerlink" title="基础API"></a>基础API</h2><h3 id="epoll-event结构体"><a href="#epoll-event结构体" class="headerlink" title="epoll_event结构体"></a>epoll_event结构体</h3><p>用于注册所感兴趣的事件和回传所发送待处理的事件，定义如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> <span class="title class_">epoll_data</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ptr;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">__uint32_t</span> u32;</span><br><span class="line">    <span class="type">__uint64_t</span> u64;</span><br><span class="line">&#125; <span class="type">epoll_data_t</span>;<span class="comment">//保存触发事件的某个文件描述符相关的数据</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">epoll_event</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">__uint32_t</span> events;      <span class="comment">/* epoll event */</span></span><br><span class="line">    <span class="type">epoll_data_t</span> data;      <span class="comment">/* User data variable */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>其中events表示感兴趣的事件和被触发的事件，可能的取值有：</p>
<ul>
<li>EPOLLIN：文件描述符可以读；</li>
<li>EPOLLOUT：文件描述符可以写；</li>
<li>EPOLLPRI：文件描述符有紧急的数可读；</li>
<li>EPOLLERR：文件描述符发生错误；</li>
<li>EPOLLHUP：文件描述符被挂断；</li>
<li>EPOLLET：ET的epoll工作模式；</li>
</ul>
<h3 id="LT-x2F-ET工作模式"><a href="#LT-x2F-ET工作模式" class="headerlink" title="LT&#x2F;ET工作模式"></a>LT&#x2F;ET工作模式</h3><p>与poll的事件宏相比，epoll新增了一个事件宏EPOLLET，这就是所谓的边缘触发模式（Edge Trigger，ET），而默认的模式我们称为水平触发模式（Level Trigger，LT）。这两种模式的区别在于：对于水平触发模式，一个事件只要有，就会一直触发；对于边缘触发模式，只有一个事件从无到有才会触发。这两个词汇来自电学术语，你可以将fd上有数据认为是高电平，没有数据认为是低电平，将fd可写认为是高电平，fd不可写认为是低电平。那么水平模式的触发条件是状态处于高电平，而边缘模式的触发条件是新来一次电信号将当前状态变为高电平。<br>以socket的读事件为例，对于水平模式，只要socket上有未读完的数据，就会一直产生EPOLLIN 事件；而对于边缘模式，socket上每新来一次数据就会触发一次，如果上一次触发后，未将socket上的数据读完，也不会再触发，除非再新来一次数据。也就是说，如果对于一个非阻塞socket，如果使用epoll边缘模式去检测数据是否可读，触发可读事件以后，一定要一次性把socket上的数据收取干净才行，也就是说一定要循环调用recv函数直到recv出错，错误码是EWOULDBLOCK（EAGAIN 一样）（此时表示socket上本次数据已经读完）；如果使用水平模式，则不用，你可以根据业务一次性收取固定的字节数，或者收完为止。</p>
<h3 id="EPOLLONESHOT事件"><a href="#EPOLLONESHOT事件" class="headerlink" title="EPOLLONESHOT事件"></a>EPOLLONESHOT事件</h3><p>epoll模型的ET模式一般来说只触发一次，然而在并发程序中有特殊情况的存在，譬如当epoll_wait已经检测到socket描述符fd1，并通知应用程序处理fd1的数据，那么处理过程中该fd1又有新的数据可读，会唤醒其他线程对fd1进行操作，那么就出现了两个工作线程同时处理fd1的情况，这当然不是我们期望看到的。而epolloneshot事件规定操作系统最多触发其上注册的一个可读或者可写或者异常事件，且只触发一次，如此无论线程再多，只能有一个线程或进程处理同一个描述符。当然处理完之后线程要重置这个epolloneshot事件，进而当此描述符有事件可读时让其他进程可以处理此描述符。</p>
<h3 id="fcntl函数"><a href="#fcntl函数" class="headerlink" title="fcntl函数"></a>fcntl函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fcntl</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> cmd)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fcntl</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> cmd, <span class="type">long</span> arg)</span></span>;         </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fcntl</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> cmd, <span class="keyword">struct</span> flock *lock)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：操作文件描述符的一些特性</li>
<li>参数：<ul>
<li>fd：欲设置的文件描述符</li>
<li>cmd：欲操作的指令<ul>
<li>F_DUPFD：用来查找大于或等于参数arg的最小且仍未使用的文件描述词，并且复制参数fd的文件描述词，执行成功则返回新复制的文件描述词；</li>
<li>F_GETFD：取得close-on-exec 旗标，若此旗标的FD_CLOEXEC 位为0, 代表在调用exec()相关函数时文件将不会关闭；</li>
<li>F_SETFD：设置close-on-exec 旗标，该旗标以参数arg 的FD_CLOEXEC位决定；</li>
<li>F_GETFL：取得文件描述词状态旗标，此旗标为open()的参数flags；</li>
<li>F_SETFL：设置文件描述词状态旗标，参数arg为新旗标，但只允许O_APPEND、O_NONBLOCK（非阻塞IO）和O_ASYNC位的改变，其他位的改变将不受影响；</li>
<li>F_GETLK：取得文件锁定的状态；</li>
<li>F_SETLK：设置文件锁定的状态，此时flcok结构的l_type值必须是F_RDLCK、F_WRLCK 或F_UNLCK，如果无法建立锁定，则返回-1，错误代码为EACCES或EAGAIN；</li>
<li>F_SETLKW：同F_SETLK作用相同，但是无法建立锁定时，此调用会一直等到锁定动作成功为止，若在等待锁定的过程中被信号中断时，会立即返回-1，错误代码为EINTR，参数lock指针为flock 结构指针；</li>
</ul>
</li>
</ul>
</li>
<li>返回值：成功则返回0，若有错误则返回-1，错误原因存于errno；</li>
</ul>
<h3 id="sigaction函数与结构体"><a href="#sigaction函数与结构体" class="headerlink" title="sigaction函数与结构体"></a>sigaction函数与结构体</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sigaction</span><span class="params">(<span class="type">int</span> signum,<span class="type">const</span> <span class="keyword">struct</span> sigaction *act,<span class="type">const</span> <span class="keyword">struct</span> sigaction *old)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：改变进程接收到特定信号后的行为；</li>
<li>参数：<ul>
<li>signum：信号的值，可以为除sigkill及sigstop外的任何一个特定有效的信号；</li>
<li>act：指向结构sigaction的一个实例的指针，在结构sigaction的实例中，指定了对特定信号的处理，可以为空，进程会以缺省方式对信号处理；</li>
<li>old：指向的对象用来保存原来对相应信号的处理，可以传入结构sigaction的指针来获取之前对信号处理情况，如果不需要保存可指定oldact为null。</li>
</ul>
</li>
<li>返回值：函数成功返回0，失败返回-1；</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">sigaction</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">void</span> (*sa_handler)(<span class="type">int</span>);</span><br><span class="line">    <span class="built_in">void</span> (*sa_sigaction)(<span class="type">int</span>, <span class="type">siginfo_t</span> *, <span class="type">void</span> *);</span><br><span class="line">    <span class="type">sigset_t</span> sa_mask;</span><br><span class="line">    <span class="type">int</span> sa_flags;</span><br><span class="line">    <span class="built_in">void</span> (*sa_restorer)(<span class="type">void</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>sa_handler：一个函数指针，指向信号处理函数；</li>
<li>sa_sigaction：同样是信号处理函数，有三个参数，可以获得关于信号更详细的信息；</li>
<li>sa_mask：用来指定在信号处理函数执行期间需要被屏蔽的信号；</li>
<li>sa_flags：用于指定信号处理的行为；<ul>
<li>SA_RESTART：使被信号打断的系统调用自动重新发起；</li>
<li>SA_NOCLDSTOP：使父进程在它的子进程暂停或继续运行时不会收到SIGCHLD信号；</li>
<li>SA_NOCLDWAIT：使父进程在它的子进程退出时不会收到SIGCHLD信号，这时子进程如果退出也不会成为僵尸进程；</li>
<li>SA_NODEFER：使对信号的屏蔽无效，即在信号处理函数执行期间仍能发出这个信号；</li>
<li>SA_RESETHAND：信号处理之后重新设置为默认的处理方式；</li>
<li>SA_SIGINFO：使用sa_sigaction成员而不是sa_handler作为信号处理函数；</li>
</ul>
</li>
<li>sa_restorer：一般不使用；</li>
</ul>
<h2 id="核心代码分析"><a href="#核心代码分析" class="headerlink" title="核心代码分析"></a>核心代码分析</h2><h3 id="定时器类"><a href="#定时器类" class="headerlink" title="定时器类"></a>定时器类</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">util_timer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">time_t</span> expire;                 <span class="comment">//超时时间</span></span><br><span class="line">    <span class="built_in">void</span> (*cb_func)(client_data*); <span class="comment">//回调函数</span></span><br><span class="line">    client_data* user_data;        <span class="comment">//连接资源</span></span><br><span class="line">    util_timer* prev;              <span class="comment">//前向定时器</span></span><br><span class="line">    util_timer* next;              <span class="comment">//后继定时器</span></span><br><span class="line">    <span class="built_in">util_timer</span>():<span class="built_in">prev</span>(<span class="literal">NULL</span>),<span class="built_in">next</span>(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="连接资源结构体"><a href="#连接资源结构体" class="headerlink" title="连接资源结构体"></a>连接资源结构体</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">client_data</span></span><br><span class="line">&#123;</span><br><span class="line">    sockaddr_in address; <span class="comment">//客户端socket地址</span></span><br><span class="line">    <span class="type">int</span> sockfd;          <span class="comment">//socket文件描述符</span></span><br><span class="line">    util_timer* timer;   <span class="comment">//定时器类</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="向定时器链表中添加定时器"><a href="#向定时器链表中添加定时器" class="headerlink" title="向定时器链表中添加定时器"></a>向定时器链表中添加定时器</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort_timer_lst::add_timer</span><span class="params">(util_timer* timer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!timer)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(!head)</span><br><span class="line">    &#123;</span><br><span class="line">        head=tail=timer;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(timer-&gt;expire&lt;head-&gt;expire)</span><br><span class="line">    &#123;</span><br><span class="line">        timer-&gt;next=head;</span><br><span class="line">        head-&gt;prev=timer;</span><br><span class="line">        head=timer;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add_timer</span>(timer,head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果新的定时器超时时间timer-&gt;expire小于当前头部结点超时时间head-&gt;expire，则直接将当前定时器结点作为头部结点。否则就调用私有成员函数add_timer，找出定时器链表中大于新的定时器超时时间的结点，再进行插入操作。</p>
<h3 id="定时任务处理函数"><a href="#定时任务处理函数" class="headerlink" title="定时任务处理函数"></a>定时任务处理函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort_timer_lst::tick</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">time_t</span> cur=<span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">    util_timer* temp=head;</span><br><span class="line">    <span class="keyword">while</span>(temp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur&lt;temp-&gt;expire)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        temp-&gt;<span class="built_in">cb_func</span>(temp-&gt;user_data);</span><br><span class="line">        head=temp-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(head)</span><br><span class="line">            head-&gt;prev=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">        temp=head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先获取当前时间，之后通过while循环遍历定时器链表。因为链表为升序排列，所以如果当前时间小于定时器的超时时间，则后面的定时器也没有到期。如果当前定时器到期，则调用回调函数，执行定时事件，并将处理后的定时器从链表容器中删除，重置头结点。</p>
<h3 id="定时器回调函数"><a href="#定时器回调函数" class="headerlink" title="定时器回调函数"></a>定时器回调函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">cb_func</span><span class="params">(client_data* user_data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">epoll_ctl</span>(Utils::u_epollfd,EPOLL_CTL_DEL,user_data-&gt;sockfd,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">assert</span>(user_data);</span><br><span class="line">    <span class="built_in">close</span>(user_data-&gt;sockfd);</span><br><span class="line">    http_conn::m_user_count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>删除非活动连接在socket上的注册事件，关闭文件描述符，减少连接数。</p>
<h3 id="注册读事件"><a href="#注册读事件" class="headerlink" title="注册读事件"></a>注册读事件</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Utils::addfd</span><span class="params">(<span class="type">int</span> epollfd, <span class="type">int</span> fd, <span class="type">bool</span> one_shot, <span class="type">int</span> TRIGMode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    epoll_event event;</span><br><span class="line">    event.data.fd = fd;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == TRIGMode)</span><br><span class="line">        event.events = EPOLLIN | EPOLLET | EPOLLRDHUP;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        event.events = EPOLLIN | EPOLLRDHUP;</span><br><span class="line">    <span class="keyword">if</span> (one_shot)</span><br><span class="line">        event.events |= EPOLLONESHOT;</span><br><span class="line">    <span class="built_in">epoll_ctl</span>(epollfd, EPOLL_CTL_ADD, fd, &amp;event);</span><br><span class="line">    <span class="built_in">setnonblocking</span>(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>one_shot为是否开始EPOLLONESHOT标志，TRIGMode为ET&#x2F;LT模式切换标志，为1表示ET模式，为0表示LT模式，通过events的异或操作添加相关状态。setnonblocking函数将fd设置为非阻塞状态。</p>
<h3 id="设置信号函数"><a href="#设置信号函数" class="headerlink" title="设置信号函数"></a>设置信号函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Utils::addsig</span><span class="params">(<span class="type">int</span> sig,<span class="type">void</span>(handler)(<span class="type">int</span>),<span class="type">bool</span> restart)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sigaction</span> sa;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;sa,<span class="string">&#x27;\0&#x27;</span>,<span class="built_in">sizeof</span>(sa));</span><br><span class="line">    sa.sa_handler=handler;</span><br><span class="line">    <span class="keyword">if</span>(restart)</span><br><span class="line">        sa.sa_flags|=SA_RESTART;</span><br><span class="line">    <span class="built_in">sigfillset</span>(&amp;sa.sa_mask);  </span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">sigaction</span>(sig,&amp;sa,<span class="literal">NULL</span>)!=<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>addsig函数对sig信号的处理函数设置为handler，当restart标志为真时，添加SA_RESTART信号，表示使被信号打断的系统调用自动重新发起。</p>
]]></content>
      <categories>
        <category>webserver</category>
      </categories>
      <tags>
        <tag>学习日志</tag>
        <tag>定时器</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库连接池</title>
    <url>/2022/03/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    <content><![CDATA[<h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><p>池是一种资源的容器，有多种实现方法，如数组、链表、队列等，本项目使用单例模式和链表创建数据库连接池，实现对数据库连接资源的复用。数据库模块可以分为两部分，其一是数据库连接池的定义和初始化，其二是利用连接池完成登录和注册的校验功能。具体而言，工作线程从数据库连接池取得一个连接，访问数据库中的数据，访问完毕后将连接交还给连接池。<br><a href="https://imgtu.com/i/OKboPf"><img src="https://s1.ax1x.com/2022/05/06/OKboPf.png" alt="数据库连接池"></a></p>
<span id="more"></span>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><strong>数据库访问流程</strong>：当系统需要访问数据库时，首先创建数据库连接，完成数据库操作后，再断开数据库连接。<br><strong>数据库连接池</strong>：池是一组资源的集合，在服务器启动之初就被完全创建好并初始化。数据库连接池中的资源就是一组数据库连接，由系统动态地对池中的连接进行使用和释放。当系统开始处理客户请求时，如果它需要相关的资源，可以直接从池中获取，无需动态分配。当服务器处理完一个客户连接后，可以把相关的资源放回池中，无需执行系统调用释放资源。<br><strong>连接池的必要性</strong>：如果系统需要频繁访问数据库，则需要频繁创建和断开数据库连接，而这是一个很消耗资源的操作，也容易对数据库造成安全隐患。如果在程序初始化的时候，集中创建多个数据库连接，并把它们集中管理，供程序使用，可以保证较快的数据库读写速度，更加安全可靠。</p>
<h2 id="基础API"><a href="#基础API" class="headerlink" title="基础API"></a>基础API</h2><h3 id="mysql-init函数"><a href="#mysql-init函数" class="headerlink" title="mysql_init函数"></a>mysql_init函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">MYSQL* <span class="title">mysql_init</span><span class="params">(MYSQL *mysql)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>作用：分配或初始化与mysql_real_connect()相适应的MYSQL对象，如果mysql_init()分配了新的对象，应当在程序中调用mysql_close()来关闭连接，以释放对象；</li>
<li>参数：如果mysql是NULL指针，该函数将分配、初始化、并返回新对象。否则，将初始化对象，并返回对象的地址；</li>
<li>返回值：初始化的MYSQL*句柄，如果无足够内存以分配新的对象，返回NULL错误，在内存不足的情况下，返回NULL；</li>
</ul>
<h3 id="mysql-close函数"><a href="#mysql-close函数" class="headerlink" title="mysql_close函数"></a>mysql_close函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">mysql_close</span><span class="params">(MYSQL *mysql)</span> </span></span><br></pre></td></tr></table></figure>
<ul>
<li>关闭前面打开的连接，如果句柄是由mysql_init()或mysql_connect()自动分配的，mysql_close()还将解除分配由mysql指向的连接句柄。</li>
</ul>
<h3 id="mysql-real-connect函数"><a href="#mysql-real-connect函数" class="headerlink" title="mysql_real_connect函数"></a>mysql_real_connect函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">MYSQL* <span class="title">mysql_real_connect</span><span class="params">(MYSQL *mysql, <span class="type">const</span> <span class="type">char</span> *host, <span class="type">const</span> <span class="type">char</span> *user, <span class="type">const</span> <span class="type">char</span> *passwd, <span class="type">const</span> <span class="type">char</span> *db, </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">unsigned</span> <span class="type">int</span> port, <span class="type">const</span> <span class="type">char</span> *unix_socket, <span class="type">unsigned</span> <span class="type">long</span> client_flag)</span> </span></span><br></pre></td></tr></table></figure>
<ul>
<li>作用：连接数据库引擎，尝试与运行在主机上的MySQL数据库引擎建立连接；</li>
<li>参数：<ul>
<li>mysql：MYSQL变量；</li>
<li>host：MYSQL服务器的地址，如果“host”是NULL或字符串”localhost”，连接将被视为与本地主机的连接；</li>
<li>user：登录用户名，如果“user”是NULL或空字符串””，用户将被视为当前用户；</li>
<li>passwd：登录密码；</li>
<li>db：要连接的数据库，如果db为NULL，连接会将默认的数据库设为该值；</li>
<li>port：MYSQL服务器的TCP服务端口；</li>
<li>unix_socket：unix连接方式，如果unix_socket不是NULL，该字符串描述了应使用的套接字或命名管道；</li>
<li>clientflag：Mysql运行为ODBC数据库的标记，一般取0；</li>
</ul>
</li>
<li>返回值：如果连接成功，返回MYSQL*连接句柄。如果连接失败，返回NULL。对于成功的连接，返回值与第1个参数的值相同。</li>
</ul>
<h3 id="mysql-query函数"><a href="#mysql-query函数" class="headerlink" title="mysql_query函数"></a>mysql_query函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">mysql_query</span><span class="params">(MYSQL *mysql, <span class="type">const</span> <span class="type">char</span> *query)</span> </span></span><br></pre></td></tr></table></figure>
<ul>
<li>作用：查询数据库中的某一个表内容；</li>
<li>参数：<ul>
<li>mysql：MYSQL变量；</li>
<li>query：由“Null终结的字符串”查询指向的SQL查询，正常情况下，字符串必须包含1条SQL语句，而且不应为语句添加终结分号（‘;’）或“\g”，如果允许多语句执行，字符串可包含多条由分号隔开的语句。mysql_query()不能用于包含二进制数据的查询，应使用mysql_real_query()取而代之（二进制数据可能包含字符‘\0’，mysql_query()会将该字符解释为查询字符串结束），如果希望了解查询是否应返回结果集，可使用mysql_field_count()进行检查。</li>
</ul>
</li>
<li>返回值：如果查询成功，返回0。如果出现错误，返回非0值；</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">mysql_real_query</span><span class="params">(MYSQL *mysql, <span class="type">const</span> <span class="type">char</span> *q, <span class="type">unsigned</span> <span class="type">long</span> length)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>作用：查询数据库中的某一个表内容；</li>
<li>参数：<ul>
<li>mysql：MYSQL变量；</li>
<li>q：SQL查询语句；</li>
<li>length：查询语句的长度；</li>
</ul>
</li>
<li>返回值：如果查询成功，返回0。如果出现错误，返回非0值；</li>
</ul>
<h3 id="mysql-store-result函数"><a href="#mysql-store-result函数" class="headerlink" title="mysql_store_result函数"></a>mysql_store_result函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">MYSQL_RES* <span class="title">mysql_store_result</span><span class="params">(MYSQL *mysql)</span> </span></span><br></pre></td></tr></table></figure>
<ul>
<li>作用：显示查询数据库中数据表的内容；</li>
<li>说明：<ul>
<li>对于成功检索了数据的每个查询（SELECT、SHOW、DESCRIBE、EXPLAIN、CHECK TABLE等），必须调用mysql_store_result()或mysql_use_result()；</li>
<li>如果希望了解查询是否应返回结果集，可使用mysql_field_count()进行检查；</li>
<li>如果查询未返回结果集，mysql_store_result()将返回Null指针（例如，如果查询是INSERT语句）；</li>
<li>如果读取结果集失败，mysql_store_result()还会返回Null指针；</li>
<li>一旦调用了mysql_store_result()并获得了不是Null指针的结果，可调用mysql_num_rows()来找出结果集中的行数；</li>
<li>可以调用mysql_fetch_row()来获取结果集中的行，或调用mysql_row_seek()和mysql_row_tell()来获取或设置结果集中的当前行位置；</li>
<li>一旦完成了对结果集的操作，必须调用mysql_free_result()；</li>
</ul>
</li>
<li>返回值：具有多个结果的MYSQL_RES结果集合，如果出现错误，返回NULL；</li>
</ul>
<h3 id="mysql-fetch-row函数"><a href="#mysql-fetch-row函数" class="headerlink" title="mysql_fetch_row函数"></a>mysql_fetch_row函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">MYSQL_ROW <span class="title">mysql_fetch_row</span><span class="params">(MYSQL_RES* result)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>作用：从结果集中获取下一行；</li>
<li>说明：<ul>
<li>在mysql_store_result()之后使用时，如果没有要检索的行，mysql_fetch_row()返回NULL；</li>
<li>在mysql_use_result()之后使用时，如果没有要检索的行或出现了错误，mysql_fetch_row()返回NULL；</li>
<li>行内值的数目由mysql_num_fields(result)给出。如果行中保存了调用mysql_fetch_row()返回的值，将按照row[0]到row[mysql_num_fields(result)-1]，访问这些值的指针；</li>
<li>可以通过调用mysql_fetch_lengths()来获得行中字段值的长度。对于空字段以及包含NULL的字段，长度为0。通过检查字段值的指针，能够区分它们。如果指针为NULL，字段为NULL，否则字段为空；</li>
</ul>
</li>
<li>返回值：下一行的MYSQL_ROW结构。如果没有更多要检索的行或出现了错误，返回NULL；</li>
</ul>
<h3 id="mysql-field-count函数"><a href="#mysql-field-count函数" class="headerlink" title="mysql_field_count函数"></a>mysql_field_count函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">mysql_field_count</span><span class="params">(MYSQL *mysql)</span> </span></span><br></pre></td></tr></table></figure>
<ul>
<li>作用：返回作用在连接上的最近查询的列数；</li>
<li>说明：该函数的正常使用是在mysql_store_result()返回NULL（因而没有结果集指针）时。在这种情况下，可调用mysql_field_count()来判定mysql_store_result()是否应生成非空结果。这样，客户端就能采取恰当的动作，而无需知道查询是否是SELECT（或类似SELECT的）语句；</li>
<li>返回值：表示结果集中列数的无符号整数；</li>
</ul>
<h2 id="核心代码分析"><a href="#核心代码分析" class="headerlink" title="核心代码分析"></a>核心代码分析</h2><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string m_url;           <span class="comment">//主机地址</span></span><br><span class="line">string m_Port;          <span class="comment">//数据库端口号</span></span><br><span class="line">string m_User;          <span class="comment">//登录数据库用户名</span></span><br><span class="line">string m_Password;      <span class="comment">//登录数据库密码</span></span><br><span class="line">string m_Databasename;  <span class="comment">//使用数据库名</span></span><br><span class="line"><span class="type">int</span> m_close_log;        <span class="comment">//日志开关</span></span><br><span class="line">locker lock;</span><br><span class="line">list&lt;MYSQL*&gt; connList;  <span class="comment">//连接池</span></span><br><span class="line">sem reserve;</span><br><span class="line"><span class="type">int</span> m_MaxConn;          <span class="comment">//最大连接数</span></span><br><span class="line"><span class="type">int</span> m_CurConn;          <span class="comment">//当前已使用的连接数</span></span><br><span class="line"><span class="type">int</span> m_FreeConn;         <span class="comment">//当前空闲的连接数</span></span><br></pre></td></tr></table></figure>
<h3 id="RAII机制创建、释放资源"><a href="#RAII机制创建、释放资源" class="headerlink" title="RAII机制创建、释放资源"></a>RAII机制创建、释放资源</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">connectionRAII::<span class="built_in">connectionRAII</span>(MYSQL** SQL,connection_poll* connpool)</span><br><span class="line">&#123;</span><br><span class="line">    *SQL=connpool-&gt;<span class="built_in">GetConnection</span>();</span><br><span class="line">    conRAII=*SQL;</span><br><span class="line">    poolRAII=connpool;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将数据库连接的获取与释放通过RAII机制封装，避免手动释放。</p>
<h3 id="单例模式创建类对象"><a href="#单例模式创建类对象" class="headerlink" title="单例模式创建类对象"></a>单例模式创建类对象</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">connection_poll* <span class="title">connection_poll::GetInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> connection_poll connPool;</span><br><span class="line">    <span class="keyword">return</span> &amp;connPool;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过单例模式创建数据库连接池，返回静态成员变量。</p>
<h3 id="初始化数据库连接池"><a href="#初始化数据库连接池" class="headerlink" title="初始化数据库连接池"></a>初始化数据库连接池</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">connection_poll::init</span><span class="params">(string url,string User,string Password,string Databasename,<span class="type">int</span> Port,<span class="type">int</span> Maxconn,<span class="type">int</span> close_log)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_url=url;</span><br><span class="line">    m_Port=Port;</span><br><span class="line">    m_User=User;</span><br><span class="line">    m_Password=Password;</span><br><span class="line">    m_Databasename=Databasename;</span><br><span class="line">    m_close_log=close_log;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;Maxconn;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        MYSQL* con=<span class="literal">NULL</span>;</span><br><span class="line">        con=<span class="built_in">mysql_init</span>(con);</span><br><span class="line">        <span class="keyword">if</span>(con==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">LOG_ERROR</span>(<span class="string">&quot;MySQL Error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        con=<span class="built_in">mysql_real_connect</span>(con,url.<span class="built_in">c_str</span>(),User.<span class="built_in">c_str</span>(),Password.<span class="built_in">c_str</span>(),Databasename.<span class="built_in">c_str</span>(),Port,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(con==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">LOG_ERROR</span>(<span class="string">&quot;MySQL Error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        connList.<span class="built_in">push_back</span>(con);</span><br><span class="line">        m_FreeConn++;</span><br><span class="line">    &#125;</span><br><span class="line">    reserve=<span class="built_in">sem</span>(m_FreeConn);</span><br><span class="line">    m_MaxConn=m_FreeConn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建Maxconn个数据库连接。</p>
<h3 id="返回数据库连接"><a href="#返回数据库连接" class="headerlink" title="返回数据库连接"></a>返回数据库连接</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">MYSQL* <span class="title">connection_poll::GetConnection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MYSQL* con=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(connList.<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    reserve.<span class="built_in">wait</span>();</span><br><span class="line">    lock.<span class="built_in">lock</span>();</span><br><span class="line">    con=connList.<span class="built_in">front</span>();</span><br><span class="line">    connList.<span class="built_in">pop_front</span>();</span><br><span class="line">    m_FreeConn--;</span><br><span class="line">    m_CurConn++;</span><br><span class="line">    lock.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> con;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当有请求时，从数据库连接池中返回一个可用连接，原子-1，更新使用和空闲连接数，若连接池内没有连接了，则阻塞等待。</p>
<h3 id="释放数据库连接"><a href="#释放数据库连接" class="headerlink" title="释放数据库连接"></a>释放数据库连接</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">connection_poll::ReleaseConnection</span><span class="params">(MYSQL* con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(con==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    lock.<span class="built_in">lock</span>();</span><br><span class="line">    connList.<span class="built_in">push_back</span>(con);</span><br><span class="line">    m_FreeConn++;</span><br><span class="line">    m_CurConn--;</span><br><span class="line">    lock.<span class="built_in">unlock</span>();</span><br><span class="line">    reserve.<span class="built_in">post</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>释放连接，原子+1。</p>
<h3 id="销毁数据库连接池"><a href="#销毁数据库连接池" class="headerlink" title="销毁数据库连接池"></a>销毁数据库连接池</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">connection_poll::DestroyPool</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lock.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span>(connList.<span class="built_in">size</span>()&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        list&lt;MYSQL*&gt;::iterator it;</span><br><span class="line">        <span class="keyword">for</span>(it=connList.<span class="built_in">begin</span>();it!=connList.<span class="built_in">end</span>();it++)</span><br><span class="line">        &#123;</span><br><span class="line">            MYSQL* con=*it;</span><br><span class="line">            <span class="built_in">mysql_close</span>(con);</span><br><span class="line">        &#125;</span><br><span class="line">        m_CurConn=<span class="number">0</span>;</span><br><span class="line">        m_FreeConn=<span class="number">0</span>;</span><br><span class="line">        connList.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    lock.<span class="built_in">unlock</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过迭代器遍历数据库连接池链表，关闭对应数据库连接，清空链表并重置空闲连接和现有连接数量。</p>
]]></content>
      <categories>
        <category>webserver</category>
      </categories>
      <tags>
        <tag>学习日志</tag>
        <tag>数据库连接池</tag>
      </tags>
  </entry>
  <entry>
    <title>日志系统</title>
    <url>/2022/03/11/%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><p>项目中使用单例模式创建日志类对象，对webserver运行状态、错误信息和访问数据进行记录，可以实现按天分类、超行分类功能，并且同时提供同步和异步两种写入方式。异步日志模式中，将生产者-消费者模型封装成阻塞队列，创建一个日志写线程，工作线程把要写入的内容push进队列，写线程从队列中取出内容，写入日志文件。<br><a href="https://imgtu.com/i/OMJR61"><img src="https://s1.ax1x.com/2022/05/07/OMJR61.png" alt="日志类"></a></p>
<span id="more"></span>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="同步-x2F-异步日志"><a href="#同步-x2F-异步日志" class="headerlink" title="同步&#x2F;异步日志"></a>同步&#x2F;异步日志</h3><p><strong>同步日志</strong>：写入日志操作和工作线程串行执行，当单条日志较大时，同步模式会降低服务器所能处理的并发能力<br><strong>异步日志</strong>: 先将需要写入的日志内容存入阻塞队列，写线程从阻塞队列中取出内容，写入日志。</p>
<h3 id="生产者-消费者模型"><a href="#生产者-消费者模型" class="headerlink" title="生产者-消费者模型"></a>生产者-消费者模型</h3><p>生产者消费者模型具体来讲，就是在一个系统中，存在生产者和消费者两种角色，他们通过内存缓冲区进行通信，生产者生产消费者需要的资料，消费者把资料做成产品。再具体一点：生产者生产数据到缓冲区中，消费者从缓冲区中取数据；如果缓冲区已经满了，则生产者线程阻塞；如果缓冲区为空，那么消费者线程阻塞。</p>
<h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><p>阻塞队列是一个支持两个附加操作的队列。这两个附加的操作支持阻塞的插入和移除方法。支持阻塞的插入方法：当队列满时，队列会阻塞插入元素的线程，直到队列不满。支持阻塞的移除方法：当队列为空时，获取元素的线程会等待队列变为非空。阻塞队列常用于生产者和消费者的场景，生产者是向队列里添加元素的线程，消费者是从队列里取元素的线程。阻塞队列就是生产者用来存放元素、消费者用来获取元素的容器。</p>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式是一种常用的软件设计模式，属于创建型模式的一种。在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息。这种方式简化了在复杂环境下的配置管理。</p>
<h2 id="基础API"><a href="#基础API" class="headerlink" title="基础API"></a>基础API</h2><h3 id="tm结构体"><a href="#tm结构体" class="headerlink" title="tm结构体"></a>tm结构体</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">tm</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tm_sec;	<span class="comment">// 秒：0-59(允许至61)</span></span><br><span class="line">    <span class="type">int</span> tm_min;	<span class="comment">// 分：0-59</span></span><br><span class="line">    <span class="type">int</span> tm_hour;	<span class="comment">// 时：0-23</span></span><br><span class="line">    <span class="type">int</span> tm_mday;	<span class="comment">// 日：1-31</span></span><br><span class="line">    <span class="type">int</span> tm_mon;	<span class="comment">// 月：0-11</span></span><br><span class="line">    <span class="type">int</span> tm_year;	<span class="comment">// 年：自1900年起的年数</span></span><br><span class="line">    <span class="type">int</span> tm_wday;	<span class="comment">// 星期：0-6（从星期日算起）</span></span><br><span class="line">    <span class="type">int</span> tm_yday;	<span class="comment">// 一年中的第几天：0-365（从1月1日算起）</span></span><br><span class="line">    <span class="type">int</span> tm_isdst;	<span class="comment">// 夏令时</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="time函数"><a href="#time函数" class="headerlink" title="time函数"></a>time函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">time_t</span> <span class="title">time</span><span class="params">(<span class="type">time_t</span>* time)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>作用：获取或设置系统时间；</li>
<li>参数：<ul>
<li>time：若给定参数，则将当前时间保存到该参数中，若不给定参数，则为NULL；</li>
</ul>
</li>
<li>返回值：当前日历时间，自1970-01-01到目前的秒数；</li>
</ul>
<h3 id="localtime函数"><a href="#localtime函数" class="headerlink" title="localtime函数"></a>localtime函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">tm</span>* <span class="built_in">localtime</span>(<span class="type">const</span> <span class="type">time_t</span>* timer)</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：获取结构体格式的系统时间；</li>
<li>参数：<ul>
<li>timer：要转化的时间；</li>
</ul>
</li>
<li>返回值：指向结构体tm的指针，该结构体信息被timer填充；</li>
</ul>
<h3 id="gettimeofday函数"><a href="#gettimeofday函数" class="headerlink" title="gettimeofday函数"></a>gettimeofday函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gettimeofday</span><span class="params">(<span class="keyword">struct</span> timeval* tv,<span class="keyword">struct</span> timezone* tz)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>作用：获取当前精确时间（1970年1月1日到现在的时间）；</li>
<li>参数：<ul>
<li>tv：保存获取时间结果的结构体；</li>
<li>tz：保存时区结果；</li>
</ul>
</li>
<li>返回值：成功返回0，失败返回-1，并设置相关错误代码；</li>
</ul>
<h3 id="fputs函数"><a href="#fputs函数" class="headerlink" title="fputs函数"></a>fputs函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fputs</span><span class="params">(<span class="type">char</span>* string,FILE* stream)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>作用：将指定的字符串写入到文件流中，从string的开头往文件写入字符串，直到遇见结束符’\0’，其不会被写入到文件中；</li>
<li>参数：<ul>
<li>string：将要写入的字符串；</li>
<li>stream：文件流指针；</li>
</ul>
</li>
<li>返回值：成功返回非负数，失败返回EOF；</li>
</ul>
<h3 id="snprintf函数"><a href="#snprintf函数" class="headerlink" title="snprintf函数"></a>snprintf函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">snprintf</span><span class="params">(<span class="type">char</span>* str,<span class="type">size_t</span> size,<span class="type">const</span> <span class="type">char</span>* format, ...)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>作用：将可变参数按照format格式化成字符串，并将字符串复制到str中，size为要写入的字符的最大数目。如果格式化后的字符串长度小于size，则会把字符串全部复制到str中，并给其后添加一个字符串结束符’\0’。如果大于size，超过的部分会被截断。</li>
<li>参数：<ul>
<li>str：目标字符串；</li>
<li>size：拷贝字节数；</li>
<li>format：格式化成字符串；</li>
<li>…：可变参数；</li>
</ul>
</li>
<li>返回值：欲写入的字符串长度；</li>
</ul>
<h2 id="核心代码分析"><a href="#核心代码分析" class="headerlink" title="核心代码分析"></a>核心代码分析</h2><h3 id="单例模式-1"><a href="#单例模式-1" class="headerlink" title="单例模式"></a>单例模式</h3><p>通过私有化构造函数，防止外界创建类的对象，使用类的私有静态指针变量指向类的唯一实例，并用一个公有的静态方法获取该实例<br><strong>懒汉模式</strong>：在第一次被使用时才进行初始化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">single</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">single</span>()&#123;&#125;</span><br><span class="line">    ~<span class="built_in">single</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> single* <span class="title">getinstance</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">single* <span class="title">single::getinstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">static</span> single obj;</span><br><span class="line"><span class="keyword">return</span> &amp;obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>饿汉模式</strong>：在程序运行时就定义了对象，并对其初始化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">single</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> single* p;</span><br><span class="line">    <span class="built_in">single</span>()&#123;&#125;</span><br><span class="line">    ~<span class="built_in">single</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> single* <span class="title">getinstance</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">single* single::p = <span class="keyword">new</span> <span class="built_in">single</span>();</span><br><span class="line"><span class="function">single* <span class="title">single::getinstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="阻塞队列类成员变量"><a href="#阻塞队列类成员变量" class="headerlink" title="阻塞队列类成员变量"></a>阻塞队列类成员变量</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">locker m_mutex; <span class="comment">//互斥锁</span></span><br><span class="line">cond m_cond;    <span class="comment">//条件变量</span></span><br><span class="line">T* m_array;     <span class="comment">//阻塞队列</span></span><br><span class="line"><span class="type">int</span> m_size;     <span class="comment">//队列内的数量</span></span><br><span class="line"><span class="type">int</span> m_max_size; <span class="comment">//队列最大容量</span></span><br><span class="line"><span class="type">int</span> m_front;    <span class="comment">//队列头</span></span><br><span class="line"><span class="type">int</span> m_back;     <span class="comment">//队列尾</span></span><br></pre></td></tr></table></figure>
<p>阻塞队列类中封装了生产者-消费者模型，其中push成员是生产者，pop成员是消费者，当队列为空时，从队列中获取元素的线程将会被挂起，当队列是满时，往队列里添加元素的线程将会挂起</p>
<h3 id="阻塞队列初始化、清除、析构"><a href="#阻塞队列初始化、清除、析构" class="headerlink" title="阻塞队列初始化、清除、析构"></a>阻塞队列初始化、清除、析构</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">block_queue</span>(<span class="type">int</span> max_size=<span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(max_size&lt;=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    m_max_size=max_size;</span><br><span class="line">    m_array=<span class="keyword">new</span> T[max_size];</span><br><span class="line">    m_size=<span class="number">0</span>;</span><br><span class="line">    m_front=<span class="number">-1</span>;</span><br><span class="line">    m_back=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_mutex.<span class="built_in">lock</span>(); </span><br><span class="line">    m_size=<span class="number">0</span>;</span><br><span class="line">    m_front=<span class="number">-1</span>;</span><br><span class="line">    m_back=<span class="number">-1</span>;</span><br><span class="line">    m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">block_queue</span>()</span><br><span class="line">&#123;</span><br><span class="line">    m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span>(m_array!=<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">delete</span>[] m_array;</span><br><span class="line">    m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="判断阻塞队列是否满、空"><a href="#判断阻塞队列是否满、空" class="headerlink" title="判断阻塞队列是否满、空"></a>判断阻塞队列是否满、空</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span>(m_size&gt;=m_max_size)</span><br><span class="line">    &#123;</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span>==m_size)</span><br><span class="line">    &#123;</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="返回队首元素、队尾元素、大小、最大值"><a href="#返回队首元素、队尾元素、大小、最大值" class="headerlink" title="返回队首元素、队尾元素、大小、最大值"></a>返回队首元素、队尾元素、大小、最大值</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">front</span><span class="params">(T&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span>(m_size==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    value=m_array[m_front];</span><br><span class="line">    m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">back</span><span class="params">(T&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span>(m_size==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    value=m_array[m_back];</span><br><span class="line">    m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">    temp=m_size;</span><br><span class="line">    m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max_size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">    temp=m_max_size;</span><br><span class="line">    m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="往队列中添加、删除元素"><a href="#往队列中添加、删除元素" class="headerlink" title="往队列中添加、删除元素"></a>往队列中添加、删除元素</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T&amp; item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span>(m_size&gt;=m_max_size)</span><br><span class="line">    &#123;</span><br><span class="line">        m_cond.<span class="built_in">broadcast</span>();</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_back=(m_back+<span class="number">1</span>)%m_max_size;</span><br><span class="line">    m_array[m_back]=item;</span><br><span class="line">    m_size++;</span><br><span class="line">    m_cond.<span class="built_in">broadcast</span>();</span><br><span class="line">    m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(T&amp; item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">while</span>(m_size&lt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(m_cond.<span class="built_in">wait</span>(m_mutex.<span class="built_in">get</span>()))</span><br><span class="line">        &#123;</span><br><span class="line">            m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    m_front=(m_front+<span class="number">1</span>)%m_max_size;</span><br><span class="line">    item=m_array[m_front];</span><br><span class="line">    m_size--;</span><br><span class="line">    m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(T&amp; item,<span class="type">int</span> ms_timeout)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timespec</span> t=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timeval</span> now=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">gettimeofday</span>(&amp;now,<span class="literal">NULL</span>);</span><br><span class="line">    m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span>(m_size&lt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t.tv_sec=now.tv_sec+ms_timeout/<span class="number">1000</span>;</span><br><span class="line">        t.tv_nsec=(ms_timeout%<span class="number">1000</span>)*<span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">if</span>(!m_cond.<span class="built_in">timewait</span>(m_mutex.<span class="built_in">get</span>(),t))</span><br><span class="line">        &#123;</span><br><span class="line">            m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(m_size&lt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_front=(m_front+<span class="number">1</span>)%m_max_size;</span><br><span class="line">    item=m_array[m_front];</span><br><span class="line">    m_size--;</span><br><span class="line">    m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>往队列中添加元素，需要将所有使用队列的线程先唤醒，当有元素push进队列，相当于生产者生产了一个元素，若当前没有线程等待条件变量，则唤醒无意义。<br>pop时，如果队列没有元素，将会等待条件变量，增加了超时处理，指定时间内能抢到互斥锁即可。</p>
<h3 id="日志类成员变量"><a href="#日志类成员变量" class="headerlink" title="日志类成员变量"></a>日志类成员变量</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> dir_name[<span class="number">128</span>];   <span class="comment">//路径名</span></span><br><span class="line"><span class="type">char</span> log_name[<span class="number">128</span>];   <span class="comment">//log文件名</span></span><br><span class="line"><span class="type">int</span> m_split_line;     <span class="comment">//日志最大行数</span></span><br><span class="line"><span class="type">int</span> m_log_buf_size;   <span class="comment">//日志缓冲区大小</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> m_count;    <span class="comment">//日志行数记录</span></span><br><span class="line"><span class="type">int</span> m_today;          <span class="comment">//按天分文件，记录当前时间是哪一天</span></span><br><span class="line">FILE* m_fp;           <span class="comment">//打开log的文件指针</span></span><br><span class="line"><span class="type">char</span>* m_buf;          <span class="comment">//要输出的内容</span></span><br><span class="line">block_queue&lt;string&gt;* m_log_queue;  <span class="comment">//阻塞队列</span></span><br><span class="line"><span class="type">bool</span> m_is_asyns;      <span class="comment">//是否同步标志位</span></span><br><span class="line">locker m_mutex;       <span class="comment">//同步类</span></span><br><span class="line"><span class="type">int</span> m_close_log;      <span class="comment">//关闭日志</span></span><br></pre></td></tr></table></figure>
<h3 id="日志类对象初始化"><a href="#日志类对象初始化" class="headerlink" title="日志类对象初始化"></a>日志类对象初始化</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Log::init</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* file_name,<span class="type">int</span> close_log,<span class="type">int</span> log_buf_size,<span class="type">int</span> split_lines,<span class="type">int</span> max_queue_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(max_queue_size&gt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_is_asyns=<span class="literal">true</span>;</span><br><span class="line">        m_log_queue=<span class="keyword">new</span> <span class="built_in">block_queue</span>&lt;string&gt;(max_queue_size);</span><br><span class="line">        <span class="type">pthread_t</span> tid;</span><br><span class="line">        <span class="built_in">pthread_create</span>(&amp;tid,<span class="literal">NULL</span>,flush_log_thread,<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    m_close_log=close_log;</span><br><span class="line">    m_log_buf_size=log_buf_size;</span><br><span class="line">    m_buf=<span class="keyword">new</span> <span class="type">char</span>[m_log_buf_size];</span><br><span class="line">    <span class="built_in">memset</span>(m_buf,<span class="string">&#x27;\0&#x27;</span>,m_log_buf_size);</span><br><span class="line">    m_split_line=split_lines;</span><br><span class="line">    <span class="type">time_t</span> t=<span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">tm</span>* sys_tm=<span class="built_in">localtime</span>(&amp;t);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">tm</span> my_tm=*sys_tm;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* p=<span class="built_in">strrchr</span>(file_name,<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="type">char</span> log_full_name[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">snprintf</span>(log_full_name,<span class="number">255</span>,<span class="string">&quot;%d_%02d_%02d_%s&quot;</span>,my_tm.tm_year+<span class="number">1900</span>,my_tm.tm_mon+<span class="number">1</span>,my_tm.tm_mday,file_name);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(log_name,p+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>(dir_name,file_name,p-file_name+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">snprintf</span>(log_full_name,<span class="number">255</span>,<span class="string">&quot;%s%d_%02d_%02d_%s&quot;</span>,dir_name,my_tm.tm_year+<span class="number">1900</span>,my_tm.tm_mon+<span class="number">1</span>,my_tm.tm_mday,log_name);</span><br><span class="line">    &#125;</span><br><span class="line">    m_today=my_tm.tm_mday;</span><br><span class="line">    m_fp=<span class="built_in">fopen</span>(log_full_name,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(m_fp==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>max_queue_size为阻塞队列的长度，如果不为0，表示使用异步日志模式，此时设置m_is_asyns标志为true，生成指定大小的阻塞队列，创建线程，调用flush_log_thread回调函数，表示创建线程异步写日志。如果为0，表示使用同步日志模式。同时初始化log文件名、日志最大行数、日志缓冲区大小。</p>
<h3 id="异步日志公有方法"><a href="#异步日志公有方法" class="headerlink" title="异步日志公有方法"></a>异步日志公有方法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">flush_log_thread</span><span class="params">(<span class="type">void</span>* args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Log::<span class="built_in">get_instance</span>()-&gt;<span class="built_in">async_write_log</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用私有方法async_write_log。</p>
<h3 id="异步日志私有方法"><a href="#异步日志私有方法" class="headerlink" title="异步日志私有方法"></a>异步日志私有方法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="title">async_write_log</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string single_log;</span><br><span class="line">    <span class="keyword">while</span>(m_log_queue-&gt;<span class="built_in">pop</span>(single_log))</span><br><span class="line">    &#123;</span><br><span class="line">        m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="built_in">fputs</span>(single_log.<span class="built_in">c_str</span>(),m_fp);</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从阻塞队列中取出一条日志内容，写入文件，当阻塞队列为空时，线程阻塞等待，直到有新日志插入，唤醒线程。</p>
<h3 id="用于其它文件中使用的日志写宏定义"><a href="#用于其它文件中使用的日志写宏定义" class="headerlink" title="用于其它文件中使用的日志写宏定义"></a>用于其它文件中使用的日志写宏定义</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_DEBUG(format, ...) <span class="keyword">if</span>(m_close_log==0) &#123;Log::get_instance()-&gt;write_log(0,format,##__VA_ARGS__); Log::get_instance()-&gt;flush();&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_INFO(format, ...)  <span class="keyword">if</span>(m_close_log==0) &#123;Log::get_instance()-&gt;write_log(1,format,##__VA_ARGS__); Log::get_instance()-&gt;flush();&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_WARN(format, ...)  <span class="keyword">if</span>(m_close_log==0) &#123;Log::get_instance()-&gt;write_log(2,format,##__VA_ARGS__); Log::get_instance()-&gt;flush();&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_ERROR(format, ...) <span class="keyword">if</span>(m_close_log==0) &#123;Log::get_instance()-&gt;write_log(3,format,##__VA_ARGS__); Log::get_instance()-&gt;flush();&#125;</span></span><br></pre></td></tr></table></figure>
<p>定义四个宏，用于在其它文件中进行日志写操作，其中m_close_log&#x3D;&#x3D;0表示日志未关闭，get_instance函数为通过单例模式实现的日志类对象，write_log函数为写日志的具体逻辑实现，flush函数为刷新写缓冲区。</p>
<h3 id="单例模式的日志类对象实现函数"><a href="#单例模式的日志类对象实现函数" class="headerlink" title="单例模式的日志类对象实现函数"></a>单例模式的日志类对象实现函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> Log* <span class="title">get_instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> Log instance;</span><br><span class="line">    <span class="keyword">return</span> &amp;instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="日志写的逻辑实现"><a href="#日志写的逻辑实现" class="headerlink" title="日志写的逻辑实现"></a>日志写的逻辑实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Log::write_log</span><span class="params">(<span class="type">int</span> level,<span class="type">const</span> <span class="type">char</span>* format, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timeval</span> now=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">gettimeofday</span>(&amp;now,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">time_t</span> t=now.tv_sec;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">tm</span>* sys_tm=<span class="built_in">localtime</span>(&amp;t);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">tm</span> my_tm=*sys_tm;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">16</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">switch</span>(level)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">strcpy</span>(s,<span class="string">&quot;[debug]:&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">strcpy</span>(s,<span class="string">&quot;[info]:&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">strcpy</span>(s,<span class="string">&quot;[warn]:&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">strcpy</span>(s,<span class="string">&quot;[erro]:&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">strcpy</span>(s,<span class="string">&quot;[info]:&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">    m_count++;</span><br><span class="line">    <span class="keyword">if</span>(m_today!=my_tm.tm_mday||m_count%m_split_line==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> new_log[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">fflush</span>(m_fp);</span><br><span class="line">        <span class="built_in">fclose</span>(m_fp);</span><br><span class="line">        <span class="type">char</span> tail[<span class="number">16</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">snprintf</span>(tail,<span class="number">16</span>,<span class="string">&quot;%d_%02d_%02d_&quot;</span>,my_tm.tm_year+<span class="number">1900</span>,my_tm.tm_mon+<span class="number">1</span>,my_tm.tm_mday);</span><br><span class="line">        <span class="keyword">if</span>(m_today!=my_tm.tm_mday)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">snprintf</span>(new_log,<span class="number">255</span>,<span class="string">&quot;%s%s%s&quot;</span>,dir_name,tail,log_name);</span><br><span class="line">            m_today=my_tm.tm_mday;</span><br><span class="line">            m_count=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">snprintf</span>(new_log,<span class="number">255</span>,<span class="string">&quot;%s%s%s.%lld&quot;</span>,dir_name,tail,log_name,m_count/m_split_line);</span><br><span class="line">        m_fp=<span class="built_in">fopen</span>(new_log,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    va_list valst;</span><br><span class="line">    <span class="built_in">va_start</span>(valst,format);</span><br><span class="line">    string log_str;</span><br><span class="line">    m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="type">int</span> n=<span class="built_in">snprintf</span>(m_buf,<span class="number">48</span>,<span class="string">&quot;%d-%02d-%02d %02d:%02d:%02d.%06ld %s&quot;</span>,</span><br><span class="line">                    my_tm.tm_year+<span class="number">1900</span>,my_tm.tm_mon+<span class="number">1</span>,my_tm.tm_mday,</span><br><span class="line">                    my_tm.tm_hour,my_tm.tm_min,my_tm.tm_sec,now.tv_usec,s); </span><br><span class="line">    <span class="type">int</span> m=<span class="built_in">vsnprintf</span>(m_buf+n,m_log_buf_size<span class="number">-1</span>,format,valst);</span><br><span class="line">    m_buf[n+m]=<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    m_buf[n+m+<span class="number">1</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    log_str=m_buf;</span><br><span class="line">    m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">if</span>(m_is_asyns&amp;&amp;!m_log_queue-&gt;<span class="built_in">full</span>())</span><br><span class="line">        m_log_queue-&gt;<span class="built_in">push</span>(log_str);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="built_in">fputs</span>(log_str.<span class="built_in">c_str</span>(),m_fp);</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">va_end</span>(valst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>level参数表示日志的分级，0——debug：调试代码的输出，在系统实际运行时，一般不使用；1——info：报告系统当前的状态，当前执行的流程或接收的信息；2——warn：这种警告与调试时终端的warning类似，同样是调试代码时使用；3——error：这种警告与调试时终端的warning类似，同样是调试代码时使用。日志写入前会判断当前day是否为创建日志的时间，行数是否超过最大行限制。若为创建日志时间，写入日志，否者按当前时间创建新log，更新创建时间和行数，若行数超过最大行限制，在当前日志的末尾加count&#x2F;max_lines为后缀创建新log。通过m_is_asyns标识判断异步&#x2F;同步日志，异步则将日志信息加入阻塞队列，同步则加锁向文件中写。</p>
]]></content>
      <categories>
        <category>webserver</category>
      </categories>
      <tags>
        <tag>学习日志</tag>
        <tag>日志系统</tag>
      </tags>
  </entry>
  <entry>
    <title>线程池</title>
    <url>/2022/03/05/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><p>线程池是一种基于池化思想管理和使用线程的机制。它是将多个线程预先存储在一个“池子”内，当有任务出现时可以避免重新创建和销毁线程所带来性能开销，只需要从“池子”内取出相应的线程执行对应的任务即可。当服务器进入正式运行阶段，开始处理客户请求的时候，如果它需要相关的资源，可以直接从池中获取，无需动态分配。当服务器处理完一个客户连接后，可以把相关的资源放回池中，无需执行系统调用释放资源。<br><a href="https://imgtu.com/i/OKcodJ"><img src="https://s1.ax1x.com/2022/05/06/OKcodJ.png" alt="线程池类"></a></p>
<span id="more"></span>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><p>IO的英文全称是Input&#x2F;Output，就是输入&#x2F;输出。应用程序发起的一次IO操作包含两个阶段：IO调用——应用程序进程向操作系统内核发起调用，IO执行——操作系统内核完成IO操作。操作系统内核完成IO操作还包括两个阶段：准备数据——内核等待I&#x2F;O设备准备好数据，拷贝数据——将数据从内核缓冲区拷贝到用户进程缓冲区。其实IO就是把进程的内部数据转移到外部设备，或者把外部设备的数据迁移到进程内部。外部设备一般指硬盘、Socket通讯的网卡。一个完整的IO过程包括以下几个步骤：</p>
<ul>
<li>应用程序进程向操作系统发起IO调用请求</li>
<li>操作系统准备数据，把IO外部设备的数据，加载到内核区</li>
<li>操作系统拷贝数据，即将内核缓冲区的数据，拷贝到用户进程缓冲区</li>
</ul>
<h3 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h3><p><strong>阻塞IO模型</strong>：应用程序的进程发起IO调用，如果内核的数据还没准备好的话，那应用程序就一直在阻塞等待，一直等到内核数据准备好了，从内核拷贝到用户空间，才返回成功提示。<br><strong>非阻塞IO模型</strong>：应用程序的进程发起IO调用，如果内核的数据还没准备好的话，就返回错误信息给用户进程，让其不需要等待，而是通过轮询的方式再来请求，其基本流程如下：</p>
<ul>
<li>应用进程向操作系统内核发起读数据请求</li>
<li>操作系统内核数据未准备好，立刻返回错误码</li>
<li>应用程序进程轮询调用，继续向操作系统内核发起读数据请求</li>
<li>操作系统内核数据准备好了，从内核缓冲区拷贝到用户空间</li>
<li>完成调用，返回成功提示</li>
</ul>
<p><strong>IO多路复用模型</strong>：系统提供一类函数（select、poll、epoll），它们可以同时监控多个fd文件描述符，任何一个返回内核数据就绪，应用进程再发起系统调用。</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">select</th>
<th align="center">poll</th>
<th align="center">epoll</th>
</tr>
</thead>
<tbody><tr>
<td align="center">底层数据结构</td>
<td align="center">数组</td>
<td align="center">链表</td>
<td align="center">红黑树和链表</td>
</tr>
<tr>
<td align="center">获取就绪的fd</td>
<td align="center">遍历</td>
<td align="center">遍历</td>
<td align="center">事件回调</td>
</tr>
<tr>
<td align="center">事件复杂度</td>
<td align="center">O(n)</td>
<td align="center">O(n)</td>
<td align="center">O(1)</td>
</tr>
<tr>
<td align="center">最大连接数</td>
<td align="center">1024</td>
<td align="center">无限制</td>
<td align="center">无限制</td>
</tr>
<tr>
<td align="center">fd数据拷贝</td>
<td align="center">每次调用select，需要将fd数据从用户空间拷贝到内核空间</td>
<td align="center">每次调用poll，需要将fd数据从用户空间拷贝到内核空间</td>
<td align="center">使用内存映射，不需要从用户空间频繁拷贝fd数据到内核空间</td>
</tr>
</tbody></table>
<p><strong>信号驱动IO模型</strong>：不再用主动询问的方式去确认数据是否就绪，而是向内核发送一个信号，然后应用用户进程可以去做别的事，不用阻塞。当内核数据准备好后，再通过信号通知应用进程数据准备好后的可读状态，应用用户进程收到信号之后，立刻调用读写操作。<br><strong>异步IO模型</strong>：前面提到的阻塞、非阻塞、信号驱动、多路复用IO模型，在数据从内核复制到应用缓冲区的时候，都是阻塞的，因此都不算是真正的异步。而异步IO可以实现IO全流程的非阻塞，就是应用进程发出系统调用后，是立即返回的，但是立即返回的不是处理结果，而是表示类似提交成功的意思。等内核数据准备好，将数据拷贝到用户缓冲区，发送信号通知用户进程IO操作执行完毕。</p>
<h3 id="事件处理模型"><a href="#事件处理模型" class="headerlink" title="事件处理模型"></a>事件处理模型</h3><p>服务器程序通常需要处理三类事件：I&#x2F;O 事件、信号及定时事件。随着网络设计模式的兴起，Reactor和Proactor事件处理模式应运而生。同步IO模型通常用于实现Reactor模式，异步IO模型则用于实现Proactor模式。<br><strong>Reactor模式</strong>：<br>Reactor模式要求主线程（I&#x2F;O 处理单元）只负责监听文件描述符上是否有事件发生，有的话就立即将该事件通知工作线程（逻辑单元）。除此之外，主线程不做任何其他实质性的工作。读写数据，接受新的连接，以及处理客户请求均在工作线程中完成。使用同步I&#x2F;O模型（以epoll_wait为例）实现的Reactor模式的工作流程是：</p>
<ol>
<li>主线程往epoll内核事件表中注册socket上的读就绪事件。</li>
<li>主线程调用epoll_wait等待socket上有数据可读。</li>
<li>当socket上有数据可读时，epoll_wait通知主线程。主线程则将socket可读事件放入请求队列。</li>
<li>睡眠在请求队列上的某个工作线程被唤醒，它从socket读取数据，并处理客户请求，然后往epoll内核事件表中注册该socket上的写就绪事件。</li>
<li>主线程调用epoll_wait等待socket可写。</li>
<li>当socket可写时，epoll_wait通知主线程。主线程将socket可写事件放入请求队列。</li>
<li>睡眠在请求队列上的某个工作进程被唤醒，它往socket上写入服务器处理客户请求的结果。</li>
</ol>
<p><a href="https://imgtu.com/i/O1NiEq"><img src="https://s1.ax1x.com/2022/05/08/O1NiEq.png" alt="Reactor模式"></a><br><strong>Proactor模式</strong>：<br>与Reactor模式不同，Proactor模式将所有I&#x2F;O操作都交给主线程和内核来处理,工作线程仅仅负责业务逻辑。使用异步I&#x2F;O模型（以aio_read和aio_write为例）实现的Proactor 模式的工作流程是：</p>
<ol>
<li>主线程调用aio_read函数向内核注册socket上的读完成事件,并告诉内核用户读缓冲区的位置，以及读操作完成时如何通知应用程序(这里以信号为例)。</li>
<li>主线程继续处理其他逻辑。</li>
<li>当socket上的数据被读入用户缓冲区后，内核将向应用程序发送一个信号，以通知应用程序数据已经可用。</li>
<li>应用程序预先定义好的信号处理函数选择一个工作线程来处理客户请求。工作线程处理完客户请求之后，调用aio_write函数向内核注册socket上的写完成事件，并告诉内核用户写缓冲区的位置，以及写操作完成时如何通知应用程序（仍然以信号为例）</li>
<li>主线程继续处理其他逻辑</li>
<li>当用户缓冲区的数据被写入socket之后，内核将向应用程序发送一个信号，以通知应用程序数据已经发送完毕。</li>
<li>应用程序预先定义好的信号处理函数选择一个工作线程来做善后处理，比如决定是否关闭socket。</li>
</ol>
<p><a href="https://imgtu.com/i/O1t43D"><img src="https://s1.ax1x.com/2022/05/08/O1t43D.png" alt="Proactor模式"></a></p>
<h3 id="同步IO模拟Proactor模式"><a href="#同步IO模拟Proactor模式" class="headerlink" title="同步IO模拟Proactor模式"></a>同步IO模拟Proactor模式</h3><p>由于异步I&#x2F;O并不成熟，实际中使用较少，这里将使用同步I&#x2F;O模拟实现proactor模式。同步I&#x2F;O模型的工作流程如下（epoll_wait为例）：</p>
<ol>
<li>主线程往epoll内核事件表注册socket上的读就绪事件。</li>
<li>主线程调用epoll_wait等待socket上有数据可读</li>
<li>当socket上有数据可读，epoll_wait通知主线程,主线程从socket循环读取数据，直到没有更多数据可读，然后将读取到的数据封装成一个请求对象并插入请求队列。</li>
<li>睡眠在请求队列上某个工作线程被唤醒，它获得请求对象并处理客户请求，然后往epoll内核事件表中注册该socket上的写就绪事件。</li>
<li>主线程调用epoll_wait等待socket可写。</li>
<li>当socket上有数据可写，epoll_wait通知主线程。主线程往socket上写入服务器处理客户请求的结果。</li>
</ol>
<p><a href="https://imgtu.com/i/O1NKbR"><img src="https://s1.ax1x.com/2022/05/08/O1NKbR.png" alt="模拟模式"></a></p>
<h2 id="基础API"><a href="#基础API" class="headerlink" title="基础API"></a>基础API</h2><h3 id="线程创建函数"><a href="#线程创建函数" class="headerlink" title="线程创建函数"></a>线程创建函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_create</span><span class="params">(<span class="type">pthread_t</span> *tidp, <span class="type">const</span> <span class="type">pthread_attr_t</span> *attr, (<span class="type">void</span>*)(*start_rtn)(<span class="type">void</span>*), <span class="type">void</span> *arg)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：创建新线程；</li>
<li>参数：<ul>
<li>tidp：指向线程标识符的指针；</li>
<li>attr：设置线程属性；</li>
<li>start_rtn：线程运行函数的起始地址；</li>
<li>arg：运行函数的参数；</li>
</ul>
</li>
<li>返回值：若线程创建成功，则返回0。若线程创建失败，则返回出错编号；</li>
</ul>
<h3 id="线程分离函数"><a href="#线程分离函数" class="headerlink" title="线程分离函数"></a>线程分离函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_detach</span><span class="params">(<span class="type">pthread_t</span> thread)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：实现线程分离，不再受主线程管理，由系统接任，线程结束后，其退出状态不由其它线程获取，而由自己自动释放。</li>
<li>参数：<ul>
<li>thread：线程id；</li>
</ul>
</li>
<li>返回值：调用成功返回0，失败返回出错编号；</li>
</ul>
<h2 id="核心代码分析"><a href="#核心代码分析" class="headerlink" title="核心代码分析"></a>核心代码分析</h2><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> m_thread_number;        <span class="comment">//线程池中的线程数</span></span><br><span class="line"><span class="type">int</span> m_max_requests;         <span class="comment">//请求队列中允许的最大请求数</span></span><br><span class="line"><span class="type">pthread_t</span> *m_threads;       <span class="comment">//描述线程池的数组，其大小为m_thread_number</span></span><br><span class="line">std::list&lt;T *&gt; m_workqueue; <span class="comment">//请求队列</span></span><br><span class="line">locker m_queuelocker;       <span class="comment">//保护请求队列的互斥锁</span></span><br><span class="line">sem m_queuestat;            <span class="comment">//是否有任务需要处理</span></span><br><span class="line">connection_poll *m_connPool;  <span class="comment">//数据库</span></span><br><span class="line"><span class="type">int</span> m_actor_model;          <span class="comment">//模型切换</span></span><br></pre></td></tr></table></figure>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">threadpool&lt;T&gt;::<span class="built_in">threadpool</span>( <span class="type">int</span> actor_model, connection_poll *connPool, <span class="type">int</span> thread_number, <span class="type">int</span> max_requests) : <span class="built_in">m_actor_model</span>(actor_model),<span class="built_in">m_thread_number</span>(thread_number), <span class="built_in">m_max_requests</span>(max_requests), <span class="built_in">m_threads</span>(<span class="literal">NULL</span>),<span class="built_in">m_connPool</span>(connPool)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (thread_number &lt;= <span class="number">0</span> || max_requests &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">    m_threads = <span class="keyword">new</span> <span class="type">pthread_t</span>[m_thread_number];</span><br><span class="line">    <span class="keyword">if</span> (!m_threads)</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; thread_number; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">pthread_create</span>(m_threads + i, <span class="literal">NULL</span>, worker, <span class="keyword">this</span>) != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] m_threads;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">pthread_detach</span>(m_threads[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] m_threads;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>初始化线程池中的线程数、请求队列允许的最大请求数和模型切换标志。建立多个线程，执行work回调函数，同时对线程设置detach属性，此时线程执行完毕后自动回收进程。</p>
<h3 id="公有线程工作函数"><a href="#公有线程工作函数" class="headerlink" title="公有线程工作函数"></a>公有线程工作函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *threadpool&lt;T&gt;::<span class="built_in">worker</span>(<span class="type">void</span> *arg)</span><br><span class="line">&#123;</span><br><span class="line">    threadpool *pool = (threadpool *)arg;</span><br><span class="line">    pool-&gt;<span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">return</span> pool;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用私有成员函数run。</p>
<h3 id="私有线程工作函数"><a href="#私有线程工作函数" class="headerlink" title="私有线程工作函数"></a>私有线程工作函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> threadpool&lt;T&gt;::<span class="built_in">run</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_queuestat.<span class="built_in">wait</span>();</span><br><span class="line">        m_queuelocker.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">if</span> (m_workqueue.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            m_queuelocker.<span class="built_in">unlock</span>();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        T *request = m_workqueue.<span class="built_in">front</span>();</span><br><span class="line">        m_workqueue.<span class="built_in">pop_front</span>();</span><br><span class="line">        m_queuelocker.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">if</span> (!request)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == m_actor_model)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> == request-&gt;m_state)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (request-&gt;<span class="built_in">read_once</span>())</span><br><span class="line">                &#123;</span><br><span class="line">                    request-&gt;improv = <span class="number">1</span>;</span><br><span class="line">                    <span class="function">connectionRAII <span class="title">mysqlcon</span><span class="params">(&amp;request-&gt;mysql, m_connPool)</span></span>;</span><br><span class="line">                    request-&gt;<span class="built_in">process</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    request-&gt;improv = <span class="number">1</span>;</span><br><span class="line">                    request-&gt;timer_flag = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (request-&gt;<span class="built_in">write</span>())</span><br><span class="line">                &#123;</span><br><span class="line">                    request-&gt;improv = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    request-&gt;improv = <span class="number">1</span>;</span><br><span class="line">                    request-&gt;timer_flag = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            connectionRAII <span class="built_in">mysqlcon</span>(&amp;request-&gt;mysql, m_connPool);</span><br><span class="line">            request-&gt;<span class="built_in">process</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>m_actor_model为模型切换标志，0表示proactor模式，1表示reactor模式。m_state为读写标志，0为读，1为写。在读状态下时，如果一次性读函数成功，将improv标志置1，从数据库池中取出一个数据库连接，之后执行处理读取http请求函数，如果一次性读函数失败，将timer_flag标志置1，后续从定时器队列中删除此定时器。在写状态下，执行返回http响应函数，如果失败，同样置timer_flag标志为1。</p>
]]></content>
      <categories>
        <category>webserver</category>
      </categories>
      <tags>
        <tag>学习日志</tag>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存淘汰-LRU</title>
    <url>/2022/05/03/%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5-LRU/</url>
    <content><![CDATA[<h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><p>缓存一般从以下三个特征进行描述：命中率、最大空间、淘汰策略。缓存的存储空间有限制，当缓存空间被用满时，有淘汰策略来保证可靠的命中率。本项目采用LRU（least recently used）策略，它是目前最常用的缓存算法和设计方案之一，其移除策略为“当缓存（页）满时，优先移除最近最久未使用的数据”，优点是易于设计和使用，适用场景广泛。<br><a href="https://imgtu.com/i/XmzeBt"><img src="https://s1.ax1x.com/2022/05/27/XmzeBt.png" alt="LRU"></a></p>
<span id="more"></span>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="LRU算法"><a href="#LRU算法" class="headerlink" title="LRU算法"></a>LRU算法</h3><p>LRU算法认为，最近被频繁访问的数据会具备更高的留存，淘汰那些不常被访问的数据。根据LRU算法的理念，我们需要：一个参数cap来作为最大容量，一种数据结构来存储数据，并且需要1. 轻易地更新最新的访问的数据。2. 轻易地找出最近最少被使用的数据，当到达cap时，清理掉。在项目中，我们用到的数据结构是：hashmap+双向链表。</p>
<ul>
<li>利用hashmap的get、put方法O(1)的时间复杂度，快速取、存数据</li>
<li>利用双向链表的特征（可以访问到某个节点之前和之后的节点），实现O(1)的新增和删除数据。</li>
</ul>
<h2 id="核心代码分析"><a href="#核心代码分析" class="headerlink" title="核心代码分析"></a>核心代码分析</h2><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//带前后指针的节点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DLinkedNode</span></span><br><span class="line">&#123;</span><br><span class="line">    string key,value;</span><br><span class="line">    DLinkedNode* prev;</span><br><span class="line">    DLinkedNode* next;</span><br><span class="line">    <span class="built_in">DLinkedNode</span>():<span class="built_in">key</span>(<span class="number">20</span>,<span class="string">&#x27; &#x27;</span>),<span class="built_in">value</span>(<span class="number">20</span>,<span class="string">&#x27; &#x27;</span>),<span class="built_in">prev</span>(<span class="literal">nullptr</span>),<span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">DLinkedNode</span>(string _key,string _value):<span class="built_in">key</span>(_key),<span class="built_in">value</span>(_value),<span class="built_in">prev</span>(<span class="literal">nullptr</span>),<span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//LRU类的成员变量</span></span><br><span class="line">    unordered_map&lt;string,DLinkedNode*&gt; cache;</span><br><span class="line">    vector&lt;string&gt; key_vec;</span><br><span class="line">    DLinkedNode* head;</span><br><span class="line">    DLinkedNode* tail;</span><br><span class="line">    <span class="type">int</span> size;</span><br></pre></td></tr></table></figure>
<h3 id="LRU类初始化"><a href="#LRU类初始化" class="headerlink" title="LRU类初始化"></a>LRU类初始化</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">LRUCache::<span class="built_in">LRUCache</span>(<span class="type">int</span> _capacity):<span class="built_in">capacity</span>(_capacity),<span class="built_in">size</span>(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    head=<span class="keyword">new</span> <span class="built_in">DLinkedNode</span>();</span><br><span class="line">    tail=<span class="keyword">new</span> <span class="built_in">DLinkedNode</span>();</span><br><span class="line">    head-&gt;next=tail;</span><br><span class="line">    tail-&gt;prev=head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>头结点和尾结点相连。</p>
<h3 id="移动节点"><a href="#移动节点" class="headerlink" title="移动节点"></a>移动节点</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">LRUCache::addToHead</span><span class="params">(DLinkedNode* node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node-&gt;prev=head;</span><br><span class="line">    node-&gt;next=head-&gt;next;</span><br><span class="line">    head-&gt;next-&gt;prev=node;</span><br><span class="line">    head-&gt;next=node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LRUCache::removeNode</span><span class="params">(DLinkedNode* node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node-&gt;prev-&gt;next=node-&gt;next;</span><br><span class="line">    node-&gt;next-&gt;prev=node-&gt;prev;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LRUCache::moveToHead</span><span class="params">(DLinkedNode* node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">removeNode</span>(node);</span><br><span class="line">    <span class="built_in">addToHead</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DLinkedNode* <span class="title">LRUCache::removeTail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DLinkedNode* node=tail-&gt;prev;</span><br><span class="line">    <span class="built_in">removeNode</span>(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>addToHead函数用于将目标节点添加至双向链表的头部。removeNode函数用于删除目标节点。moveToHead函数内部调用前两个函数，将双向链表中最近读取的节点移动至头部。removeTail函数用于删除双向链表中的尾部节点，即当达到最大容量时，删除最近最久未使用的数据。</p>
<h3 id="读取节点"><a href="#读取节点" class="headerlink" title="读取节点"></a>读取节点</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">LRUCache::get</span><span class="params">(string key,<span class="type">bool</span> flag=<span class="literal">true</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!cache.<span class="built_in">count</span>(key))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    DLinkedNode* node=cache[key];</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">        <span class="built_in">moveToHead</span>(node);</span><br><span class="line">    <span class="keyword">return</span> node-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LRUCache::put</span><span class="params">(string key,string value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!cache.<span class="built_in">count</span>(key))</span><br><span class="line">    &#123;</span><br><span class="line">        DLinkedNode* node=<span class="keyword">new</span> <span class="built_in">DLinkedNode</span>(key,value);</span><br><span class="line">        cache[key]=node;</span><br><span class="line">        <span class="built_in">addToHead</span>(node);</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">if</span>(size&gt;capacity)</span><br><span class="line">        &#123;</span><br><span class="line">            DLinkedNode* removed=<span class="built_in">removeTail</span>();</span><br><span class="line">            cache.<span class="built_in">erase</span>(removed-&gt;key);</span><br><span class="line">            <span class="keyword">delete</span> removed;</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        DLinkedNode* node=cache[key];</span><br><span class="line">        node-&gt;value=value;</span><br><span class="line">        <span class="built_in">moveToHead</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>get函数用于从双向链表中读取key对应的value，其中设置了标志位flag，默认为true，此时将读取的key移动至双向链表的头部。put函数用于向双向链表中添加数据，当key存在时，刷新value并移动至头部，当不存在时，先判断是否达到最大容量，未到达时直接将节点添加至头部，如果已到达最大容量，则需要删除尾部节点。</p>
]]></content>
      <categories>
        <category>分布式缓存</category>
      </categories>
      <tags>
        <tag>学习日志</tag>
        <tag>LRU</tag>
      </tags>
  </entry>
  <entry>
    <title>自封装锁</title>
    <url>/2022/03/02/%E8%87%AA%E5%B0%81%E8%A3%85%E9%94%81/</url>
    <content><![CDATA[<h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><p>对Linux下三种锁（信号量、互斥锁、条件变量）进行封装，将锁的创建和销毁函数封装在类的构造和析构函数中，实现RAII机制。<br><a href="https://imgtu.com/i/OKsSC6"><img src="https://s1.ax1x.com/2022/05/06/OKsSC6.png" alt="自封装锁"></a></p>
<span id="more"></span>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>信号量是一种特殊的变量，它只能取自然数值并且只支持两种操作：等待(P)和信号(V)，假设有信号量SV，P操作：如果SV的值大于0，则将其减一，若SV的值为0，则挂起执行；V操作：如果有其他进行因为等待SV而挂起，则唤醒，若没有，则将SV值加一。</p>
<h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>互斥锁，也成互斥量，可以保护关键代码段，以确保独占式访问，当进入关键代码段，获得互斥锁将其加锁，离开关键代码段，唤醒等待该互斥锁的线程。</p>
<h3 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h3><p>条件变量是利用线程间共享的全局变量进行同步的一种机制，主要包括两个动作：一个线程等待”条件变量的条件成立”而挂起；另一个线程使”条件成立”（给出条件成立信号）。为了防止竞争，条件变量的使用总是和一个互斥锁结合在一起。</p>
<h3 id="RAII"><a href="#RAII" class="headerlink" title="RAII"></a>RAII</h3><p>RAII是Resource Acquisition Is Initialization的简称，是C++语言的一种管理资源、避免泄漏的惯用法。利用的就是C++构造的对象最终会被销毁的原则。RAII的做法是使用一个对象，在其构造时获取对应的资源，在对象生命期内控制对资源的访问，使之始终保持有效，最后在对象析构的时候，释放构造时获取的资源。在计算机系统中，资源是数量有限且对系统正常运行具有一定作用的元素。比如：网络套接字、互斥锁、文件句柄和内存等等，它们属于系统资源。由于系统的资源是有限的，就好比自然界的石油，铁矿一样，不是取之不尽，用之不竭的，所以，我们在编程使用系统资源时，都必须遵循一个步骤：</p>
<ul>
<li>申请资源；</li>
<li>使用资源；</li>
<li>释放资源；</li>
</ul>
<p>第一步和第二步缺一不可，因为资源必须要申请才能使用的，使用完成以后，必须要释放，如果不释放的话，就会造成资源泄漏。但是如果程序很复杂的时候，需要为所有的new分配的内存delete掉，导致极度臃肿，效率下降，更可怕的是，程序的可理解性和可维护性明显降低了，当操作增多时，处理资源释放的代码就会越来越多，越来越乱。如果某一个操作发生了异常而导致释放资源的语句没有被调用，这个时候RAII机制就可以派上用场了。</p>
<h2 id="基础API"><a href="#基础API" class="headerlink" title="基础API"></a>基础API</h2><h3 id="信号量初始化"><a href="#信号量初始化" class="headerlink" title="信号量初始化"></a>信号量初始化</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sem_init</span><span class="params">(<span class="type">sem_t</span>* sem,<span class="type">int</span> pshared,<span class="type">unsigned</span> <span class="type">int</span> value)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：初始化信号量；</li>
<li>参数：<ul>
<li>sem：指向未初始化信号量结构的一个指针；</li>
<li>pshared：表示这个信号量是在进程的线程之间共享，还是在进程之间共享；<ul>
<li>如果为0，那么这个信号量会在进程的线程之间共享，并且应该位于对所有线程都可见的某个地址；</li>
<li>如果不为0，那么这个信号量将在进程之间共享，并且应该位于共享内存的某个区域；</li>
</ul>
</li>
<li>value：指定信号量的初始值；</li>
</ul>
</li>
<li>返回值：成功返回0，失败返回-1；</li>
</ul>
<h3 id="信号量销毁"><a href="#信号量销毁" class="headerlink" title="信号量销毁"></a>信号量销毁</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sem_destroy</span><span class="params">(<span class="type">sem_t</span> *sem)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：释放信号量；</li>
<li>参数：<ul>
<li>sem：通过sem_init()初始化的信号量；</li>
</ul>
</li>
<li>返回值：成功返回0，失败返回-1；</li>
</ul>
<h3 id="信号量原子-1"><a href="#信号量原子-1" class="headerlink" title="信号量原子-1"></a>信号量原子-1</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sem_wait</span><span class="params">(<span class="type">sem_t</span> *sem)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：是一个原子操作，它的作用是将信号量的值-1，但它永远会先等待该信号量为一个非零值才开始做减法。也就是说，如果你对一个值为2的信号量调用sem_wait(),线程将会继续执行，将信号量的值将减到1。如果对一个值为0的信号量调用sem_wait()，这个函数就会地等待直到有其它线程增加了这个值使它不再是0为止；</li>
<li>参数：<ul>
<li>sem：通过sem_init()初始化的信号量；</li>
</ul>
</li>
<li>返回值：成功返回0，失败返回-1；</li>
</ul>
<h3 id="信号量原子-1-1"><a href="#信号量原子-1-1" class="headerlink" title="信号量原子+1"></a>信号量原子+1</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sem_post</span><span class="params">(<span class="type">sem_t</span> *sem)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：给信号量的值+1，它是一个原子操作，即同时对同一个信号量做+1操作的两个线程是不会冲突的；</li>
<li>参数：<ul>
<li>sem：通过sem_init()初始化的信号量；</li>
</ul>
</li>
<li>返回值：成功返回0，失败返回-1；</li>
</ul>
<h3 id="互斥锁初始化"><a href="#互斥锁初始化" class="headerlink" title="互斥锁初始化"></a>互斥锁初始化</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_mutex_init</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex,<span class="type">const</span> <span class="type">pthread_mutexattr_t</span> *attr)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：初始化互斥锁；</li>
<li>参数：<ul>
<li>mutex：初始化互斥锁的地址；</li>
<li>attr：指定了新建互斥锁的属性，如果参数attr为NULL，则使用默认的互斥锁属性；</li>
</ul>
</li>
<li>返回值：调用成功返回0，否则返回一个非0的错误代码；</li>
</ul>
<h3 id="互斥锁销毁"><a href="#互斥锁销毁" class="headerlink" title="互斥锁销毁"></a>互斥锁销毁</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_mutex_destroy</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span></span>; </span><br></pre></td></tr></table></figure>
<ul>
<li>作用：释放分配给互斥锁mutex的资源；</li>
<li>参数：<ul>
<li>mutex：需要销毁的互斥锁地址；</li>
</ul>
</li>
<li>返回值：调用成功返回0，否则返回一个非0的错误代码；</li>
</ul>
<h3 id="互斥锁上锁"><a href="#互斥锁上锁" class="headerlink" title="互斥锁上锁"></a>互斥锁上锁</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_mutex_lock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span></span>; </span><br></pre></td></tr></table></figure>
<ul>
<li>作用：锁住互斥锁变量，如果已被锁住，那么发出调用的线程将被阻塞直到其它进程对mutex解锁；</li>
<li>参数：<ul>
<li>mutex：需要上锁的互斥锁地址；</li>
</ul>
</li>
<li>返回值：上锁成功返回0，否则返回一个非0的错误代码；</li>
</ul>
<h3 id="互斥锁解锁"><a href="#互斥锁解锁" class="headerlink" title="互斥锁解锁"></a>互斥锁解锁</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_mutex_unlock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span></span>; </span><br></pre></td></tr></table></figure>
<ul>
<li>作用：解除互斥锁，释放mutex引用的互斥锁对象，如果调用pthread_mutex_unlock()时有多个线程被mutex对象阻塞，则互斥锁变为可用时调度策略可确定获取该互斥锁的线程。 </li>
<li>参数：<ul>
<li>mutex：需要解锁的互斥锁地址；</li>
</ul>
</li>
<li>返回值：解锁成功返回0，否则返回一个非0的错误代码；</li>
</ul>
<h3 id="信号量初始化-1"><a href="#信号量初始化-1" class="headerlink" title="信号量初始化"></a>信号量初始化</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_init</span><span class="params">(<span class="type">pthread_cond_t</span> *cond,<span class="type">const</span> <span class="type">pthread_condattr_t</span> *attr)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：初始化一个条件变量；</li>
<li>参数：<ul>
<li>cond：需要初始化的条件变量地址；</li>
<li>attr：需要指定的条件变量的属性，默认为0；</li>
</ul>
</li>
<li>返回值：初始化成功返回0，否则返回一个非0的错误代码；</li>
</ul>
<h3 id="信号量销毁-1"><a href="#信号量销毁-1" class="headerlink" title="信号量销毁"></a>信号量销毁</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_destroy</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：销毁一个条件变量，释放资源；</li>
<li>参数：<ul>
<li>cond：需要销毁的条件变量地址；</li>
</ul>
</li>
<li>返回值：销毁成功返回0，否则返回一个非0的错误代码；</li>
</ul>
<h3 id="信号量wait"><a href="#信号量wait" class="headerlink" title="信号量wait"></a>信号量wait</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_wait</span><span class="params">(<span class="type">pthread_cond_t</span> *cond,<span class="type">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_timedwait</span><span class="params">(<span class="type">pthread_cond_t</span> *cond,<span class="type">pthread_mutex_t</span> *mutex, <span class="type">const</span> structtimespec * abstime)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：线程阻塞在条件变量，直到收到这个条件变量相关的通知。需要传入已经lock的mutex变量。进入wait函数会自动解锁mutex参数指向的互斥锁，并使当前线程阻塞在cond参数指向的条件变量上。当线程被唤醒，退出wait函数时会自动对锁再次进行加锁，成功后返回。被阻塞的线程可以被pthread_cond_signal函数、pthread_cond_broadcast函数唤醒。一般一个条件表达式都是在一个互斥锁的保护下被检查。当条件表达式未被满足时，线程将仍然阻塞在这个条件变量上。当另一个线程改变了条件的值并向条件变量发出信号时，等待在这个条件变量上的一个线程或所有线程被唤醒，接着都试图再次占有相应的互斥锁。</li>
<li>参数：<ul>
<li>cond：条件变量地址；</li>
<li>mutex：互斥锁地址；</li>
<li>abstime：指定超时时间，函数到了一定的时间，即使条件未发生也会解除阻塞；</li>
</ul>
</li>
<li>返回值：调用成功返回0，否则返回一个非0的错误代码；</li>
</ul>
<h3 id="信号量signal"><a href="#信号量signal" class="headerlink" title="信号量signal"></a>信号量signal</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_signal</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_broadcast</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用：这两个函数都会对指定的条件变量产生信号，通知其他线程。唯一一个区别在于当有多个线程阻塞等待条件变量的信号时，这两个函数产生信号后，对其他线程产生的影响会不一样。pthread_cond_signal 会保证至少会唤醒其中一个阻塞在这个条件变量的的线程。pthread_cond_broadcast会唤醒所有阻塞在这个条件变量的线程，适用于那些阻塞的不同线程被唤醒后会处理不同的任务。</li>
<li>参数：cond：条件变量地址；</li>
<li>返回值：调用成功返回0，否者返回一个非0的错误代码；</li>
</ul>
<h2 id="核心代码分析"><a href="#核心代码分析" class="headerlink" title="核心代码分析"></a>核心代码分析</h2><h3 id="信号量类具体实现"><a href="#信号量类具体实现" class="headerlink" title="信号量类具体实现"></a>信号量类具体实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">sem</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">sem_t</span> m_sem;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">sem</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">sem_init</span>(&amp;m_sem,<span class="number">0</span>,<span class="number">0</span>)!=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sem</span>(<span class="type">int</span> num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">sem_init</span>(&amp;m_sem,<span class="number">0</span>,num)!=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">sem</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sem_destroy</span>(&amp;m_sem);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wait</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sem_wait</span>(&amp;m_sem)==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">post</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sem_post</span>(&amp;m_sem)==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="互斥锁类具体实现"><a href="#互斥锁类具体实现" class="headerlink" title="互斥锁类具体实现"></a>互斥锁类具体实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">locker</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">pthread_mutex_t</span> m_mutex;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">locker</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pthread_mutex_init</span>(&amp;m_mutex,<span class="literal">NULL</span>)!=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">locker</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pthread_mutex_destroy</span>(&amp;m_mutex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">lock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pthread_mutex_lock</span>(&amp;m_mutex)==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">unlock</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pthread_mutex_unlock</span>(&amp;m_mutex)==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">pthread_mutex_t</span>* <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;m_mutex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="条件变量类具体实现"><a href="#条件变量类具体实现" class="headerlink" title="条件变量类具体实现"></a>条件变量类具体实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">cond</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">pthread_cond_t</span> m_cond;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">cond</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pthread_cond_init</span>(&amp;m_cond,<span class="literal">NULL</span>)!=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">cond</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pthread_cond_destroy</span>(&amp;m_cond);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wait</span><span class="params">(<span class="type">pthread_mutex_t</span>* m_mutex)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret=<span class="built_in">pthread_cond_wait</span>(&amp;m_cond,m_mutex);</span><br><span class="line">        <span class="keyword">return</span> ret==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">timewait</span><span class="params">(<span class="type">pthread_mutex_t</span>* m_mutex,<span class="keyword">struct</span> timespec t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret=<span class="built_in">pthread_cond_timedwait</span>(&amp;m_cond,m_mutex,&amp;t);</span><br><span class="line">        <span class="keyword">return</span> ret==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">signal</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pthread_cond_signal</span>(&amp;m_cond)==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">broadcast</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pthread_cond_broadcast</span>(&amp;m_cond)==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>webserver</category>
      </categories>
      <tags>
        <tag>学习日志</tag>
        <tag>自封装锁</tag>
      </tags>
  </entry>
  <entry>
    <title>通信格式及辅助函数</title>
    <url>/2022/05/05/%E9%80%9A%E4%BF%A1%E6%A0%BC%E5%BC%8F%E5%8F%8A%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><p>采用JSON格式作为master、cache server和client之间的通行数据格式，借助德国大牛nlohmann写的json for modern C++，只需要包含头文件json.hpp，再using json &#x3D; nlohmann::json;就可以直接使用。同时封装了需要在项目中多次使用的函数。</p>
<span id="more"></span>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="json格式"><a href="#json格式" class="headerlink" title="json格式"></a>json格式</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">json data=</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>:XXX,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;XXX&quot;</span>:XXX,</span><br><span class="line">        <span class="string">&quot;XXX&quot;</span>:[XXX,XXX]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">json::<span class="built_in">parse</span>()  <span class="comment">//json数据包转换为字符串</span></span><br><span class="line">json::<span class="built_in">dump</span>()   <span class="comment">//字符串转换为json格式</span></span><br><span class="line">json::<span class="built_in">accept</span>() <span class="comment">//判断是否为json格式</span></span><br></pre></td></tr></table></figure>
<p>项目中采用的json数据报格式如上所示，并设计了json格式。</p>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>KEY_VALUE_REQUEST</td>
<td>Client向Cache Server请求数据</td>
</tr>
<tr>
<td>KEY_VALUE_RESPOND</td>
<td>Cache Server向Client发送数据</td>
</tr>
<tr>
<td>HEART_BEAT</td>
<td>Cache Server向Master发送心跳包</td>
</tr>
<tr>
<td>DISTRIBUTION_REQUEST</td>
<td>Client向Master拉取节点分布</td>
</tr>
<tr>
<td>DISTRIBUTION_RESPOND</td>
<td>Master向Client发送节点分布</td>
</tr>
<tr>
<td>SHUTDOWN_CACHE SERVER</td>
<td>Master向Cache Server发送关闭节点指令</td>
</tr>
<tr>
<td>ADD_CACHE SERVER</td>
<td>主动扩容，Master向Client发送节点分布</td>
</tr>
<tr>
<td>SPARE_MASTER</td>
<td>主Master向从Master发送心跳包</td>
</tr>
<tr>
<td>REFLESH_MASTER</td>
<td>主Master关闭，从Master发布重连信息</td>
</tr>
<tr>
<td>REFLESH_IP</td>
<td>主动&#x2F;被动缩容时，Master向Client发送节点分布</td>
</tr>
<tr>
<td>KEY_VALUE_RESPONDBK</td>
<td>Cache Server内部数据转移</td>
</tr>
<tr>
<td>DISTRIBUTION_REQUESTBK</td>
<td>Cache Server收到了Client的数据请求</td>
</tr>
</tbody></table>
<h3 id="Socket相关函数"><a href="#Socket相关函数" class="headerlink" title="Socket相关函数"></a>Socket相关函数</h3><p>Socket是在应用层和传输层之间的一个抽象层，它把TCP&#x2F;IP层复杂的操作抽象为几个简单的接口，供应用层调用实现进程在网络中的通信。项目中对Socket通信中常用的函数进行了封装。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//建立socket套接字</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Socket</span><span class="params">(<span class="type">int</span> family,<span class="type">int</span> type,<span class="type">int</span> protocol)</span></span>;</span><br><span class="line"><span class="comment">//绑定socket套接字</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Bind</span><span class="params">(<span class="type">int</span> fd,<span class="type">const</span> <span class="keyword">struct</span> sockaddr* sa,<span class="type">socklen_t</span> len)</span></span>;</span><br><span class="line"><span class="comment">//监听socket套接字</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Listen</span><span class="params">(<span class="type">int</span> fd,<span class="type">int</span> backlog)</span></span>;</span><br><span class="line"><span class="comment">//建立连接</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Connect</span><span class="params">(<span class="type">int</span> fd,<span class="type">const</span> <span class="keyword">struct</span> sockaddr* sa,<span class="type">socklen_t</span> len)</span></span>;</span><br><span class="line"><span class="comment">//向服务端发起连接</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Socket_connect</span><span class="params">(<span class="type">bool</span> first_call,<span class="type">const</span> <span class="keyword">struct</span> sockaddr* sa,<span class="type">socklen_t</span> len)</span></span>;</span><br><span class="line"><span class="comment">//接收连接</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Accept</span><span class="params">(<span class="type">int</span> fd,<span class="keyword">struct</span> sockaddr* sa,<span class="type">socklen_t</span>* len)</span></span>;</span><br><span class="line"><span class="comment">//关闭文件描述符</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Close</span><span class="params">(<span class="type">int</span> fd)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="文件读写函数"><a href="#文件读写函数" class="headerlink" title="文件读写函数"></a>文件读写函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> fd,<span class="type">char</span>* ptr,<span class="type">size_t</span> nbyte)</span></span>;</span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">Readonce</span><span class="params">(<span class="type">int</span> cfd,<span class="type">char</span>* buf,<span class="type">int</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">unblock_read_net</span><span class="params">(<span class="type">int</span> cfd,<span class="type">char</span>* buf,<span class="type">int</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">Write</span><span class="params">(<span class="type">int</span> fd,<span class="type">const</span> <span class="type">void</span>* ptr,<span class="type">size_t</span> nbyte)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="Epoll相关函数"><a href="#Epoll相关函数" class="headerlink" title="Epoll相关函数"></a>Epoll相关函数</h3><p>epoll 全称 eventpoll，是 linux 内核实现IO多路复用（IO multiplexing）的一个实现。IO多路复用的意思是在一个操作里同时监听多个输入输出源，在其中一个或多个输入输出源可用的时候返回，然后对其的进行读写操作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建epoll文件</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Epoll_create</span><span class="params">(<span class="type">int</span> size)</span></span>;</span><br><span class="line"><span class="comment">//向epoll中添加/删除/修改需要监听的文件描述符</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Epoll_ctl</span><span class="params">(<span class="type">int</span> epfd,<span class="type">int</span> op,<span class="type">int</span> fd,<span class="keyword">struct</span> epoll_event* event)</span></span>;</span><br><span class="line"><span class="comment">//监听epoll中的文件描述符</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Epoll_wait</span><span class="params">(<span class="type">int</span> epfd,<span class="keyword">struct</span> epoll_event* events,<span class="type">int</span> maxevents,<span class="type">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="其它函数"><a href="#其它函数" class="headerlink" title="其它函数"></a>其它函数</h3><p>cache的地址定义为string字符串：IP+端口号，get_ipport函数用于从地址字符串中取出IP和端口号，放入ipport_pair结构体中。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ipport_pair</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> port;</span><br><span class="line">    string ip;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">ipport_pair <span class="title">get_ipport</span><span class="params">(string addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ipport_pair</span> res;</span><br><span class="line">    <span class="type">int</span> cut=addr.<span class="built_in">find_last_of</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    res.ip=addr.<span class="built_in">substr</span>(<span class="number">0</span>,cut);</span><br><span class="line">    res.port=<span class="built_in">stoi</span>(addr.<span class="built_in">substr</span>(cut+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获得指定长度的随机字符串，用于生成随机key和value。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">RandStr</span><span class="params">(<span class="type">const</span> <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timeval</span> timeSeed;</span><br><span class="line">    <span class="built_in">gettimeofday</span>(&amp;timeSeed,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">1000000</span>*timeSeed.tv_sec+timeSeed.tv_usec);</span><br><span class="line">    string ans;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">switch</span> ((<span class="built_in">rand</span>()%<span class="number">3</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                c=<span class="built_in">RAND</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                c=<span class="built_in">RAND</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;z&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                c=<span class="built_in">RAND</span>(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=c;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[++i]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>分布式缓存</category>
      </categories>
      <tags>
        <tag>学习日志</tag>
        <tag>通信格式</tag>
        <tag>辅助函数</tag>
      </tags>
  </entry>
  <entry>
    <title>学习博客</title>
    <url>/2022/05/20/%E9%A6%96%E9%A1%B5/</url>
    <content><![CDATA[<h1 id="分布式缓存项目"><a href="#分布式缓存项目" class="headerlink" title="分布式缓存项目"></a>分布式缓存项目</h1><p>实现基于C++的<a href="https://github.com/glyhust/Tiny-Distributed-cache">分布式缓存系统</a>，设计了多Master、多Cache Server以及若干Client并存的分布式缓存架构，能够具有基础的数据读写、分布获取、状态上报功能，同时具备容灾能力。</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>单个Cache server采用LRU机制保存指定数量的key，并主动淘汰多余的key，同时使用基于epoll和线程池的架构高并发地进行数据收发。</li>
<li>Cache server使用一致哈希算法实现负载均衡，并且会定时向Master发送心跳包以通知自身存活情况。</li>
<li>Master检测到新的Cache server接入时，向所有其它服务器发送扩容指令和新的节点分布列表，各服务器接到指令后通过一致哈希算法将数据转移到新的Cache server。</li>
<li>Master发送缩容指令和新的节点分布列表，接到指定的服务器通过一致哈希算法将数据转移到其它Cache server，最后自动关闭。</li>
<li>Master检测到某个Cache server没有发送心跳包后，向其它节点发送节点更新指令和新的节点分布列表，其它服务器收到指令后将所有备份数据通过一致哈希算法转移到其各自新的对应Cache server上。</li>
<li>Client能生成随机数据并写入Cache server，或者根据key向其对应的Cache server服务器请求value值，当请求超时时，向Master端请求最新的节点分布。Cache server收到数据后会将数据发送到备份Cache server上进行备份处理。</li>
<li>主Master向从Master定时发送心跳包，当从Master检测到主Master停止工作时，会主动通知所有Cache server节点连接到新的Master，接替工作。</li>
</ul>
<h3 id="博客导航"><a href="#博客导航" class="headerlink" title="博客导航"></a>博客导航</h3><ul>
<li><a href="https://glyhust.github.io/2022/05/03/%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5-LRU/">缓存淘汰策略-LRU</a></li>
<li><a href="https://glyhust.github.io/2022/05/05/%E9%80%9A%E4%BF%A1%E6%A0%BC%E5%BC%8F%E5%8F%8A%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0/">通信格式及辅助函数</a></li>
<li><a href="https://glyhust.github.io/2022/05/06/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/">一致性哈希</a></li>
<li><a href="https://glyhust.github.io/2022/05/10/cache%E6%A8%A1%E5%9D%97%E2%80%94%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99">cache模块—数据读写</a></li>
<li><a href="https://glyhust.github.io/2022/05/12/cache%E6%A8%A1%E5%9D%97%E2%80%94%E5%BF%83%E8%B7%B3%E5%8C%85">cache模块—心跳包</a></li>
<li><a href="https://glyhust.github.io/2022/05/16/client%E6%A8%A1%E5%9D%97/">client模块</a></li>
<li><a href="https://glyhust.github.io/2022/05/20/master%E6%A8%A1%E5%9D%97/">master模块</a></li>
</ul>
<h1 id="WebServer项目"><a href="#WebServer项目" class="headerlink" title="WebServer项目"></a>WebServer项目</h1><p>使用C++语言在Linux环境下搭建<a href="https://github.com/glyhust/GlyWebServer">轻量级Web服务器</a></p>
<h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><ul>
<li>结合线程池、socket套接字、epoll函数实现多线程的并发模型，通过标志位切换LT&#x2F;ET模式、Reactor&#x2F;模拟Proactor模式</li>
<li>结合主状态机、从状态机解析HTTP请求报文，可以处理GET和POST请求，返回服务器图片、视频资源</li>
<li>使用服务器内部数据库保存用户名、登录密码，实现用户通过浏览器进行注册、登录功能</li>
<li>基于有序链表实现定时器，关闭超时的非活跃连接</li>
<li>结合单例模式和阻塞队列实现异步写日志模式，记录服务器的运行状态</li>
</ul>
<h3 id="博客导航-1"><a href="#博客导航-1" class="headerlink" title="博客导航"></a>博客导航</h3><ul>
<li><a href="https://glyhust.github.io/2022/03/01/main%E4%B8%BB%E5%87%BD%E6%95%B0/">main主函数</a></li>
<li><a href="https://glyhust.github.io/2022/03/02/%E8%87%AA%E5%B0%81%E8%A3%85%E9%94%81/">自封装锁</a></li>
<li><a href="https://glyhust.github.io/2022/03/05/%E7%BA%BF%E7%A8%8B%E6%B1%A0/">线程池</a></li>
<li><a href="https://glyhust.github.io/2022/03/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/">数据库连接池</a></li>
<li><a href="https://glyhust.github.io/2022/03/11/%E6%97%A5%E5%BF%97/">日志系统</a></li>
<li><a href="https://glyhust.github.io/2022/03/15/%E5%AE%9A%E6%97%B6%E5%99%A8/">定时器</a></li>
<li><a href="https://glyhust.github.io/2022/03/20/http%E5%A4%84%E7%90%86%E7%B1%BB/">http处理类</a></li>
<li><a href="https://glyhust.github.io/2022/03/24/WebServer%E7%B1%BB/">WebServer类</a></li>
</ul>
]]></content>
  </entry>
</search>
